"""add location system models

Revision ID: 548c7fd6bf43
Revises: 3205fd04cad5
Create Date: 2025-06-22 13:45:26.486190

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision = '548c7fd6bf43'
down_revision = '3205fd04cad5'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('locations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('location_type', sa.Enum('CITY', 'TOWN', 'DUNGEON', 'WILD', 'SPECIAL', name='locationtype'), nullable=False),
    sa.Column('hierarchy_level', sa.Integer(), nullable=False),
    sa.Column('danger_level', sa.Enum('SAFE', 'LOW', 'MEDIUM', 'HIGH', 'EXTREME', name='dangerlevel'), nullable=False),
    sa.Column('x_coordinate', sa.Integer(), nullable=False),
    sa.Column('y_coordinate', sa.Integer(), nullable=False),
    sa.Column('has_inn', sa.Boolean(), nullable=False),
    sa.Column('has_shop', sa.Boolean(), nullable=False),
    sa.Column('has_guild', sa.Boolean(), nullable=False),
    sa.Column('fragment_discovery_rate', sa.Integer(), nullable=False),
    sa.Column('is_starting_location', sa.Boolean(), nullable=False),
    sa.Column('is_discovered', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_locations_name'), 'locations', ['name'], unique=False)
    op.create_table('exploration_areas',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('location_id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('difficulty', sa.Integer(), nullable=False),
    sa.Column('exploration_sp_cost', sa.Integer(), nullable=False),
    sa.Column('max_fragments_per_exploration', sa.Integer(), nullable=False),
    sa.Column('rare_fragment_chance', sa.Integer(), nullable=False),
    sa.Column('encounter_rate', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['location_id'], ['locations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_exploration_areas_name'), 'exploration_areas', ['name'], unique=False)
    op.create_table('location_connections',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('from_location_id', sa.Integer(), nullable=False),
    sa.Column('to_location_id', sa.Integer(), nullable=False),
    sa.Column('base_sp_cost', sa.Integer(), nullable=False),
    sa.Column('distance', sa.Integer(), nullable=False),
    sa.Column('min_level_required', sa.Integer(), nullable=False),
    sa.Column('is_one_way', sa.Boolean(), nullable=False),
    sa.Column('is_blocked', sa.Boolean(), nullable=False),
    sa.Column('travel_description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['from_location_id'], ['locations.id'], ),
    sa.ForeignKeyConstraint(['to_location_id'], ['locations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('character_location_history',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('character_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('location_id', sa.Integer(), nullable=False),
    sa.Column('arrived_at', sa.DateTime(), nullable=False),
    sa.Column('departed_at', sa.DateTime(), nullable=True),
    sa.Column('sp_consumed', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['character_id'], ['characters.id'], ),
    sa.ForeignKeyConstraint(['location_id'], ['locations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_character_location_history_character_id'), 'character_location_history', ['character_id'], unique=False)
    op.create_table('exploration_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('character_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('area_id', sa.Integer(), nullable=False),
    sa.Column('explored_at', sa.DateTime(), nullable=False),
    sa.Column('sp_consumed', sa.Integer(), nullable=False),
    sa.Column('fragments_found', sa.Integer(), nullable=False),
    sa.Column('encounters', sa.Integer(), nullable=False),
    sa.Column('result_details', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['area_id'], ['exploration_areas.id'], ),
    sa.ForeignKeyConstraint(['character_id'], ['characters.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_exploration_logs_character_id'), 'exploration_logs', ['character_id'], unique=False)
    op.add_column('characters', sa.Column('location_id', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'characters', 'locations', ['location_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'characters', type_='foreignkey')
    op.drop_column('characters', 'location_id')
    op.drop_index(op.f('ix_exploration_logs_character_id'), table_name='exploration_logs')
    op.drop_table('exploration_logs')
    op.drop_index(op.f('ix_character_location_history_character_id'), table_name='character_location_history')
    op.drop_table('character_location_history')
    op.drop_table('location_connections')
    op.drop_index(op.f('ix_exploration_areas_name'), table_name='exploration_areas')
    op.drop_table('exploration_areas')
    op.drop_index(op.f('ix_locations_name'), table_name='locations')
    op.drop_table('locations')
    # ### end Alembic commands ###