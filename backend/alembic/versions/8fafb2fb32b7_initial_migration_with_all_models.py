"""initial migration with all models

Revision ID: 8fafb2fb32b7
Revises:
Create Date: 2025-07-12 04:21:22.166654

"""
import sqlalchemy as sa
import sqlmodel

from alembic import op

# revision identifiers, used by Alembic.
revision = '8fafb2fb32b7'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('items',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('item_type', sa.Enum('WEAPON', 'ARMOR', 'ACCESSORY', 'CONSUMABLE', 'SPECIAL', 'MATERIAL', name='itemtype'), nullable=False),
    sa.Column('rarity', sa.Enum('COMMON', 'UNCOMMON', 'RARE', 'EPIC', 'LEGENDARY', name='itemrarity'), nullable=False),
    sa.Column('effects', sa.JSON(), nullable=False),
    sa.Column('tradeable', sa.Boolean(), nullable=False),
    sa.Column('stackable', sa.Boolean(), nullable=False),
    sa.Column('max_stack', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_items_name'), 'items', ['name'], unique=False)
    op.create_table('locations',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('location_type', sa.Enum('CITY', 'TOWN', 'DUNGEON', 'WILD', 'SPECIAL', name='locationtype'), nullable=False),
    sa.Column('hierarchy_level', sa.Integer(), nullable=False),
    sa.Column('danger_level', sa.Enum('SAFE', 'LOW', 'MEDIUM', 'HIGH', 'EXTREME', name='dangerlevel'), nullable=False),
    sa.Column('x_coordinate', sa.Integer(), nullable=False),
    sa.Column('y_coordinate', sa.Integer(), nullable=False),
    sa.Column('parent_location_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('weather_conditions', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('time_flow_rate', sa.Float(), nullable=False),
    sa.Column('location_metadata', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['parent_location_id'], ['locations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_locations_id'), 'locations', ['id'], unique=False)
    op.create_index(op.f('ix_locations_name'), 'locations', ['name'], unique=False)
    op.create_table('skills',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=False),
    sa.Column('skill_type', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('base_power', sa.Integer(), nullable=False),
    sa.Column('sp_cost', sa.Integer(), nullable=False),
    sa.Column('cooldown_turns', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_skills_id'), 'skills', ['id'], unique=False)
    op.create_index(op.f('ix_skills_name'), 'skills', ['name'], unique=True)
    op.create_table('users',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('hashed_password', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('characters',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True),
    sa.Column('appearance', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True),
    sa.Column('personality', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True),
    sa.Column('location', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('location_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('character_metadata', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['location_id'], ['locations.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_characters_id'), 'characters', ['id'], unique=False)
    op.create_index(op.f('ix_characters_name'), 'characters', ['name'], unique=False)
    op.create_index(op.f('ix_characters_user_id'), 'characters', ['user_id'], unique=False)
    op.create_table('exploration_areas',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('location_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('difficulty', sa.Integer(), nullable=False),
    sa.Column('exploration_sp_cost', sa.Integer(), nullable=False),
    sa.Column('max_fragments_per_exploration', sa.Integer(), nullable=False),
    sa.Column('rare_fragment_chance', sa.Integer(), nullable=False),
    sa.Column('encounter_rate', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['location_id'], ['locations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_exploration_areas_id'), 'exploration_areas', ['id'], unique=False)
    op.create_index(op.f('ix_exploration_areas_name'), 'exploration_areas', ['name'], unique=False)
    op.create_table('location_connections',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('from_location_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('to_location_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('base_sp_cost', sa.Integer(), nullable=False),
    sa.Column('distance', sa.Integer(), nullable=False),
    sa.Column('min_level_required', sa.Integer(), nullable=False),
    sa.Column('is_one_way', sa.Boolean(), nullable=False),
    sa.Column('is_blocked', sa.Boolean(), nullable=False),
    sa.Column('path_type', sa.Enum('DIRECT', 'CURVED', 'TELEPORT', 'STAIRS', 'ELEVATOR', name='pathtype'), nullable=False),
    sa.Column('path_metadata', sa.JSON(), nullable=True),
    sa.Column('travel_description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['from_location_id'], ['locations.id'], ),
    sa.ForeignKeyConstraint(['to_location_id'], ['locations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_location_connections_id'), 'location_connections', ['id'], unique=False)
    op.create_table('player_sp',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('current_sp', sa.Integer(), nullable=False),
    sa.Column('total_earned_sp', sa.Integer(), nullable=False),
    sa.Column('total_consumed_sp', sa.Integer(), nullable=False),
    sa.Column('total_purchased_sp', sa.Integer(), nullable=False),
    sa.Column('total_purchase_amount', sa.Integer(), nullable=False),
    sa.Column('active_subscription', sa.Enum('BASIC', 'PREMIUM', name='spsubscriptiontype'), nullable=True),
    sa.Column('subscription_expires_at', sa.DateTime(), nullable=True),
    sa.Column('last_daily_recovery_at', sa.DateTime(), nullable=True),
    sa.Column('consecutive_login_days', sa.Integer(), nullable=False),
    sa.Column('last_login_date', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', name='uq_player_sp_user_id')
    )
    op.create_index(op.f('ix_player_sp_id'), 'player_sp', ['id'], unique=False)
    op.create_index(op.f('ix_player_sp_user_id'), 'player_sp', ['user_id'], unique=False)
    op.create_table('sp_purchases',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('plan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('sp_amount', sa.Integer(), nullable=False),
    sa.Column('price_jpy', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', 'CANCELLED', 'REFUNDED', name='purchasestatus'), nullable=False),
    sa.Column('payment_mode', sa.Enum('TEST', 'PRODUCTION', name='paymentmode'), nullable=False),
    sa.Column('test_reason', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('approved_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('approved_at', sa.DateTime(), nullable=True),
    sa.Column('stripe_payment_intent_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('stripe_checkout_session_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_sp_purchases_id'), 'sp_purchases', ['id'], unique=False)
    op.create_index(op.f('ix_sp_purchases_plan_id'), 'sp_purchases', ['plan_id'], unique=False)
    op.create_index(op.f('ix_sp_purchases_user_id'), 'sp_purchases', ['user_id'], unique=False)
    op.create_table('sp_subscriptions',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('subscription_type', sa.Enum('BASIC', 'PREMIUM', name='spsubscriptiontype'), nullable=True),
    sa.Column('status', sa.Enum('ACTIVE', 'CANCELLED', 'EXPIRED', 'PENDING', 'FAILED', name='subscriptionstatus'), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('cancelled_at', sa.DateTime(), nullable=True),
    sa.Column('stripe_subscription_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('stripe_customer_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('stripe_payment_method_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('price', sa.Integer(), nullable=False),
    sa.Column('currency', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('auto_renew', sa.Boolean(), nullable=False),
    sa.Column('next_billing_date', sa.DateTime(), nullable=True),
    sa.Column('trial_end', sa.DateTime(), nullable=True),
    sa.Column('extra_data', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_sp_subscription_status', 'sp_subscriptions', ['status'], unique=False)
    op.create_index('idx_sp_subscription_stripe_id', 'sp_subscriptions', ['stripe_subscription_id'], unique=False)
    op.create_index('idx_sp_subscription_user_id', 'sp_subscriptions', ['user_id'], unique=False)
    op.create_table('user_roles',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('role', sa.Enum('ADMIN', 'PLAYER', 'MODERATOR', name='roletype'), nullable=False),
    sa.Column('granted_at', sa.DateTime(), nullable=False),
    sa.Column('granted_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['granted_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_roles_id'), 'user_roles', ['id'], unique=False)
    op.create_index(op.f('ix_user_roles_user_id'), 'user_roles', ['user_id'], unique=False)
    op.create_table('character_exploration_progress',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('character_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('location_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('exploration_percentage', sa.Integer(), nullable=False),
    sa.Column('fog_revealed_at', sa.DateTime(), nullable=True),
    sa.Column('fully_explored_at', sa.DateTime(), nullable=True),
    sa.Column('areas_explored', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['character_id'], ['characters.id'], ),
    sa.ForeignKeyConstraint(['location_id'], ['locations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_character_exploration_progress_character_id'), 'character_exploration_progress', ['character_id'], unique=False)
    op.create_index(op.f('ix_character_exploration_progress_id'), 'character_exploration_progress', ['id'], unique=False)
    op.create_index(op.f('ix_character_exploration_progress_location_id'), 'character_exploration_progress', ['location_id'], unique=False)
    op.create_table('character_items',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('character_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('item_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('obtained_at', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_equipped', sa.Boolean(), nullable=False),
    sa.Column('slot', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['character_id'], ['characters.id'], ),
    sa.ForeignKeyConstraint(['item_id'], ['items.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_character_items_character_id'), 'character_items', ['character_id'], unique=False)
    op.create_index(op.f('ix_character_items_item_id'), 'character_items', ['item_id'], unique=False)
    op.create_table('character_location_history',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('character_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('location_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('arrived_at', sa.DateTime(), nullable=False),
    sa.Column('departed_at', sa.DateTime(), nullable=True),
    sa.Column('sp_consumed', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['character_id'], ['characters.id'], ),
    sa.ForeignKeyConstraint(['location_id'], ['locations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_character_location_history_character_id'), 'character_location_history', ['character_id'], unique=False)
    op.create_index(op.f('ix_character_location_history_id'), 'character_location_history', ['id'], unique=False)
    op.create_table('character_skills',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('character_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('skill_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('level', sa.Integer(), nullable=False),
    sa.Column('experience', sa.Integer(), nullable=False),
    sa.Column('unlocked_at', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['character_id'], ['characters.id'], ),
    sa.ForeignKeyConstraint(['skill_id'], ['skills.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_character_skills_character_id'), 'character_skills', ['character_id'], unique=False)
    op.create_index(op.f('ix_character_skills_id'), 'character_skills', ['id'], unique=False)
    op.create_index(op.f('ix_character_skills_skill_id'), 'character_skills', ['skill_id'], unique=False)
    op.create_table('character_stats',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('character_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('level', sa.Integer(), nullable=False),
    sa.Column('experience', sa.Integer(), nullable=False),
    sa.Column('health', sa.Integer(), nullable=False),
    sa.Column('max_health', sa.Integer(), nullable=False),
    sa.Column('mp', sa.Integer(), nullable=False),
    sa.Column('max_mp', sa.Integer(), nullable=False),
    sa.Column('attack', sa.Integer(), nullable=False),
    sa.Column('defense', sa.Integer(), nullable=False),
    sa.Column('agility', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['character_id'], ['characters.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_character_stats_character_id'), 'character_stats', ['character_id'], unique=True)
    op.create_index(op.f('ix_character_stats_id'), 'character_stats', ['id'], unique=False)
    op.create_table('character_titles',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('character_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('acquired_at', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('effects', sa.JSON(), nullable=False),
    sa.Column('is_equipped', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['character_id'], ['characters.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_character_titles_character_id'), 'character_titles', ['character_id'], unique=False)
    op.create_table('encounter_stories',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('character_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('encounter_entity_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('encounter_type', sa.Enum('LOG_NPC', 'PERSISTENT_NPC', 'OTHER_PLAYER', 'LOG_ENCOUNTER', name='encountertype'), nullable=False),
    sa.Column('story_arc_type', sa.Enum('QUEST_CHAIN', 'RIVALRY', 'ALLIANCE', 'MENTORSHIP', 'ROMANCE', 'MYSTERY', 'CONFLICT', 'COLLABORATION', name='storyarctype'), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('current_chapter', sa.Integer(), nullable=False),
    sa.Column('total_chapters', sa.Integer(), nullable=True),
    sa.Column('relationship_status', sa.Enum('INITIAL', 'DEVELOPING', 'ESTABLISHED', 'DEEPENING', 'TRANSFORMED', 'CONCLUDED', name='relationshipstatus'), nullable=False),
    sa.Column('relationship_depth', sa.Float(), nullable=False),
    sa.Column('trust_level', sa.Float(), nullable=False),
    sa.Column('conflict_level', sa.Float(), nullable=False),
    sa.Column('story_beats', sa.JSON(), nullable=True),
    sa.Column('shared_memories', sa.JSON(), nullable=True),
    sa.Column('pending_plot_threads', sa.JSON(), nullable=True),
    sa.Column('active_quest_ids', sa.JSON(), nullable=True),
    sa.Column('completed_quest_ids', sa.JSON(), nullable=True),
    sa.Column('world_impact', sa.JSON(), nullable=True),
    sa.Column('character_growth', sa.JSON(), nullable=True),
    sa.Column('narrative_tension', sa.Float(), nullable=False),
    sa.Column('emotional_resonance', sa.Float(), nullable=False),
    sa.Column('story_momentum', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('last_interaction_at', sa.DateTime(), nullable=False),
    sa.Column('next_expected_beat', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['character_id'], ['characters.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_encounter_stories_character_id'), 'encounter_stories', ['character_id'], unique=False)
    op.create_index(op.f('ix_encounter_stories_encounter_entity_id'), 'encounter_stories', ['encounter_entity_id'], unique=False)
    op.create_index(op.f('ix_encounter_stories_id'), 'encounter_stories', ['id'], unique=False)
    op.create_table('exploration_logs',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('character_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('area_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('explored_at', sa.DateTime(), nullable=False),
    sa.Column('sp_consumed', sa.Integer(), nullable=False),
    sa.Column('fragments_found', sa.Integer(), nullable=False),
    sa.Column('encounters', sa.Integer(), nullable=False),
    sa.Column('result_details', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['area_id'], ['exploration_areas.id'], ),
    sa.ForeignKeyConstraint(['character_id'], ['characters.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_exploration_logs_character_id'), 'exploration_logs', ['character_id'], unique=False)
    op.create_index(op.f('ix_exploration_logs_id'), 'exploration_logs', ['id'], unique=False)
    op.create_table('sp_transactions',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('player_sp_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('transaction_type', sa.Enum('DAILY_RECOVERY', 'PURCHASE', 'ACHIEVEMENT', 'EVENT_REWARD', 'LOG_RESULT', 'LOGIN_BONUS', 'REFUND', 'FREE_ACTION', 'LOG_DISPATCH', 'LOG_ENHANCEMENT', 'MEMORY_INHERITANCE', 'SYSTEM_FUNCTION', 'MOVEMENT', 'EXPLORATION', 'ADJUSTMENT', 'MIGRATION', 'ADMIN_GRANT', 'ADMIN_DEDUCT', name='sptransactiontype'), nullable=False),
    sa.Column('amount', sa.Integer(), nullable=False),
    sa.Column('balance_before', sa.Integer(), nullable=False),
    sa.Column('balance_after', sa.Integer(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('transaction_metadata', sa.JSON(), nullable=True),
    sa.Column('related_entity_type', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('related_entity_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('purchase_package', sa.Enum('SMALL', 'MEDIUM', 'LARGE', 'EXTRA_LARGE', 'MEGA', name='sppurchasepackage'), nullable=True),
    sa.Column('purchase_amount', sa.Integer(), nullable=True),
    sa.Column('payment_method', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('payment_transaction_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['player_sp_id'], ['player_sp.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_sp_transactions_created_at'), 'sp_transactions', ['created_at'], unique=False)
    op.create_index(op.f('ix_sp_transactions_id'), 'sp_transactions', ['id'], unique=False)
    op.create_index(op.f('ix_sp_transactions_payment_transaction_id'), 'sp_transactions', ['payment_transaction_id'], unique=False)
    op.create_index(op.f('ix_sp_transactions_player_sp_id'), 'sp_transactions', ['player_sp_id'], unique=False)
    op.create_index(op.f('ix_sp_transactions_related_entity_id'), 'sp_transactions', ['related_entity_id'], unique=False)
    op.create_index(op.f('ix_sp_transactions_transaction_type'), 'sp_transactions', ['transaction_type'], unique=False)
    op.create_index(op.f('ix_sp_transactions_user_id'), 'sp_transactions', ['user_id'], unique=False)
    op.create_table('story_arcs',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('character_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=False),
    sa.Column('arc_type', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('progress_percentage', sa.Float(), nullable=False),
    sa.Column('current_phase', sa.Integer(), nullable=False),
    sa.Column('total_phases', sa.Integer(), nullable=False),
    sa.Column('key_npcs', sa.JSON(), nullable=False),
    sa.Column('key_locations', sa.JSON(), nullable=False),
    sa.Column('key_items', sa.JSON(), nullable=False),
    sa.Column('central_conflict', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('themes', sa.JSON(), nullable=False),
    sa.Column('plot_points', sa.JSON(), nullable=False),
    sa.Column('arc_metadata', sa.JSON(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('session_count', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['character_id'], ['characters.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_story_arcs_character_id'), 'story_arcs', ['character_id'], unique=False)
    op.create_index(op.f('ix_story_arcs_id'), 'story_arcs', ['id'], unique=False)
    op.create_table('subscription_transactions',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('subscription_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('transaction_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('amount', sa.Integer(), nullable=False),
    sa.Column('currency', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('stripe_payment_intent_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('stripe_invoice_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('error_message', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('extra_data', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['subscription_id'], ['sp_subscriptions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_subscription_transaction_subscription_id', 'subscription_transactions', ['subscription_id'], unique=False)
    op.create_index('idx_subscription_transaction_type', 'subscription_transactions', ['transaction_type'], unique=False)
    op.create_table('game_sessions',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('character_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('current_scene', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('session_data', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('session_status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('session_number', sa.Integer(), nullable=False),
    sa.Column('previous_session_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('story_arc_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('result_summary', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('result_processed_at', sa.DateTime(), nullable=True),
    sa.Column('turn_count', sa.Integer(), nullable=False),
    sa.Column('word_count', sa.Integer(), nullable=False),
    sa.Column('play_duration_minutes', sa.Integer(), nullable=False),
    sa.Column('ending_proposal_count', sa.Integer(), nullable=False),
    sa.Column('last_proposal_at', sa.DateTime(), nullable=True),
    sa.Column('is_first_session', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['character_id'], ['characters.id'], ),
    sa.ForeignKeyConstraint(['previous_session_id'], ['game_sessions.id'], ),
    sa.ForeignKeyConstraint(['story_arc_id'], ['story_arcs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_game_sessions_character_id'), 'game_sessions', ['character_id'], unique=False)
    op.create_index(op.f('ix_game_sessions_id'), 'game_sessions', ['id'], unique=False)
    op.create_table('story_arc_milestones',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('story_arc_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=False),
    sa.Column('phase_number', sa.Integer(), nullable=False),
    sa.Column('achievement_criteria', sa.JSON(), nullable=False),
    sa.Column('is_completed', sa.Boolean(), nullable=False),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('rewards', sa.JSON(), nullable=False),
    sa.Column('triggers_next_phase', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['story_arc_id'], ['story_arcs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_story_arc_milestones_id'), 'story_arc_milestones', ['id'], unique=False)
    op.create_index(op.f('ix_story_arc_milestones_story_arc_id'), 'story_arc_milestones', ['story_arc_id'], unique=False)
    op.create_table('action_logs',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('session_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('character_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('action_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('action_content', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('response_content', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('performance_data', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['character_id'], ['characters.id'], ),
    sa.ForeignKeyConstraint(['session_id'], ['game_sessions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_action_logs_character_id'), 'action_logs', ['character_id'], unique=False)
    op.create_index(op.f('ix_action_logs_session_id'), 'action_logs', ['session_id'], unique=False)
    op.create_table('encounter_choices',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('story_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('session_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('situation_context', sa.Text(), nullable=True),
    sa.Column('available_choices', sa.JSON(), nullable=True),
    sa.Column('player_choice', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('choice_reasoning', sa.Text(), nullable=True),
    sa.Column('immediate_consequence', sa.Text(), nullable=True),
    sa.Column('long_term_impact', sa.JSON(), nullable=True),
    sa.Column('relationship_change', sa.JSON(), nullable=True),
    sa.Column('presented_at', sa.DateTime(), nullable=False),
    sa.Column('decided_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['game_sessions.id'], ),
    sa.ForeignKeyConstraint(['story_id'], ['encounter_stories.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_encounter_choices_id'), 'encounter_choices', ['id'], unique=False)
    op.create_index(op.f('ix_encounter_choices_session_id'), 'encounter_choices', ['session_id'], unique=False)
    op.create_index(op.f('ix_encounter_choices_story_id'), 'encounter_choices', ['story_id'], unique=False)
    op.create_table('game_messages',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('session_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('message_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('sender_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('content', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('message_metadata', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('turn_number', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['session_id'], ['game_sessions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_game_messages_id'), 'game_messages', ['id'], unique=False)
    op.create_index(op.f('ix_game_messages_session_id'), 'game_messages', ['session_id'], unique=False)
    op.create_index(op.f('ix_game_messages_turn_number'), 'game_messages', ['turn_number'], unique=False)
    op.create_table('log_fragments',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('character_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('session_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('action_description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('keywords', sa.JSON(), nullable=True),
    sa.Column('keyword', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('emotional_valence', sa.Enum('POSITIVE', 'NEGATIVE', 'NEUTRAL', 'MIXED', name='emotionalvalence'), nullable=False),
    sa.Column('rarity', sa.Enum('COMMON', 'UNCOMMON', 'RARE', 'EPIC', 'LEGENDARY', 'UNIQUE', 'ARCHITECT', name='logfragmentrarity'), nullable=False),
    sa.Column('backstory', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('discovered_at', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('source_action', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('importance_score', sa.Float(), nullable=False),
    sa.Column('context_data', sa.JSON(), nullable=True),
    sa.Column('memory_type', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('combination_tags', sa.JSON(), nullable=True),
    sa.Column('world_truth', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('acquisition_context', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_consumed', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('acquisition_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['character_id'], ['characters.id'], ),
    sa.ForeignKeyConstraint(['session_id'], ['game_sessions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_log_fragments_character_id'), 'log_fragments', ['character_id'], unique=False)
    op.create_index(op.f('ix_log_fragments_session_id'), 'log_fragments', ['session_id'], unique=False)
    op.create_table('quests',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('character_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('session_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('title', sa.String(length=100), nullable=True),
    sa.Column('description', sa.String(length=2500), nullable=True),
    sa.Column('status', sa.Enum('PROPOSED', 'ACTIVE', 'PROGRESSING', 'NEAR_COMPLETION', 'COMPLETED', 'ABANDONED', 'FAILED', name='queststatus'), nullable=False),
    sa.Column('origin', sa.Enum('GM_PROPOSED', 'PLAYER_DECLARED', 'BEHAVIOR_INFERRED', 'NPC_GIVEN', 'WORLD_EVENT', name='questorigin'), nullable=False),
    sa.Column('progress_percentage', sa.Float(), nullable=False),
    sa.Column('narrative_completeness', sa.Float(), nullable=False),
    sa.Column('emotional_satisfaction', sa.Float(), nullable=False),
    sa.Column('key_events', sa.JSON(), nullable=True),
    sa.Column('progress_indicators', sa.JSON(), nullable=True),
    sa.Column('emotional_arc', sa.JSON(), nullable=True),
    sa.Column('involved_entities', sa.JSON(), nullable=True),
    sa.Column('context_summary', sa.Text(), nullable=True),
    sa.Column('completion_summary', sa.Text(), nullable=True),
    sa.Column('proposed_at', sa.DateTime(), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('last_progress_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['character_id'], ['characters.id'], ),
    sa.ForeignKeyConstraint(['session_id'], ['game_sessions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_quests_character_id'), 'quests', ['character_id'], unique=False)
    op.create_index(op.f('ix_quests_id'), 'quests', ['id'], unique=False)
    op.create_index(op.f('ix_quests_session_id'), 'quests', ['session_id'], unique=False)
    op.create_table('session_results',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('session_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('story_summary', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('key_events', sa.JSON(), nullable=False),
    sa.Column('experience_gained', sa.Integer(), nullable=False),
    sa.Column('skills_improved', sa.JSON(), nullable=False),
    sa.Column('items_acquired', sa.JSON(), nullable=False),
    sa.Column('neo4j_updates', sa.JSON(), nullable=False),
    sa.Column('continuation_context', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('unresolved_plots', sa.JSON(), nullable=False),
    sa.Column('story_arc_progress', sa.JSON(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['session_id'], ['game_sessions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_session_results_id'), 'session_results', ['id'], unique=False)
    op.create_index(op.f('ix_session_results_session_id'), 'session_results', ['session_id'], unique=True)
    op.create_table('completed_logs',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('creator_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('core_fragment_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('skills', sa.JSON(), nullable=True),
    sa.Column('personality_traits', sa.JSON(), nullable=True),
    sa.Column('behavior_patterns', sa.JSON(), nullable=True),
    sa.Column('contamination_level', sa.Float(), nullable=False),
    sa.Column('status', sa.Enum('DRAFT', 'COMPLETED', 'CONTRACTED', 'ACTIVE', 'EXPIRED', 'RECALLED', name='completedlogstatus'), nullable=False),
    sa.Column('compilation_metadata', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['core_fragment_id'], ['log_fragments.id'], ),
    sa.ForeignKeyConstraint(['creator_id'], ['characters.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_completed_logs_creator_id'), 'completed_logs', ['creator_id'], unique=False)
    op.create_table('shared_quests',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('quest_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('story_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('participants', sa.JSON(), nullable=True),
    sa.Column('leader_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('cooperation_level', sa.Float(), nullable=False),
    sa.Column('sync_level', sa.Float(), nullable=False),
    sa.Column('contribution_balance', sa.JSON(), nullable=True),
    sa.Column('shared_objectives', sa.JSON(), nullable=True),
    sa.Column('synchronized_actions', sa.JSON(), nullable=True),
    sa.Column('conflict_points', sa.JSON(), nullable=True),
    sa.Column('reward_distribution', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('last_sync_at', sa.DateTime(), nullable=False),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['quest_id'], ['quests.id'], ),
    sa.ForeignKeyConstraint(['story_id'], ['encounter_stories.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_shared_quests_id'), 'shared_quests', ['id'], unique=False)
    op.create_index(op.f('ix_shared_quests_quest_id'), 'shared_quests', ['quest_id'], unique=False)
    op.create_index(op.f('ix_shared_quests_story_id'), 'shared_quests', ['story_id'], unique=False)
    op.create_table('completed_log_sub_fragments',
    sa.Column('completed_log_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('fragment_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('order', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['completed_log_id'], ['completed_logs.id'], ),
    sa.ForeignKeyConstraint(['fragment_id'], ['log_fragments.id'], ),
    sa.PrimaryKeyConstraint('completed_log_id', 'fragment_id')
    )
    op.create_table('log_dispatches',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('completed_log_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('dispatcher_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('objective_type', sa.Enum('EXPLORE', 'INTERACT', 'COLLECT', 'GUARD', 'FREE', 'TRADE', 'MEMORY_PRESERVE', 'RESEARCH', name='dispatchobjectivetype'), nullable=False),
    sa.Column('objective_detail', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('initial_location', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('dispatch_duration_days', sa.Integer(), nullable=False),
    sa.Column('sp_cost', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('PREPARING', 'DISPATCHED', 'RETURNING', 'COMPLETED', 'RECALLED', name='dispatchstatus'), nullable=False),
    sa.Column('travel_log', sa.JSON(), nullable=True),
    sa.Column('current_location', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('last_location_update', sa.DateTime(), nullable=True),
    sa.Column('collected_items', sa.JSON(), nullable=True),
    sa.Column('discovered_locations', sa.JSON(), nullable=True),
    sa.Column('sp_refund_amount', sa.Integer(), nullable=False),
    sa.Column('achievement_score', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('dispatched_at', sa.DateTime(), nullable=True),
    sa.Column('expected_return_at', sa.DateTime(), nullable=True),
    sa.Column('actual_return_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['completed_log_id'], ['completed_logs.id'], ),
    sa.ForeignKeyConstraint(['dispatcher_id'], ['characters.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_log_dispatches_completed_log_id'), 'log_dispatches', ['completed_log_id'], unique=False)
    op.create_index(op.f('ix_log_dispatches_dispatcher_id'), 'log_dispatches', ['dispatcher_id'], unique=False)
    op.create_table('dispatch_encounters',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('dispatch_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('encountered_character_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('encountered_npc_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('location', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('interaction_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('interaction_summary', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('outcome', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('relationship_change', sa.Float(), nullable=False),
    sa.Column('items_exchanged', sa.JSON(), nullable=True),
    sa.Column('occurred_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['dispatch_id'], ['log_dispatches.id'], ),
    sa.ForeignKeyConstraint(['encountered_character_id'], ['characters.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_dispatch_encounters_dispatch_id'), 'dispatch_encounters', ['dispatch_id'], unique=False)
    op.create_table('dispatch_reports',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('dispatch_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('total_distance_traveled', sa.Integer(), nullable=False),
    sa.Column('total_encounters', sa.Integer(), nullable=False),
    sa.Column('total_items_collected', sa.Integer(), nullable=False),
    sa.Column('total_locations_discovered', sa.Integer(), nullable=False),
    sa.Column('objective_completion_rate', sa.Float(), nullable=False),
    sa.Column('memorable_moments', sa.JSON(), nullable=True),
    sa.Column('personality_changes', sa.JSON(), nullable=True),
    sa.Column('new_skills_learned', sa.JSON(), nullable=True),
    sa.Column('narrative_summary', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('epilogue', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('economic_details', sa.JSON(), nullable=True),
    sa.Column('special_achievements', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['dispatch_id'], ['log_dispatches.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_dispatch_reports_dispatch_id'), 'dispatch_reports', ['dispatch_id'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_dispatch_reports_dispatch_id'), table_name='dispatch_reports')
    op.drop_table('dispatch_reports')
    op.drop_index(op.f('ix_dispatch_encounters_dispatch_id'), table_name='dispatch_encounters')
    op.drop_table('dispatch_encounters')
    op.drop_index(op.f('ix_log_dispatches_dispatcher_id'), table_name='log_dispatches')
    op.drop_index(op.f('ix_log_dispatches_completed_log_id'), table_name='log_dispatches')
    op.drop_table('log_dispatches')
    op.drop_table('completed_log_sub_fragments')
    op.drop_index(op.f('ix_shared_quests_story_id'), table_name='shared_quests')
    op.drop_index(op.f('ix_shared_quests_quest_id'), table_name='shared_quests')
    op.drop_index(op.f('ix_shared_quests_id'), table_name='shared_quests')
    op.drop_table('shared_quests')
    op.drop_index(op.f('ix_completed_logs_creator_id'), table_name='completed_logs')
    op.drop_table('completed_logs')
    op.drop_index(op.f('ix_session_results_session_id'), table_name='session_results')
    op.drop_index(op.f('ix_session_results_id'), table_name='session_results')
    op.drop_table('session_results')
    op.drop_index(op.f('ix_quests_session_id'), table_name='quests')
    op.drop_index(op.f('ix_quests_id'), table_name='quests')
    op.drop_index(op.f('ix_quests_character_id'), table_name='quests')
    op.drop_table('quests')
    op.drop_index(op.f('ix_log_fragments_session_id'), table_name='log_fragments')
    op.drop_index(op.f('ix_log_fragments_character_id'), table_name='log_fragments')
    op.drop_table('log_fragments')
    op.drop_index(op.f('ix_game_messages_turn_number'), table_name='game_messages')
    op.drop_index(op.f('ix_game_messages_session_id'), table_name='game_messages')
    op.drop_index(op.f('ix_game_messages_id'), table_name='game_messages')
    op.drop_table('game_messages')
    op.drop_index(op.f('ix_encounter_choices_story_id'), table_name='encounter_choices')
    op.drop_index(op.f('ix_encounter_choices_session_id'), table_name='encounter_choices')
    op.drop_index(op.f('ix_encounter_choices_id'), table_name='encounter_choices')
    op.drop_table('encounter_choices')
    op.drop_index(op.f('ix_action_logs_session_id'), table_name='action_logs')
    op.drop_index(op.f('ix_action_logs_character_id'), table_name='action_logs')
    op.drop_table('action_logs')
    op.drop_index(op.f('ix_story_arc_milestones_story_arc_id'), table_name='story_arc_milestones')
    op.drop_index(op.f('ix_story_arc_milestones_id'), table_name='story_arc_milestones')
    op.drop_table('story_arc_milestones')
    op.drop_index(op.f('ix_game_sessions_id'), table_name='game_sessions')
    op.drop_index(op.f('ix_game_sessions_character_id'), table_name='game_sessions')
    op.drop_table('game_sessions')
    op.drop_index('idx_subscription_transaction_type', table_name='subscription_transactions')
    op.drop_index('idx_subscription_transaction_subscription_id', table_name='subscription_transactions')
    op.drop_table('subscription_transactions')
    op.drop_index(op.f('ix_story_arcs_id'), table_name='story_arcs')
    op.drop_index(op.f('ix_story_arcs_character_id'), table_name='story_arcs')
    op.drop_table('story_arcs')
    op.drop_index(op.f('ix_sp_transactions_user_id'), table_name='sp_transactions')
    op.drop_index(op.f('ix_sp_transactions_transaction_type'), table_name='sp_transactions')
    op.drop_index(op.f('ix_sp_transactions_related_entity_id'), table_name='sp_transactions')
    op.drop_index(op.f('ix_sp_transactions_player_sp_id'), table_name='sp_transactions')
    op.drop_index(op.f('ix_sp_transactions_payment_transaction_id'), table_name='sp_transactions')
    op.drop_index(op.f('ix_sp_transactions_id'), table_name='sp_transactions')
    op.drop_index(op.f('ix_sp_transactions_created_at'), table_name='sp_transactions')
    op.drop_table('sp_transactions')
    op.drop_index(op.f('ix_exploration_logs_id'), table_name='exploration_logs')
    op.drop_index(op.f('ix_exploration_logs_character_id'), table_name='exploration_logs')
    op.drop_table('exploration_logs')
    op.drop_index(op.f('ix_encounter_stories_id'), table_name='encounter_stories')
    op.drop_index(op.f('ix_encounter_stories_encounter_entity_id'), table_name='encounter_stories')
    op.drop_index(op.f('ix_encounter_stories_character_id'), table_name='encounter_stories')
    op.drop_table('encounter_stories')
    op.drop_index(op.f('ix_character_titles_character_id'), table_name='character_titles')
    op.drop_table('character_titles')
    op.drop_index(op.f('ix_character_stats_id'), table_name='character_stats')
    op.drop_index(op.f('ix_character_stats_character_id'), table_name='character_stats')
    op.drop_table('character_stats')
    op.drop_index(op.f('ix_character_skills_skill_id'), table_name='character_skills')
    op.drop_index(op.f('ix_character_skills_id'), table_name='character_skills')
    op.drop_index(op.f('ix_character_skills_character_id'), table_name='character_skills')
    op.drop_table('character_skills')
    op.drop_index(op.f('ix_character_location_history_id'), table_name='character_location_history')
    op.drop_index(op.f('ix_character_location_history_character_id'), table_name='character_location_history')
    op.drop_table('character_location_history')
    op.drop_index(op.f('ix_character_items_item_id'), table_name='character_items')
    op.drop_index(op.f('ix_character_items_character_id'), table_name='character_items')
    op.drop_table('character_items')
    op.drop_index(op.f('ix_character_exploration_progress_location_id'), table_name='character_exploration_progress')
    op.drop_index(op.f('ix_character_exploration_progress_id'), table_name='character_exploration_progress')
    op.drop_index(op.f('ix_character_exploration_progress_character_id'), table_name='character_exploration_progress')
    op.drop_table('character_exploration_progress')
    op.drop_index(op.f('ix_user_roles_user_id'), table_name='user_roles')
    op.drop_index(op.f('ix_user_roles_id'), table_name='user_roles')
    op.drop_table('user_roles')
    op.drop_index('idx_sp_subscription_user_id', table_name='sp_subscriptions')
    op.drop_index('idx_sp_subscription_stripe_id', table_name='sp_subscriptions')
    op.drop_index('idx_sp_subscription_status', table_name='sp_subscriptions')
    op.drop_table('sp_subscriptions')
    op.drop_index(op.f('ix_sp_purchases_user_id'), table_name='sp_purchases')
    op.drop_index(op.f('ix_sp_purchases_plan_id'), table_name='sp_purchases')
    op.drop_index(op.f('ix_sp_purchases_id'), table_name='sp_purchases')
    op.drop_table('sp_purchases')
    op.drop_index(op.f('ix_player_sp_user_id'), table_name='player_sp')
    op.drop_index(op.f('ix_player_sp_id'), table_name='player_sp')
    op.drop_table('player_sp')
    op.drop_index(op.f('ix_location_connections_id'), table_name='location_connections')
    op.drop_table('location_connections')
    op.drop_index(op.f('ix_exploration_areas_name'), table_name='exploration_areas')
    op.drop_index(op.f('ix_exploration_areas_id'), table_name='exploration_areas')
    op.drop_table('exploration_areas')
    op.drop_index(op.f('ix_characters_user_id'), table_name='characters')
    op.drop_index(op.f('ix_characters_name'), table_name='characters')
    op.drop_index(op.f('ix_characters_id'), table_name='characters')
    op.drop_table('characters')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_skills_name'), table_name='skills')
    op.drop_index(op.f('ix_skills_id'), table_name='skills')
    op.drop_table('skills')
    op.drop_index(op.f('ix_locations_name'), table_name='locations')
    op.drop_index(op.f('ix_locations_id'), table_name='locations')
    op.drop_table('locations')
    op.drop_index(op.f('ix_items_name'), table_name='items')
    op.drop_table('items')
    # ### end Alembic commands ###
