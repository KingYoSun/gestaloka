"""Initial migration with all models

Revision ID: c8ab2c1be277
Revises: 
Create Date: 2025-06-19 14:58:05.818561

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision = 'c8ab2c1be277'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('hashed_password', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('characters',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True),
    sa.Column('appearance', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True),
    sa.Column('personality', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True),
    sa.Column('location', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_characters_id'), 'characters', ['id'], unique=False)
    op.create_index(op.f('ix_characters_name'), 'characters', ['name'], unique=False)
    op.create_index(op.f('ix_characters_user_id'), 'characters', ['user_id'], unique=False)
    op.create_table('character_stats',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('character_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('level', sa.Integer(), nullable=False),
    sa.Column('experience', sa.Integer(), nullable=False),
    sa.Column('health', sa.Integer(), nullable=False),
    sa.Column('max_health', sa.Integer(), nullable=False),
    sa.Column('energy', sa.Integer(), nullable=False),
    sa.Column('max_energy', sa.Integer(), nullable=False),
    sa.Column('attack', sa.Integer(), nullable=False),
    sa.Column('defense', sa.Integer(), nullable=False),
    sa.Column('agility', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['character_id'], ['characters.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_character_stats_character_id'), 'character_stats', ['character_id'], unique=True)
    op.create_index(op.f('ix_character_stats_id'), 'character_stats', ['id'], unique=False)
    op.create_table('game_sessions',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('character_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('current_scene', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('session_data', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['character_id'], ['characters.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_game_sessions_character_id'), 'game_sessions', ['character_id'], unique=False)
    op.create_index(op.f('ix_game_sessions_id'), 'game_sessions', ['id'], unique=False)
    op.create_table('skills',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('character_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('level', sa.Integer(), nullable=False),
    sa.Column('experience', sa.Integer(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['character_id'], ['characters.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_skills_character_id'), 'skills', ['character_id'], unique=False)
    op.create_index(op.f('ix_skills_id'), 'skills', ['id'], unique=False)
    op.create_index(op.f('ix_skills_name'), 'skills', ['name'], unique=False)
    op.create_table('log_fragments',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('character_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('session_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('action_description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('keywords', sa.JSON(), nullable=True),
    sa.Column('emotional_valence', sa.Enum('POSITIVE', 'NEGATIVE', 'NEUTRAL', name='emotionalvalence'), nullable=False),
    sa.Column('rarity', sa.Enum('COMMON', 'UNCOMMON', 'RARE', 'EPIC', 'LEGENDARY', name='logfragmentrarity'), nullable=False),
    sa.Column('importance_score', sa.Float(), nullable=False),
    sa.Column('context_data', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['character_id'], ['characters.id'], ),
    sa.ForeignKeyConstraint(['session_id'], ['game_sessions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_log_fragments_character_id'), 'log_fragments', ['character_id'], unique=False)
    op.create_index(op.f('ix_log_fragments_session_id'), 'log_fragments', ['session_id'], unique=False)
    op.create_table('completed_logs',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('creator_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('core_fragment_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('skills', sa.JSON(), nullable=True),
    sa.Column('personality_traits', sa.JSON(), nullable=True),
    sa.Column('behavior_patterns', sa.JSON(), nullable=True),
    sa.Column('contamination_level', sa.Float(), nullable=False),
    sa.Column('status', sa.Enum('DRAFT', 'COMPLETED', 'CONTRACTED', 'ACTIVE', 'EXPIRED', 'RECALLED', name='completedlogstatus'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['core_fragment_id'], ['log_fragments.id'], ),
    sa.ForeignKeyConstraint(['creator_id'], ['characters.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_completed_logs_creator_id'), 'completed_logs', ['creator_id'], unique=False)
    op.create_table('completed_log_sub_fragments',
    sa.Column('completed_log_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('fragment_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('order', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['completed_log_id'], ['completed_logs.id'], ),
    sa.ForeignKeyConstraint(['fragment_id'], ['log_fragments.id'], ),
    sa.PrimaryKeyConstraint('completed_log_id', 'fragment_id')
    )
    op.create_table('log_contracts',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('completed_log_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('creator_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('host_character_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('activity_duration_hours', sa.Integer(), nullable=False),
    sa.Column('behavior_guidelines', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('reward_conditions', sa.JSON(), nullable=True),
    sa.Column('rewards', sa.JSON(), nullable=True),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('price', sa.Integer(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'ACCEPTED', 'ACTIVE', 'DEPLOYED', 'COMPLETED', 'EXPIRED', 'CANCELLED', name='logcontractstatus'), nullable=False),
    sa.Column('activity_logs', sa.JSON(), nullable=True),
    sa.Column('performance_score', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('activated_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['completed_log_id'], ['completed_logs.id'], ),
    sa.ForeignKeyConstraint(['creator_id'], ['characters.id'], ),
    sa.ForeignKeyConstraint(['host_character_id'], ['characters.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_log_contracts_completed_log_id'), 'log_contracts', ['completed_log_id'], unique=False)
    op.create_index(op.f('ix_log_contracts_creator_id'), 'log_contracts', ['creator_id'], unique=False)
    op.create_index(op.f('ix_log_contracts_host_character_id'), 'log_contracts', ['host_character_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_log_contracts_host_character_id'), table_name='log_contracts')
    op.drop_index(op.f('ix_log_contracts_creator_id'), table_name='log_contracts')
    op.drop_index(op.f('ix_log_contracts_completed_log_id'), table_name='log_contracts')
    op.drop_table('log_contracts')
    op.drop_table('completed_log_sub_fragments')
    op.drop_index(op.f('ix_completed_logs_creator_id'), table_name='completed_logs')
    op.drop_table('completed_logs')
    op.drop_index(op.f('ix_log_fragments_session_id'), table_name='log_fragments')
    op.drop_index(op.f('ix_log_fragments_character_id'), table_name='log_fragments')
    op.drop_table('log_fragments')
    op.drop_index(op.f('ix_skills_name'), table_name='skills')
    op.drop_index(op.f('ix_skills_id'), table_name='skills')
    op.drop_index(op.f('ix_skills_character_id'), table_name='skills')
    op.drop_table('skills')
    op.drop_index(op.f('ix_game_sessions_id'), table_name='game_sessions')
    op.drop_index(op.f('ix_game_sessions_character_id'), table_name='game_sessions')
    op.drop_table('game_sessions')
    op.drop_index(op.f('ix_character_stats_id'), table_name='character_stats')
    op.drop_index(op.f('ix_character_stats_character_id'), table_name='character_stats')
    op.drop_table('character_stats')
    op.drop_index(op.f('ix_characters_user_id'), table_name='characters')
    op.drop_index(op.f('ix_characters_name'), table_name='characters')
    op.drop_index(op.f('ix_characters_id'), table_name='characters')
    op.drop_table('characters')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###