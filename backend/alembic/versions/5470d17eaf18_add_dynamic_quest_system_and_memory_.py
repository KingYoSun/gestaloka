"""Add dynamic quest system and memory inheritance fields

Revision ID: 5470d17eaf18
Revises: 2ba9f043f2c5
Create Date: 2025-07-02 16:00:48.041771

"""

import sqlalchemy as sa
import sqlmodel

from alembic import op

# revision identifiers, used by Alembic.
revision = "5470d17eaf18"
down_revision = "2ba9f043f2c5"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "quests",
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("character_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("session_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("title", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column(
            "status",
            sa.Enum(
                "PROPOSED",
                "ACTIVE",
                "PROGRESSING",
                "NEAR_COMPLETION",
                "COMPLETED",
                "ABANDONED",
                "FAILED",
                name="queststatus",
            ),
            nullable=False,
        ),
        sa.Column(
            "origin",
            sa.Enum(
                "GM_PROPOSED", "PLAYER_DECLARED", "BEHAVIOR_INFERRED", "NPC_GIVEN", "WORLD_EVENT", name="questorigin"
            ),
            nullable=False,
        ),
        sa.Column("progress_percentage", sa.Float(), nullable=False),
        sa.Column("narrative_completeness", sa.Float(), nullable=False),
        sa.Column("emotional_satisfaction", sa.Float(), nullable=False),
        sa.Column("key_events", sa.JSON(), nullable=True),
        sa.Column("progress_indicators", sa.JSON(), nullable=True),
        sa.Column("emotional_arc", sa.JSON(), nullable=True),
        sa.Column("involved_entities", sa.JSON(), nullable=True),
        sa.Column("context_summary", sa.Text(), nullable=True),
        sa.Column("completion_summary", sa.Text(), nullable=True),
        sa.Column("proposed_at", sa.DateTime(), nullable=False),
        sa.Column("started_at", sa.DateTime(), nullable=True),
        sa.Column("completed_at", sa.DateTime(), nullable=True),
        sa.Column("last_progress_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["character_id"],
            ["characters.id"],
        ),
        sa.ForeignKeyConstraint(
            ["session_id"],
            ["game_sessions.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_quests_character_id"), "quests", ["character_id"], unique=False)
    op.create_index(op.f("ix_quests_id"), "quests", ["id"], unique=False)
    op.create_index(op.f("ix_quests_session_id"), "quests", ["session_id"], unique=False)
    op.add_column("log_fragments", sa.Column("memory_type", sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column("log_fragments", sa.Column("combination_tags", sa.JSON(), nullable=True))
    op.add_column("log_fragments", sa.Column("world_truth", sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column("log_fragments", sa.Column("acquisition_context", sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column("log_fragments", sa.Column("is_consumed", sa.Boolean(), nullable=False))
    op.add_column("log_fragments", sa.Column("acquisition_date", sa.DateTime(), nullable=True))
    op.alter_column(
        "sp_subscriptions",
        "subscription_type",
        existing_type=sa.Enum("BASIC", "PREMIUM", name="spsubscriptiontype", create_type=False),
        nullable=True,
    )
    op.alter_column(
        "sp_subscriptions",
        "status",
        existing_type=sa.Enum(
            "ACTIVE", "CANCELLED", "EXPIRED", "PENDING", "FAILED", name="subscriptionstatus", create_type=False
        ),
        nullable=True,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "sp_subscriptions",
        "status",
        existing_type=sa.Enum(
            "ACTIVE", "CANCELLED", "EXPIRED", "PENDING", "FAILED", name="subscriptionstatus", create_type=False
        ),
        nullable=False,
    )
    op.alter_column(
        "sp_subscriptions",
        "subscription_type",
        existing_type=sa.Enum("BASIC", "PREMIUM", name="spsubscriptiontype", create_type=False),
        nullable=False,
    )
    op.drop_column("log_fragments", "acquisition_date")
    op.drop_column("log_fragments", "is_consumed")
    op.drop_column("log_fragments", "acquisition_context")
    op.drop_column("log_fragments", "world_truth")
    op.drop_column("log_fragments", "combination_tags")
    op.drop_column("log_fragments", "memory_type")
    op.drop_index(op.f("ix_quests_session_id"), table_name="quests")
    op.drop_index(op.f("ix_quests_id"), table_name="quests")
    op.drop_index(op.f("ix_quests_character_id"), table_name="quests")
    op.drop_table("quests")
    # ### end Alembic commands ###
