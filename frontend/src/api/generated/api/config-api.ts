// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * GESTALOKA API
 * マルチプレイ・テキストMMO - ゲスタロカ API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { GameConfig } from '../models';
/**
 * ConfigApi - axios parameter creator
 * @export
 */
export const ConfigApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * キャラクター作成制限の設定を取得  主にキャラクター作成画面で使用される設定値を返します。
         * @summary Get Character Limits
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCharacterLimitsApiV1ConfigGameCharacterLimitsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/config/game/character-limits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ゲーム設定を取得  フロントエンドで使用する各種ゲーム設定値を返します。 これにより、設定値の重複を避け、バックエンドを唯一の真実の源とします。
         * @summary Get Game Config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGameConfigApiV1ConfigGameGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/config/game`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * バリデーションルールを取得  フロントエンドでのバリデーション実装に使用される 各種フィールドの制限値を返します。
         * @summary Get Validation Rules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValidationRulesApiV1ConfigGameValidationRulesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/config/game/validation-rules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConfigApi - functional programming interface
 * @export
 */
export const ConfigApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConfigApiAxiosParamCreator(configuration)
    return {
        /**
         * キャラクター作成制限の設定を取得  主にキャラクター作成画面で使用される設定値を返します。
         * @summary Get Character Limits
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCharacterLimitsApiV1ConfigGameCharacterLimitsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCharacterLimitsApiV1ConfigGameCharacterLimitsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigApi.getCharacterLimitsApiV1ConfigGameCharacterLimitsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ゲーム設定を取得  フロントエンドで使用する各種ゲーム設定値を返します。 これにより、設定値の重複を避け、バックエンドを唯一の真実の源とします。
         * @summary Get Game Config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGameConfigApiV1ConfigGameGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameConfig>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGameConfigApiV1ConfigGameGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigApi.getGameConfigApiV1ConfigGameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * バリデーションルールを取得  フロントエンドでのバリデーション実装に使用される 各種フィールドの制限値を返します。
         * @summary Get Validation Rules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getValidationRulesApiV1ConfigGameValidationRulesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getValidationRulesApiV1ConfigGameValidationRulesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigApi.getValidationRulesApiV1ConfigGameValidationRulesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ConfigApi - factory interface
 * @export
 */
export const ConfigApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConfigApiFp(configuration)
    return {
        /**
         * キャラクター作成制限の設定を取得  主にキャラクター作成画面で使用される設定値を返します。
         * @summary Get Character Limits
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCharacterLimitsApiV1ConfigGameCharacterLimitsGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getCharacterLimitsApiV1ConfigGameCharacterLimitsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * ゲーム設定を取得  フロントエンドで使用する各種ゲーム設定値を返します。 これにより、設定値の重複を避け、バックエンドを唯一の真実の源とします。
         * @summary Get Game Config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGameConfigApiV1ConfigGameGet(options?: RawAxiosRequestConfig): AxiosPromise<GameConfig> {
            return localVarFp.getGameConfigApiV1ConfigGameGet(options).then((request) => request(axios, basePath));
        },
        /**
         * バリデーションルールを取得  フロントエンドでのバリデーション実装に使用される 各種フィールドの制限値を返します。
         * @summary Get Validation Rules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValidationRulesApiV1ConfigGameValidationRulesGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getValidationRulesApiV1ConfigGameValidationRulesGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConfigApi - interface
 * @export
 * @interface ConfigApi
 */
export interface ConfigApiInterface {
    /**
     * キャラクター作成制限の設定を取得  主にキャラクター作成画面で使用される設定値を返します。
     * @summary Get Character Limits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApiInterface
     */
    getCharacterLimitsApiV1ConfigGameCharacterLimitsGet(options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * ゲーム設定を取得  フロントエンドで使用する各種ゲーム設定値を返します。 これにより、設定値の重複を避け、バックエンドを唯一の真実の源とします。
     * @summary Get Game Config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApiInterface
     */
    getGameConfigApiV1ConfigGameGet(options?: RawAxiosRequestConfig): AxiosPromise<GameConfig>;

    /**
     * バリデーションルールを取得  フロントエンドでのバリデーション実装に使用される 各種フィールドの制限値を返します。
     * @summary Get Validation Rules
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApiInterface
     */
    getValidationRulesApiV1ConfigGameValidationRulesGet(options?: RawAxiosRequestConfig): AxiosPromise<any>;

}

/**
 * ConfigApi - object-oriented interface
 * @export
 * @class ConfigApi
 * @extends {BaseAPI}
 */
export class ConfigApi extends BaseAPI implements ConfigApiInterface {
    /**
     * キャラクター作成制限の設定を取得  主にキャラクター作成画面で使用される設定値を返します。
     * @summary Get Character Limits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApi
     */
    public getCharacterLimitsApiV1ConfigGameCharacterLimitsGet(options?: RawAxiosRequestConfig) {
        return ConfigApiFp(this.configuration).getCharacterLimitsApiV1ConfigGameCharacterLimitsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ゲーム設定を取得  フロントエンドで使用する各種ゲーム設定値を返します。 これにより、設定値の重複を避け、バックエンドを唯一の真実の源とします。
     * @summary Get Game Config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApi
     */
    public getGameConfigApiV1ConfigGameGet(options?: RawAxiosRequestConfig) {
        return ConfigApiFp(this.configuration).getGameConfigApiV1ConfigGameGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * バリデーションルールを取得  フロントエンドでのバリデーション実装に使用される 各種フィールドの制限値を返します。
     * @summary Get Validation Rules
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApi
     */
    public getValidationRulesApiV1ConfigGameValidationRulesGet(options?: RawAxiosRequestConfig) {
        return ConfigApiFp(this.configuration).getValidationRulesApiV1ConfigGameValidationRulesGet(options).then((request) => request(this.axios, this.basePath));
    }
}

