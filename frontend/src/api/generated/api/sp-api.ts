/* tslint:disable */
/* eslint-disable */
/**
 * GESTALOKA API
 * マルチプレイ・テキストMMO - ゲスタロカ API
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from '../base'
// @ts-ignore
import type { HTTPValidationError } from '../models'
// @ts-ignore
import type { PlayerSPRead } from '../models'
// @ts-ignore
import type { PlayerSPSummary } from '../models'
// @ts-ignore
import type { PurchaseRequest } from '../models'
// @ts-ignore
import type { PurchaseResponse } from '../models'
// @ts-ignore
import type { PurchaseStatus } from '../models'
// @ts-ignore
import type { SPConsumeRequest } from '../models'
// @ts-ignore
import type { SPConsumeResponse } from '../models'
// @ts-ignore
import type { SPDailyRecoveryResponse } from '../models'
// @ts-ignore
import type { SPPlanResponse } from '../models'
// @ts-ignore
import type { SPPurchaseDetail } from '../models'
// @ts-ignore
import type { SPPurchaseList } from '../models'
// @ts-ignore
import type { SPPurchaseStats } from '../models'
// @ts-ignore
import type { SPTransactionRead } from '../models'
// @ts-ignore
import type { SPTransactionType } from '../models'
// @ts-ignore
import type { StripeCheckoutRequest } from '../models'
// @ts-ignore
import type { StripeCheckoutResponse } from '../models'
/**
 * SpApi - axios parameter creator
 * @export
 */
export const SpApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 購入をキャンセル  - PENDING または PROCESSING 状態の購入のみキャンセル可能
     * @summary Cancel Purchase
     * @param {string} purchaseId
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelPurchaseApiV1SpPurchasesPurchaseIdCancelPost: async (
      purchaseId: string,
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'purchaseId' is not null or undefined
      assertParamExists(
        'cancelPurchaseApiV1SpPurchasesPurchaseIdCancelPost',
        'purchaseId',
        purchaseId
      )
      const localVarPath = `/api/v1/sp/purchases/{purchase_id}/cancel`.replace(
        `{${'purchase_id'}}`,
        encodeURIComponent(String(purchaseId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * SPを消費  Args:     request: SP消費リクエスト  Returns:     SPConsumeResponse: 消費結果  Raises:     HTTPException: SP不足または処理エラー
     * @summary Consume Sp
     * @param {SPConsumeRequest} sPConsumeRequest
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    consumeSpApiV1SpConsumePost: async (
      sPConsumeRequest: SPConsumeRequest,
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'sPConsumeRequest' is not null or undefined
      assertParamExists(
        'consumeSpApiV1SpConsumePost',
        'sPConsumeRequest',
        sPConsumeRequest
      )
      const localVarPath = `/api/v1/sp/consume`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        sPConsumeRequest,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * SP購入申請を作成  - テストモードの場合はtest_reasonが必須です - 自動承認が有効な場合は即座にSPが付与されます
     * @summary Create Purchase
     * @param {PurchaseRequest} purchaseRequest
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPurchaseApiV1SpPurchasePost: async (
      purchaseRequest: PurchaseRequest,
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'purchaseRequest' is not null or undefined
      assertParamExists(
        'createPurchaseApiV1SpPurchasePost',
        'purchaseRequest',
        purchaseRequest
      )
      const localVarPath = `/api/v1/sp/purchase`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        purchaseRequest,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Stripe チェックアウトセッションを作成  - 本番モードでのみ利用可能 - 成功時にはStripeのチェックアウトページへリダイレクトするURLが返されます
     * @summary Create Stripe Checkout
     * @param {StripeCheckoutRequest} stripeCheckoutRequest
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createStripeCheckoutApiV1SpStripeCheckoutPost: async (
      stripeCheckoutRequest: StripeCheckoutRequest,
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'stripeCheckoutRequest' is not null or undefined
      assertParamExists(
        'createStripeCheckoutApiV1SpStripeCheckoutPost',
        'stripeCheckoutRequest',
        stripeCheckoutRequest
      )
      const localVarPath = `/api/v1/sp/stripe/checkout`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        stripeCheckoutRequest,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 購入詳細を取得  - 自分の購入のみ取得可能です
     * @summary Get Purchase Detail
     * @param {string} purchaseId
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPurchaseDetailApiV1SpPurchasesPurchaseIdGet: async (
      purchaseId: string,
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'purchaseId' is not null or undefined
      assertParamExists(
        'getPurchaseDetailApiV1SpPurchasesPurchaseIdGet',
        'purchaseId',
        purchaseId
      )
      const localVarPath = `/api/v1/sp/purchases/{purchase_id}`.replace(
        `{${'purchase_id'}}`,
        encodeURIComponent(String(purchaseId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * ユーザーの購入統計を取得  - 完了した購入のみが集計対象です
     * @summary Get Purchase Stats
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPurchaseStatsApiV1SpPurchaseStatsGet: async (
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/sp/purchase-stats`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 現在のSP残高と詳細情報を取得  Returns:     PlayerSPRead: SP残高の詳細情報
     * @summary Get Sp Balance
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSpBalanceApiV1SpBalanceGet: async (
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/sp/balance`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * SP残高の概要を取得（軽量版）  Returns:     PlayerSPSummary: SP残高の概要
     * @summary Get Sp Balance Summary
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSpBalanceSummaryApiV1SpBalanceSummaryGet: async (
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/sp/balance/summary`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * SP購入プラン一覧を取得  - 現在利用可能な全てのプランを返します - payment_modeで現在の支払いモードを確認できます
     * @summary Get Sp Plans
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSpPlansApiV1SpPlansGet: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/sp/plans`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 特定の取引詳細を取得  Args:     transaction_id: 取引ID  Returns:     SPTransactionRead: 取引詳細  Raises:     HTTPException: 取引が見つからない場合
     * @summary Get Transaction Detail
     * @param {string} transactionId
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionDetailApiV1SpTransactionsTransactionIdGet: async (
      transactionId: string,
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'transactionId' is not null or undefined
      assertParamExists(
        'getTransactionDetailApiV1SpTransactionsTransactionIdGet',
        'transactionId',
        transactionId
      )
      const localVarPath = `/api/v1/sp/transactions/{transaction_id}`.replace(
        `{${'transaction_id'}}`,
        encodeURIComponent(String(transactionId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * SP取引履歴を取得  Args:     transaction_type: 取引種別でフィルター     start_date: 開始日時     end_date: 終了日時     related_entity_type: 関連エンティティ種別     related_entity_id: 関連エンティティID     limit: 取得件数上限     offset: オフセット  Returns:     list[SPTransactionRead]: 取引履歴のリスト
     * @summary Get Transaction History
     * @param {SPTransactionType | null} [transactionType]
     * @param {string | null} [startDate]
     * @param {string | null} [endDate]
     * @param {string | null} [relatedEntityType]
     * @param {string | null} [relatedEntityId]
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionHistoryApiV1SpTransactionsGet: async (
      transactionType?: SPTransactionType | null,
      startDate?: string | null,
      endDate?: string | null,
      relatedEntityType?: string | null,
      relatedEntityId?: string | null,
      limit?: number,
      offset?: number,
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/sp/transactions`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      if (transactionType !== undefined) {
        localVarQueryParameter['transaction_type'] = transactionType
      }

      if (startDate !== undefined) {
        localVarQueryParameter['start_date'] =
          (startDate as any) instanceof Date
            ? (startDate as any).toISOString()
            : startDate
      }

      if (endDate !== undefined) {
        localVarQueryParameter['end_date'] =
          (endDate as any) instanceof Date
            ? (endDate as any).toISOString()
            : endDate
      }

      if (relatedEntityType !== undefined) {
        localVarQueryParameter['related_entity_type'] = relatedEntityType
      }

      if (relatedEntityId !== undefined) {
        localVarQueryParameter['related_entity_id'] = relatedEntityId
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * ユーザーの購入履歴を取得  - statusでフィルタリング可能 - 新しい順に返されます
     * @summary Get User Purchases
     * @param {PurchaseStatus | null} [status] フィルタするステータス
     * @param {number} [limit] 取得件数
     * @param {number} [offset] オフセット
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserPurchasesApiV1SpPurchasesGet: async (
      status?: PurchaseStatus | null,
      limit?: number,
      offset?: number,
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/sp/purchases`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      if (status !== undefined) {
        localVarQueryParameter['status'] = status
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 日次SP回復処理  Returns:     SPDailyRecoveryResponse: 回復結果  Note:     - 1日1回のみ実行可能     - 連続ログインボーナスも同時に処理     - サブスクリプションボーナスも適用
     * @summary Process Daily Recovery
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processDailyRecoveryApiV1SpDailyRecoveryPost: async (
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/sp/daily-recovery`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * SpApi - functional programming interface
 * @export
 */
export const SpApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SpApiAxiosParamCreator(configuration)
  return {
    /**
     * 購入をキャンセル  - PENDING または PROCESSING 状態の購入のみキャンセル可能
     * @summary Cancel Purchase
     * @param {string} purchaseId
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async cancelPurchaseApiV1SpPurchasesPurchaseIdCancelPost(
      purchaseId: string,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SPPurchaseDetail>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.cancelPurchaseApiV1SpPurchasesPurchaseIdCancelPost(
          purchaseId,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'SpApi.cancelPurchaseApiV1SpPurchasesPurchaseIdCancelPost'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * SPを消費  Args:     request: SP消費リクエスト  Returns:     SPConsumeResponse: 消費結果  Raises:     HTTPException: SP不足または処理エラー
     * @summary Consume Sp
     * @param {SPConsumeRequest} sPConsumeRequest
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async consumeSpApiV1SpConsumePost(
      sPConsumeRequest: SPConsumeRequest,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SPConsumeResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.consumeSpApiV1SpConsumePost(
          sPConsumeRequest,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['SpApi.consumeSpApiV1SpConsumePost']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * SP購入申請を作成  - テストモードの場合はtest_reasonが必須です - 自動承認が有効な場合は即座にSPが付与されます
     * @summary Create Purchase
     * @param {PurchaseRequest} purchaseRequest
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPurchaseApiV1SpPurchasePost(
      purchaseRequest: PurchaseRequest,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PurchaseResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createPurchaseApiV1SpPurchasePost(
          purchaseRequest,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['SpApi.createPurchaseApiV1SpPurchasePost']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Stripe チェックアウトセッションを作成  - 本番モードでのみ利用可能 - 成功時にはStripeのチェックアウトページへリダイレクトするURLが返されます
     * @summary Create Stripe Checkout
     * @param {StripeCheckoutRequest} stripeCheckoutRequest
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createStripeCheckoutApiV1SpStripeCheckoutPost(
      stripeCheckoutRequest: StripeCheckoutRequest,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<StripeCheckoutResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createStripeCheckoutApiV1SpStripeCheckoutPost(
          stripeCheckoutRequest,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'SpApi.createStripeCheckoutApiV1SpStripeCheckoutPost'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * 購入詳細を取得  - 自分の購入のみ取得可能です
     * @summary Get Purchase Detail
     * @param {string} purchaseId
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPurchaseDetailApiV1SpPurchasesPurchaseIdGet(
      purchaseId: string,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SPPurchaseDetail>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getPurchaseDetailApiV1SpPurchasesPurchaseIdGet(
          purchaseId,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'SpApi.getPurchaseDetailApiV1SpPurchasesPurchaseIdGet'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * ユーザーの購入統計を取得  - 完了した購入のみが集計対象です
     * @summary Get Purchase Stats
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPurchaseStatsApiV1SpPurchaseStatsGet(
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SPPurchaseStats>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getPurchaseStatsApiV1SpPurchaseStatsGet(
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['SpApi.getPurchaseStatsApiV1SpPurchaseStatsGet']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * 現在のSP残高と詳細情報を取得  Returns:     PlayerSPRead: SP残高の詳細情報
     * @summary Get Sp Balance
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSpBalanceApiV1SpBalanceGet(
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerSPRead>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getSpBalanceApiV1SpBalanceGet(
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['SpApi.getSpBalanceApiV1SpBalanceGet']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * SP残高の概要を取得（軽量版）  Returns:     PlayerSPSummary: SP残高の概要
     * @summary Get Sp Balance Summary
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSpBalanceSummaryApiV1SpBalanceSummaryGet(
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PlayerSPSummary>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getSpBalanceSummaryApiV1SpBalanceSummaryGet(
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'SpApi.getSpBalanceSummaryApiV1SpBalanceSummaryGet'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * SP購入プラン一覧を取得  - 現在利用可能な全てのプランを返します - payment_modeで現在の支払いモードを確認できます
     * @summary Get Sp Plans
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSpPlansApiV1SpPlansGet(
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SPPlanResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getSpPlansApiV1SpPlansGet(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['SpApi.getSpPlansApiV1SpPlansGet']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * 特定の取引詳細を取得  Args:     transaction_id: 取引ID  Returns:     SPTransactionRead: 取引詳細  Raises:     HTTPException: 取引が見つからない場合
     * @summary Get Transaction Detail
     * @param {string} transactionId
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTransactionDetailApiV1SpTransactionsTransactionIdGet(
      transactionId: string,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SPTransactionRead>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getTransactionDetailApiV1SpTransactionsTransactionIdGet(
          transactionId,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'SpApi.getTransactionDetailApiV1SpTransactionsTransactionIdGet'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * SP取引履歴を取得  Args:     transaction_type: 取引種別でフィルター     start_date: 開始日時     end_date: 終了日時     related_entity_type: 関連エンティティ種別     related_entity_id: 関連エンティティID     limit: 取得件数上限     offset: オフセット  Returns:     list[SPTransactionRead]: 取引履歴のリスト
     * @summary Get Transaction History
     * @param {SPTransactionType | null} [transactionType]
     * @param {string | null} [startDate]
     * @param {string | null} [endDate]
     * @param {string | null} [relatedEntityType]
     * @param {string | null} [relatedEntityId]
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTransactionHistoryApiV1SpTransactionsGet(
      transactionType?: SPTransactionType | null,
      startDate?: string | null,
      endDate?: string | null,
      relatedEntityType?: string | null,
      relatedEntityId?: string | null,
      limit?: number,
      offset?: number,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<SPTransactionRead>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getTransactionHistoryApiV1SpTransactionsGet(
          transactionType,
          startDate,
          endDate,
          relatedEntityType,
          relatedEntityId,
          limit,
          offset,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'SpApi.getTransactionHistoryApiV1SpTransactionsGet'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * ユーザーの購入履歴を取得  - statusでフィルタリング可能 - 新しい順に返されます
     * @summary Get User Purchases
     * @param {PurchaseStatus | null} [status] フィルタするステータス
     * @param {number} [limit] 取得件数
     * @param {number} [offset] オフセット
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserPurchasesApiV1SpPurchasesGet(
      status?: PurchaseStatus | null,
      limit?: number,
      offset?: number,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SPPurchaseList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getUserPurchasesApiV1SpPurchasesGet(
          status,
          limit,
          offset,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['SpApi.getUserPurchasesApiV1SpPurchasesGet']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * 日次SP回復処理  Returns:     SPDailyRecoveryResponse: 回復結果  Note:     - 1日1回のみ実行可能     - 連続ログインボーナスも同時に処理     - サブスクリプションボーナスも適用
     * @summary Process Daily Recovery
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async processDailyRecoveryApiV1SpDailyRecoveryPost(
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SPDailyRecoveryResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.processDailyRecoveryApiV1SpDailyRecoveryPost(
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'SpApi.processDailyRecoveryApiV1SpDailyRecoveryPost'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * SpApi - factory interface
 * @export
 */
export const SpApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = SpApiFp(configuration)
  return {
    /**
     * 購入をキャンセル  - PENDING または PROCESSING 状態の購入のみキャンセル可能
     * @summary Cancel Purchase
     * @param {SpApiCancelPurchaseApiV1SpPurchasesPurchaseIdCancelPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelPurchaseApiV1SpPurchasesPurchaseIdCancelPost(
      requestParameters: SpApiCancelPurchaseApiV1SpPurchasesPurchaseIdCancelPostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<SPPurchaseDetail> {
      return localVarFp
        .cancelPurchaseApiV1SpPurchasesPurchaseIdCancelPost(
          requestParameters.purchaseId,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * SPを消費  Args:     request: SP消費リクエスト  Returns:     SPConsumeResponse: 消費結果  Raises:     HTTPException: SP不足または処理エラー
     * @summary Consume Sp
     * @param {SpApiConsumeSpApiV1SpConsumePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    consumeSpApiV1SpConsumePost(
      requestParameters: SpApiConsumeSpApiV1SpConsumePostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<SPConsumeResponse> {
      return localVarFp
        .consumeSpApiV1SpConsumePost(
          requestParameters.sPConsumeRequest,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * SP購入申請を作成  - テストモードの場合はtest_reasonが必須です - 自動承認が有効な場合は即座にSPが付与されます
     * @summary Create Purchase
     * @param {SpApiCreatePurchaseApiV1SpPurchasePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPurchaseApiV1SpPurchasePost(
      requestParameters: SpApiCreatePurchaseApiV1SpPurchasePostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<PurchaseResponse> {
      return localVarFp
        .createPurchaseApiV1SpPurchasePost(
          requestParameters.purchaseRequest,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Stripe チェックアウトセッションを作成  - 本番モードでのみ利用可能 - 成功時にはStripeのチェックアウトページへリダイレクトするURLが返されます
     * @summary Create Stripe Checkout
     * @param {SpApiCreateStripeCheckoutApiV1SpStripeCheckoutPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createStripeCheckoutApiV1SpStripeCheckoutPost(
      requestParameters: SpApiCreateStripeCheckoutApiV1SpStripeCheckoutPostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<StripeCheckoutResponse> {
      return localVarFp
        .createStripeCheckoutApiV1SpStripeCheckoutPost(
          requestParameters.stripeCheckoutRequest,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * 購入詳細を取得  - 自分の購入のみ取得可能です
     * @summary Get Purchase Detail
     * @param {SpApiGetPurchaseDetailApiV1SpPurchasesPurchaseIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPurchaseDetailApiV1SpPurchasesPurchaseIdGet(
      requestParameters: SpApiGetPurchaseDetailApiV1SpPurchasesPurchaseIdGetRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<SPPurchaseDetail> {
      return localVarFp
        .getPurchaseDetailApiV1SpPurchasesPurchaseIdGet(
          requestParameters.purchaseId,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * ユーザーの購入統計を取得  - 完了した購入のみが集計対象です
     * @summary Get Purchase Stats
     * @param {SpApiGetPurchaseStatsApiV1SpPurchaseStatsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPurchaseStatsApiV1SpPurchaseStatsGet(
      requestParameters: SpApiGetPurchaseStatsApiV1SpPurchaseStatsGetRequest = {},
      options?: RawAxiosRequestConfig
    ): AxiosPromise<SPPurchaseStats> {
      return localVarFp
        .getPurchaseStatsApiV1SpPurchaseStatsGet(
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * 現在のSP残高と詳細情報を取得  Returns:     PlayerSPRead: SP残高の詳細情報
     * @summary Get Sp Balance
     * @param {SpApiGetSpBalanceApiV1SpBalanceGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSpBalanceApiV1SpBalanceGet(
      requestParameters: SpApiGetSpBalanceApiV1SpBalanceGetRequest = {},
      options?: RawAxiosRequestConfig
    ): AxiosPromise<PlayerSPRead> {
      return localVarFp
        .getSpBalanceApiV1SpBalanceGet(requestParameters.authToken, options)
        .then(request => request(axios, basePath))
    },
    /**
     * SP残高の概要を取得（軽量版）  Returns:     PlayerSPSummary: SP残高の概要
     * @summary Get Sp Balance Summary
     * @param {SpApiGetSpBalanceSummaryApiV1SpBalanceSummaryGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSpBalanceSummaryApiV1SpBalanceSummaryGet(
      requestParameters: SpApiGetSpBalanceSummaryApiV1SpBalanceSummaryGetRequest = {},
      options?: RawAxiosRequestConfig
    ): AxiosPromise<PlayerSPSummary> {
      return localVarFp
        .getSpBalanceSummaryApiV1SpBalanceSummaryGet(
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * SP購入プラン一覧を取得  - 現在利用可能な全てのプランを返します - payment_modeで現在の支払いモードを確認できます
     * @summary Get Sp Plans
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSpPlansApiV1SpPlansGet(
      options?: RawAxiosRequestConfig
    ): AxiosPromise<SPPlanResponse> {
      return localVarFp
        .getSpPlansApiV1SpPlansGet(options)
        .then(request => request(axios, basePath))
    },
    /**
     * 特定の取引詳細を取得  Args:     transaction_id: 取引ID  Returns:     SPTransactionRead: 取引詳細  Raises:     HTTPException: 取引が見つからない場合
     * @summary Get Transaction Detail
     * @param {SpApiGetTransactionDetailApiV1SpTransactionsTransactionIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionDetailApiV1SpTransactionsTransactionIdGet(
      requestParameters: SpApiGetTransactionDetailApiV1SpTransactionsTransactionIdGetRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<SPTransactionRead> {
      return localVarFp
        .getTransactionDetailApiV1SpTransactionsTransactionIdGet(
          requestParameters.transactionId,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * SP取引履歴を取得  Args:     transaction_type: 取引種別でフィルター     start_date: 開始日時     end_date: 終了日時     related_entity_type: 関連エンティティ種別     related_entity_id: 関連エンティティID     limit: 取得件数上限     offset: オフセット  Returns:     list[SPTransactionRead]: 取引履歴のリスト
     * @summary Get Transaction History
     * @param {SpApiGetTransactionHistoryApiV1SpTransactionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionHistoryApiV1SpTransactionsGet(
      requestParameters: SpApiGetTransactionHistoryApiV1SpTransactionsGetRequest = {},
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Array<SPTransactionRead>> {
      return localVarFp
        .getTransactionHistoryApiV1SpTransactionsGet(
          requestParameters.transactionType,
          requestParameters.startDate,
          requestParameters.endDate,
          requestParameters.relatedEntityType,
          requestParameters.relatedEntityId,
          requestParameters.limit,
          requestParameters.offset,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * ユーザーの購入履歴を取得  - statusでフィルタリング可能 - 新しい順に返されます
     * @summary Get User Purchases
     * @param {SpApiGetUserPurchasesApiV1SpPurchasesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserPurchasesApiV1SpPurchasesGet(
      requestParameters: SpApiGetUserPurchasesApiV1SpPurchasesGetRequest = {},
      options?: RawAxiosRequestConfig
    ): AxiosPromise<SPPurchaseList> {
      return localVarFp
        .getUserPurchasesApiV1SpPurchasesGet(
          requestParameters.status,
          requestParameters.limit,
          requestParameters.offset,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * 日次SP回復処理  Returns:     SPDailyRecoveryResponse: 回復結果  Note:     - 1日1回のみ実行可能     - 連続ログインボーナスも同時に処理     - サブスクリプションボーナスも適用
     * @summary Process Daily Recovery
     * @param {SpApiProcessDailyRecoveryApiV1SpDailyRecoveryPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processDailyRecoveryApiV1SpDailyRecoveryPost(
      requestParameters: SpApiProcessDailyRecoveryApiV1SpDailyRecoveryPostRequest = {},
      options?: RawAxiosRequestConfig
    ): AxiosPromise<SPDailyRecoveryResponse> {
      return localVarFp
        .processDailyRecoveryApiV1SpDailyRecoveryPost(
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
  }
}

/**
 * SpApi - interface
 * @export
 * @interface SpApi
 */
export interface SpApiInterface {
  /**
   * 購入をキャンセル  - PENDING または PROCESSING 状態の購入のみキャンセル可能
   * @summary Cancel Purchase
   * @param {SpApiCancelPurchaseApiV1SpPurchasesPurchaseIdCancelPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SpApiInterface
   */
  cancelPurchaseApiV1SpPurchasesPurchaseIdCancelPost(
    requestParameters: SpApiCancelPurchaseApiV1SpPurchasesPurchaseIdCancelPostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<SPPurchaseDetail>

  /**
   * SPを消費  Args:     request: SP消費リクエスト  Returns:     SPConsumeResponse: 消費結果  Raises:     HTTPException: SP不足または処理エラー
   * @summary Consume Sp
   * @param {SpApiConsumeSpApiV1SpConsumePostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SpApiInterface
   */
  consumeSpApiV1SpConsumePost(
    requestParameters: SpApiConsumeSpApiV1SpConsumePostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<SPConsumeResponse>

  /**
   * SP購入申請を作成  - テストモードの場合はtest_reasonが必須です - 自動承認が有効な場合は即座にSPが付与されます
   * @summary Create Purchase
   * @param {SpApiCreatePurchaseApiV1SpPurchasePostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SpApiInterface
   */
  createPurchaseApiV1SpPurchasePost(
    requestParameters: SpApiCreatePurchaseApiV1SpPurchasePostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<PurchaseResponse>

  /**
   * Stripe チェックアウトセッションを作成  - 本番モードでのみ利用可能 - 成功時にはStripeのチェックアウトページへリダイレクトするURLが返されます
   * @summary Create Stripe Checkout
   * @param {SpApiCreateStripeCheckoutApiV1SpStripeCheckoutPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SpApiInterface
   */
  createStripeCheckoutApiV1SpStripeCheckoutPost(
    requestParameters: SpApiCreateStripeCheckoutApiV1SpStripeCheckoutPostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<StripeCheckoutResponse>

  /**
   * 購入詳細を取得  - 自分の購入のみ取得可能です
   * @summary Get Purchase Detail
   * @param {SpApiGetPurchaseDetailApiV1SpPurchasesPurchaseIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SpApiInterface
   */
  getPurchaseDetailApiV1SpPurchasesPurchaseIdGet(
    requestParameters: SpApiGetPurchaseDetailApiV1SpPurchasesPurchaseIdGetRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<SPPurchaseDetail>

  /**
   * ユーザーの購入統計を取得  - 完了した購入のみが集計対象です
   * @summary Get Purchase Stats
   * @param {SpApiGetPurchaseStatsApiV1SpPurchaseStatsGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SpApiInterface
   */
  getPurchaseStatsApiV1SpPurchaseStatsGet(
    requestParameters?: SpApiGetPurchaseStatsApiV1SpPurchaseStatsGetRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<SPPurchaseStats>

  /**
   * 現在のSP残高と詳細情報を取得  Returns:     PlayerSPRead: SP残高の詳細情報
   * @summary Get Sp Balance
   * @param {SpApiGetSpBalanceApiV1SpBalanceGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SpApiInterface
   */
  getSpBalanceApiV1SpBalanceGet(
    requestParameters?: SpApiGetSpBalanceApiV1SpBalanceGetRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<PlayerSPRead>

  /**
   * SP残高の概要を取得（軽量版）  Returns:     PlayerSPSummary: SP残高の概要
   * @summary Get Sp Balance Summary
   * @param {SpApiGetSpBalanceSummaryApiV1SpBalanceSummaryGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SpApiInterface
   */
  getSpBalanceSummaryApiV1SpBalanceSummaryGet(
    requestParameters?: SpApiGetSpBalanceSummaryApiV1SpBalanceSummaryGetRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<PlayerSPSummary>

  /**
   * SP購入プラン一覧を取得  - 現在利用可能な全てのプランを返します - payment_modeで現在の支払いモードを確認できます
   * @summary Get Sp Plans
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SpApiInterface
   */
  getSpPlansApiV1SpPlansGet(
    options?: RawAxiosRequestConfig
  ): AxiosPromise<SPPlanResponse>

  /**
   * 特定の取引詳細を取得  Args:     transaction_id: 取引ID  Returns:     SPTransactionRead: 取引詳細  Raises:     HTTPException: 取引が見つからない場合
   * @summary Get Transaction Detail
   * @param {SpApiGetTransactionDetailApiV1SpTransactionsTransactionIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SpApiInterface
   */
  getTransactionDetailApiV1SpTransactionsTransactionIdGet(
    requestParameters: SpApiGetTransactionDetailApiV1SpTransactionsTransactionIdGetRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<SPTransactionRead>

  /**
   * SP取引履歴を取得  Args:     transaction_type: 取引種別でフィルター     start_date: 開始日時     end_date: 終了日時     related_entity_type: 関連エンティティ種別     related_entity_id: 関連エンティティID     limit: 取得件数上限     offset: オフセット  Returns:     list[SPTransactionRead]: 取引履歴のリスト
   * @summary Get Transaction History
   * @param {SpApiGetTransactionHistoryApiV1SpTransactionsGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SpApiInterface
   */
  getTransactionHistoryApiV1SpTransactionsGet(
    requestParameters?: SpApiGetTransactionHistoryApiV1SpTransactionsGetRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Array<SPTransactionRead>>

  /**
   * ユーザーの購入履歴を取得  - statusでフィルタリング可能 - 新しい順に返されます
   * @summary Get User Purchases
   * @param {SpApiGetUserPurchasesApiV1SpPurchasesGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SpApiInterface
   */
  getUserPurchasesApiV1SpPurchasesGet(
    requestParameters?: SpApiGetUserPurchasesApiV1SpPurchasesGetRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<SPPurchaseList>

  /**
   * 日次SP回復処理  Returns:     SPDailyRecoveryResponse: 回復結果  Note:     - 1日1回のみ実行可能     - 連続ログインボーナスも同時に処理     - サブスクリプションボーナスも適用
   * @summary Process Daily Recovery
   * @param {SpApiProcessDailyRecoveryApiV1SpDailyRecoveryPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SpApiInterface
   */
  processDailyRecoveryApiV1SpDailyRecoveryPost(
    requestParameters?: SpApiProcessDailyRecoveryApiV1SpDailyRecoveryPostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<SPDailyRecoveryResponse>
}

/**
 * Request parameters for cancelPurchaseApiV1SpPurchasesPurchaseIdCancelPost operation in SpApi.
 * @export
 * @interface SpApiCancelPurchaseApiV1SpPurchasesPurchaseIdCancelPostRequest
 */
export interface SpApiCancelPurchaseApiV1SpPurchasesPurchaseIdCancelPostRequest {
  /**
   *
   * @type {string}
   * @memberof SpApiCancelPurchaseApiV1SpPurchasesPurchaseIdCancelPost
   */
  readonly purchaseId: string

  /**
   *
   * @type {string}
   * @memberof SpApiCancelPurchaseApiV1SpPurchasesPurchaseIdCancelPost
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for consumeSpApiV1SpConsumePost operation in SpApi.
 * @export
 * @interface SpApiConsumeSpApiV1SpConsumePostRequest
 */
export interface SpApiConsumeSpApiV1SpConsumePostRequest {
  /**
   *
   * @type {SPConsumeRequest}
   * @memberof SpApiConsumeSpApiV1SpConsumePost
   */
  readonly sPConsumeRequest: SPConsumeRequest

  /**
   *
   * @type {string}
   * @memberof SpApiConsumeSpApiV1SpConsumePost
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for createPurchaseApiV1SpPurchasePost operation in SpApi.
 * @export
 * @interface SpApiCreatePurchaseApiV1SpPurchasePostRequest
 */
export interface SpApiCreatePurchaseApiV1SpPurchasePostRequest {
  /**
   *
   * @type {PurchaseRequest}
   * @memberof SpApiCreatePurchaseApiV1SpPurchasePost
   */
  readonly purchaseRequest: PurchaseRequest

  /**
   *
   * @type {string}
   * @memberof SpApiCreatePurchaseApiV1SpPurchasePost
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for createStripeCheckoutApiV1SpStripeCheckoutPost operation in SpApi.
 * @export
 * @interface SpApiCreateStripeCheckoutApiV1SpStripeCheckoutPostRequest
 */
export interface SpApiCreateStripeCheckoutApiV1SpStripeCheckoutPostRequest {
  /**
   *
   * @type {StripeCheckoutRequest}
   * @memberof SpApiCreateStripeCheckoutApiV1SpStripeCheckoutPost
   */
  readonly stripeCheckoutRequest: StripeCheckoutRequest

  /**
   *
   * @type {string}
   * @memberof SpApiCreateStripeCheckoutApiV1SpStripeCheckoutPost
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for getPurchaseDetailApiV1SpPurchasesPurchaseIdGet operation in SpApi.
 * @export
 * @interface SpApiGetPurchaseDetailApiV1SpPurchasesPurchaseIdGetRequest
 */
export interface SpApiGetPurchaseDetailApiV1SpPurchasesPurchaseIdGetRequest {
  /**
   *
   * @type {string}
   * @memberof SpApiGetPurchaseDetailApiV1SpPurchasesPurchaseIdGet
   */
  readonly purchaseId: string

  /**
   *
   * @type {string}
   * @memberof SpApiGetPurchaseDetailApiV1SpPurchasesPurchaseIdGet
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for getPurchaseStatsApiV1SpPurchaseStatsGet operation in SpApi.
 * @export
 * @interface SpApiGetPurchaseStatsApiV1SpPurchaseStatsGetRequest
 */
export interface SpApiGetPurchaseStatsApiV1SpPurchaseStatsGetRequest {
  /**
   *
   * @type {string}
   * @memberof SpApiGetPurchaseStatsApiV1SpPurchaseStatsGet
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for getSpBalanceApiV1SpBalanceGet operation in SpApi.
 * @export
 * @interface SpApiGetSpBalanceApiV1SpBalanceGetRequest
 */
export interface SpApiGetSpBalanceApiV1SpBalanceGetRequest {
  /**
   *
   * @type {string}
   * @memberof SpApiGetSpBalanceApiV1SpBalanceGet
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for getSpBalanceSummaryApiV1SpBalanceSummaryGet operation in SpApi.
 * @export
 * @interface SpApiGetSpBalanceSummaryApiV1SpBalanceSummaryGetRequest
 */
export interface SpApiGetSpBalanceSummaryApiV1SpBalanceSummaryGetRequest {
  /**
   *
   * @type {string}
   * @memberof SpApiGetSpBalanceSummaryApiV1SpBalanceSummaryGet
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for getTransactionDetailApiV1SpTransactionsTransactionIdGet operation in SpApi.
 * @export
 * @interface SpApiGetTransactionDetailApiV1SpTransactionsTransactionIdGetRequest
 */
export interface SpApiGetTransactionDetailApiV1SpTransactionsTransactionIdGetRequest {
  /**
   *
   * @type {string}
   * @memberof SpApiGetTransactionDetailApiV1SpTransactionsTransactionIdGet
   */
  readonly transactionId: string

  /**
   *
   * @type {string}
   * @memberof SpApiGetTransactionDetailApiV1SpTransactionsTransactionIdGet
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for getTransactionHistoryApiV1SpTransactionsGet operation in SpApi.
 * @export
 * @interface SpApiGetTransactionHistoryApiV1SpTransactionsGetRequest
 */
export interface SpApiGetTransactionHistoryApiV1SpTransactionsGetRequest {
  /**
   *
   * @type {SPTransactionType}
   * @memberof SpApiGetTransactionHistoryApiV1SpTransactionsGet
   */
  readonly transactionType?: SPTransactionType | null

  /**
   *
   * @type {string}
   * @memberof SpApiGetTransactionHistoryApiV1SpTransactionsGet
   */
  readonly startDate?: string | null

  /**
   *
   * @type {string}
   * @memberof SpApiGetTransactionHistoryApiV1SpTransactionsGet
   */
  readonly endDate?: string | null

  /**
   *
   * @type {string}
   * @memberof SpApiGetTransactionHistoryApiV1SpTransactionsGet
   */
  readonly relatedEntityType?: string | null

  /**
   *
   * @type {string}
   * @memberof SpApiGetTransactionHistoryApiV1SpTransactionsGet
   */
  readonly relatedEntityId?: string | null

  /**
   *
   * @type {number}
   * @memberof SpApiGetTransactionHistoryApiV1SpTransactionsGet
   */
  readonly limit?: number

  /**
   *
   * @type {number}
   * @memberof SpApiGetTransactionHistoryApiV1SpTransactionsGet
   */
  readonly offset?: number

  /**
   *
   * @type {string}
   * @memberof SpApiGetTransactionHistoryApiV1SpTransactionsGet
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for getUserPurchasesApiV1SpPurchasesGet operation in SpApi.
 * @export
 * @interface SpApiGetUserPurchasesApiV1SpPurchasesGetRequest
 */
export interface SpApiGetUserPurchasesApiV1SpPurchasesGetRequest {
  /**
   * フィルタするステータス
   * @type {PurchaseStatus}
   * @memberof SpApiGetUserPurchasesApiV1SpPurchasesGet
   */
  readonly status?: PurchaseStatus | null

  /**
   * 取得件数
   * @type {number}
   * @memberof SpApiGetUserPurchasesApiV1SpPurchasesGet
   */
  readonly limit?: number

  /**
   * オフセット
   * @type {number}
   * @memberof SpApiGetUserPurchasesApiV1SpPurchasesGet
   */
  readonly offset?: number

  /**
   *
   * @type {string}
   * @memberof SpApiGetUserPurchasesApiV1SpPurchasesGet
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for processDailyRecoveryApiV1SpDailyRecoveryPost operation in SpApi.
 * @export
 * @interface SpApiProcessDailyRecoveryApiV1SpDailyRecoveryPostRequest
 */
export interface SpApiProcessDailyRecoveryApiV1SpDailyRecoveryPostRequest {
  /**
   *
   * @type {string}
   * @memberof SpApiProcessDailyRecoveryApiV1SpDailyRecoveryPost
   */
  readonly authToken?: string | null
}

/**
 * SpApi - object-oriented interface
 * @export
 * @class SpApi
 * @extends {BaseAPI}
 */
export class SpApi extends BaseAPI implements SpApiInterface {
  /**
   * 購入をキャンセル  - PENDING または PROCESSING 状態の購入のみキャンセル可能
   * @summary Cancel Purchase
   * @param {SpApiCancelPurchaseApiV1SpPurchasesPurchaseIdCancelPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SpApi
   */
  public cancelPurchaseApiV1SpPurchasesPurchaseIdCancelPost(
    requestParameters: SpApiCancelPurchaseApiV1SpPurchasesPurchaseIdCancelPostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return SpApiFp(this.configuration)
      .cancelPurchaseApiV1SpPurchasesPurchaseIdCancelPost(
        requestParameters.purchaseId,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * SPを消費  Args:     request: SP消費リクエスト  Returns:     SPConsumeResponse: 消費結果  Raises:     HTTPException: SP不足または処理エラー
   * @summary Consume Sp
   * @param {SpApiConsumeSpApiV1SpConsumePostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SpApi
   */
  public consumeSpApiV1SpConsumePost(
    requestParameters: SpApiConsumeSpApiV1SpConsumePostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return SpApiFp(this.configuration)
      .consumeSpApiV1SpConsumePost(
        requestParameters.sPConsumeRequest,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * SP購入申請を作成  - テストモードの場合はtest_reasonが必須です - 自動承認が有効な場合は即座にSPが付与されます
   * @summary Create Purchase
   * @param {SpApiCreatePurchaseApiV1SpPurchasePostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SpApi
   */
  public createPurchaseApiV1SpPurchasePost(
    requestParameters: SpApiCreatePurchaseApiV1SpPurchasePostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return SpApiFp(this.configuration)
      .createPurchaseApiV1SpPurchasePost(
        requestParameters.purchaseRequest,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Stripe チェックアウトセッションを作成  - 本番モードでのみ利用可能 - 成功時にはStripeのチェックアウトページへリダイレクトするURLが返されます
   * @summary Create Stripe Checkout
   * @param {SpApiCreateStripeCheckoutApiV1SpStripeCheckoutPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SpApi
   */
  public createStripeCheckoutApiV1SpStripeCheckoutPost(
    requestParameters: SpApiCreateStripeCheckoutApiV1SpStripeCheckoutPostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return SpApiFp(this.configuration)
      .createStripeCheckoutApiV1SpStripeCheckoutPost(
        requestParameters.stripeCheckoutRequest,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * 購入詳細を取得  - 自分の購入のみ取得可能です
   * @summary Get Purchase Detail
   * @param {SpApiGetPurchaseDetailApiV1SpPurchasesPurchaseIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SpApi
   */
  public getPurchaseDetailApiV1SpPurchasesPurchaseIdGet(
    requestParameters: SpApiGetPurchaseDetailApiV1SpPurchasesPurchaseIdGetRequest,
    options?: RawAxiosRequestConfig
  ) {
    return SpApiFp(this.configuration)
      .getPurchaseDetailApiV1SpPurchasesPurchaseIdGet(
        requestParameters.purchaseId,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * ユーザーの購入統計を取得  - 完了した購入のみが集計対象です
   * @summary Get Purchase Stats
   * @param {SpApiGetPurchaseStatsApiV1SpPurchaseStatsGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SpApi
   */
  public getPurchaseStatsApiV1SpPurchaseStatsGet(
    requestParameters: SpApiGetPurchaseStatsApiV1SpPurchaseStatsGetRequest = {},
    options?: RawAxiosRequestConfig
  ) {
    return SpApiFp(this.configuration)
      .getPurchaseStatsApiV1SpPurchaseStatsGet(
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * 現在のSP残高と詳細情報を取得  Returns:     PlayerSPRead: SP残高の詳細情報
   * @summary Get Sp Balance
   * @param {SpApiGetSpBalanceApiV1SpBalanceGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SpApi
   */
  public getSpBalanceApiV1SpBalanceGet(
    requestParameters: SpApiGetSpBalanceApiV1SpBalanceGetRequest = {},
    options?: RawAxiosRequestConfig
  ) {
    return SpApiFp(this.configuration)
      .getSpBalanceApiV1SpBalanceGet(requestParameters.authToken, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * SP残高の概要を取得（軽量版）  Returns:     PlayerSPSummary: SP残高の概要
   * @summary Get Sp Balance Summary
   * @param {SpApiGetSpBalanceSummaryApiV1SpBalanceSummaryGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SpApi
   */
  public getSpBalanceSummaryApiV1SpBalanceSummaryGet(
    requestParameters: SpApiGetSpBalanceSummaryApiV1SpBalanceSummaryGetRequest = {},
    options?: RawAxiosRequestConfig
  ) {
    return SpApiFp(this.configuration)
      .getSpBalanceSummaryApiV1SpBalanceSummaryGet(
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * SP購入プラン一覧を取得  - 現在利用可能な全てのプランを返します - payment_modeで現在の支払いモードを確認できます
   * @summary Get Sp Plans
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SpApi
   */
  public getSpPlansApiV1SpPlansGet(options?: RawAxiosRequestConfig) {
    return SpApiFp(this.configuration)
      .getSpPlansApiV1SpPlansGet(options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * 特定の取引詳細を取得  Args:     transaction_id: 取引ID  Returns:     SPTransactionRead: 取引詳細  Raises:     HTTPException: 取引が見つからない場合
   * @summary Get Transaction Detail
   * @param {SpApiGetTransactionDetailApiV1SpTransactionsTransactionIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SpApi
   */
  public getTransactionDetailApiV1SpTransactionsTransactionIdGet(
    requestParameters: SpApiGetTransactionDetailApiV1SpTransactionsTransactionIdGetRequest,
    options?: RawAxiosRequestConfig
  ) {
    return SpApiFp(this.configuration)
      .getTransactionDetailApiV1SpTransactionsTransactionIdGet(
        requestParameters.transactionId,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * SP取引履歴を取得  Args:     transaction_type: 取引種別でフィルター     start_date: 開始日時     end_date: 終了日時     related_entity_type: 関連エンティティ種別     related_entity_id: 関連エンティティID     limit: 取得件数上限     offset: オフセット  Returns:     list[SPTransactionRead]: 取引履歴のリスト
   * @summary Get Transaction History
   * @param {SpApiGetTransactionHistoryApiV1SpTransactionsGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SpApi
   */
  public getTransactionHistoryApiV1SpTransactionsGet(
    requestParameters: SpApiGetTransactionHistoryApiV1SpTransactionsGetRequest = {},
    options?: RawAxiosRequestConfig
  ) {
    return SpApiFp(this.configuration)
      .getTransactionHistoryApiV1SpTransactionsGet(
        requestParameters.transactionType,
        requestParameters.startDate,
        requestParameters.endDate,
        requestParameters.relatedEntityType,
        requestParameters.relatedEntityId,
        requestParameters.limit,
        requestParameters.offset,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * ユーザーの購入履歴を取得  - statusでフィルタリング可能 - 新しい順に返されます
   * @summary Get User Purchases
   * @param {SpApiGetUserPurchasesApiV1SpPurchasesGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SpApi
   */
  public getUserPurchasesApiV1SpPurchasesGet(
    requestParameters: SpApiGetUserPurchasesApiV1SpPurchasesGetRequest = {},
    options?: RawAxiosRequestConfig
  ) {
    return SpApiFp(this.configuration)
      .getUserPurchasesApiV1SpPurchasesGet(
        requestParameters.status,
        requestParameters.limit,
        requestParameters.offset,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * 日次SP回復処理  Returns:     SPDailyRecoveryResponse: 回復結果  Note:     - 1日1回のみ実行可能     - 連続ログインボーナスも同時に処理     - サブスクリプションボーナスも適用
   * @summary Process Daily Recovery
   * @param {SpApiProcessDailyRecoveryApiV1SpDailyRecoveryPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SpApi
   */
  public processDailyRecoveryApiV1SpDailyRecoveryPost(
    requestParameters: SpApiProcessDailyRecoveryApiV1SpDailyRecoveryPostRequest = {},
    options?: RawAxiosRequestConfig
  ) {
    return SpApiFp(this.configuration)
      .processDailyRecoveryApiV1SpDailyRecoveryPost(
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }
}
