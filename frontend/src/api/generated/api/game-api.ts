// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * GESTALOKA API
 * マルチプレイ・テキストMMO - ゲスタロカ API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { EndSessionRequest } from '../models';
// @ts-ignore
import type { GameSessionCreate } from '../models';
// @ts-ignore
import type { GameSessionResponse } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { SessionContinueRequest } from '../models';
// @ts-ignore
import type { SessionHistoryResponse } from '../models';
// @ts-ignore
import type { SessionResultResponse } from '../models';
/**
 * GameApi - axios parameter creator
 * @export
 */
export const GameApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 既存セッションを継続  - **session_id**: 継続するセッションのID
         * @summary Continue Session
         * @param {string} sessionId 
         * @param {SessionContinueRequest} sessionContinueRequest 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        continueSessionApiV1GameSessionsSessionIdContinuePost: async (sessionId: string, sessionContinueRequest: SessionContinueRequest, authToken?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('continueSessionApiV1GameSessionsSessionIdContinuePost', 'sessionId', sessionId)
            // verify required parameter 'sessionContinueRequest' is not null or undefined
            assertParamExists('continueSessionApiV1GameSessionsSessionIdContinuePost', 'sessionContinueRequest', sessionContinueRequest)
            const localVarPath = `/api/v1/game/sessions/{session_id}/continue`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sessionContinueRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新規ゲームセッションを作成  - **character_id**: セッションを開始するキャラクターのID - **current_scene**: 開始シーン（省略時はtown_square）
         * @summary Create Session
         * @param {string} characterId 
         * @param {GameSessionCreate} gameSessionCreate 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSessionApiV1GameSessionsPost: async (characterId: string, gameSessionCreate: GameSessionCreate, authToken?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'characterId' is not null or undefined
            assertParamExists('createSessionApiV1GameSessionsPost', 'characterId', characterId)
            // verify required parameter 'gameSessionCreate' is not null or undefined
            assertParamExists('createSessionApiV1GameSessionsPost', 'gameSessionCreate', gameSessionCreate)
            const localVarPath = `/api/v1/game/sessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (characterId !== undefined) {
                localVarQueryParameter['character_id'] = characterId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(gameSessionCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * セッションを終了  - **session_id**: 終了するセッションのID - **reason**: 終了理由（省略可）
         * @summary End Session
         * @param {string} sessionId 
         * @param {EndSessionRequest} endSessionRequest 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endSessionApiV1GameSessionsSessionIdEndPost: async (sessionId: string, endSessionRequest: EndSessionRequest, authToken?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('endSessionApiV1GameSessionsSessionIdEndPost', 'sessionId', sessionId)
            // verify required parameter 'endSessionRequest' is not null or undefined
            assertParamExists('endSessionApiV1GameSessionsSessionIdEndPost', 'endSessionRequest', endSessionRequest)
            const localVarPath = `/api/v1/game/sessions/{session_id}/end`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(endSessionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定されたキャラクターのアクティブなセッションを取得  - **character_id**: チェックするキャラクターのID
         * @summary Get Active Session
         * @param {string} characterId Character ID to check for active session
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveSessionApiV1GameSessionsActiveGet: async (characterId: string, authToken?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'characterId' is not null or undefined
            assertParamExists('getActiveSessionApiV1GameSessionsActiveGet', 'characterId', characterId)
            const localVarPath = `/api/v1/game/sessions/active`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (characterId !== undefined) {
                localVarQueryParameter['character_id'] = characterId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * セッションの詳細情報を取得  - **session_id**: 取得するセッションのID
         * @summary Get Session
         * @param {string} sessionId 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionApiV1GameSessionsSessionIdGet: async (sessionId: string, authToken?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('getSessionApiV1GameSessionsSessionIdGet', 'sessionId', sessionId)
            const localVarPath = `/api/v1/game/sessions/{session_id}`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * セッション履歴を取得  - **character_id**: 特定のキャラクターでフィルター（省略可） - **skip**: スキップするレコード数 - **limit**: 取得する最大レコード数
         * @summary Get Session History
         * @param {string | null} [characterId] Filter by character ID
         * @param {number} [skip] Number of records to skip
         * @param {number} [limit] Maximum number of records to return
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionHistoryApiV1GameSessionsHistoryGet: async (characterId?: string | null, skip?: number, limit?: number, authToken?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/game/sessions/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (characterId !== undefined) {
                localVarQueryParameter['character_id'] = characterId;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GameApi - functional programming interface
 * @export
 */
export const GameApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GameApiAxiosParamCreator(configuration)
    return {
        /**
         * 既存セッションを継続  - **session_id**: 継続するセッションのID
         * @summary Continue Session
         * @param {string} sessionId 
         * @param {SessionContinueRequest} sessionContinueRequest 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async continueSessionApiV1GameSessionsSessionIdContinuePost(sessionId: string, sessionContinueRequest: SessionContinueRequest, authToken?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameSessionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.continueSessionApiV1GameSessionsSessionIdContinuePost(sessionId, sessionContinueRequest, authToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GameApi.continueSessionApiV1GameSessionsSessionIdContinuePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 新規ゲームセッションを作成  - **character_id**: セッションを開始するキャラクターのID - **current_scene**: 開始シーン（省略時はtown_square）
         * @summary Create Session
         * @param {string} characterId 
         * @param {GameSessionCreate} gameSessionCreate 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSessionApiV1GameSessionsPost(characterId: string, gameSessionCreate: GameSessionCreate, authToken?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameSessionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSessionApiV1GameSessionsPost(characterId, gameSessionCreate, authToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GameApi.createSessionApiV1GameSessionsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * セッションを終了  - **session_id**: 終了するセッションのID - **reason**: 終了理由（省略可）
         * @summary End Session
         * @param {string} sessionId 
         * @param {EndSessionRequest} endSessionRequest 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async endSessionApiV1GameSessionsSessionIdEndPost(sessionId: string, endSessionRequest: EndSessionRequest, authToken?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionResultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.endSessionApiV1GameSessionsSessionIdEndPost(sessionId, endSessionRequest, authToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GameApi.endSessionApiV1GameSessionsSessionIdEndPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定されたキャラクターのアクティブなセッションを取得  - **character_id**: チェックするキャラクターのID
         * @summary Get Active Session
         * @param {string} characterId Character ID to check for active session
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActiveSessionApiV1GameSessionsActiveGet(characterId: string, authToken?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameSessionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActiveSessionApiV1GameSessionsActiveGet(characterId, authToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GameApi.getActiveSessionApiV1GameSessionsActiveGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * セッションの詳細情報を取得  - **session_id**: 取得するセッションのID
         * @summary Get Session
         * @param {string} sessionId 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSessionApiV1GameSessionsSessionIdGet(sessionId: string, authToken?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameSessionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSessionApiV1GameSessionsSessionIdGet(sessionId, authToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GameApi.getSessionApiV1GameSessionsSessionIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * セッション履歴を取得  - **character_id**: 特定のキャラクターでフィルター（省略可） - **skip**: スキップするレコード数 - **limit**: 取得する最大レコード数
         * @summary Get Session History
         * @param {string | null} [characterId] Filter by character ID
         * @param {number} [skip] Number of records to skip
         * @param {number} [limit] Maximum number of records to return
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSessionHistoryApiV1GameSessionsHistoryGet(characterId?: string | null, skip?: number, limit?: number, authToken?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionHistoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSessionHistoryApiV1GameSessionsHistoryGet(characterId, skip, limit, authToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GameApi.getSessionHistoryApiV1GameSessionsHistoryGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GameApi - factory interface
 * @export
 */
export const GameApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GameApiFp(configuration)
    return {
        /**
         * 既存セッションを継続  - **session_id**: 継続するセッションのID
         * @summary Continue Session
         * @param {GameApiContinueSessionApiV1GameSessionsSessionIdContinuePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        continueSessionApiV1GameSessionsSessionIdContinuePost(requestParameters: GameApiContinueSessionApiV1GameSessionsSessionIdContinuePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<GameSessionResponse> {
            return localVarFp.continueSessionApiV1GameSessionsSessionIdContinuePost(requestParameters.sessionId, requestParameters.sessionContinueRequest, requestParameters.authToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 新規ゲームセッションを作成  - **character_id**: セッションを開始するキャラクターのID - **current_scene**: 開始シーン（省略時はtown_square）
         * @summary Create Session
         * @param {GameApiCreateSessionApiV1GameSessionsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSessionApiV1GameSessionsPost(requestParameters: GameApiCreateSessionApiV1GameSessionsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<GameSessionResponse> {
            return localVarFp.createSessionApiV1GameSessionsPost(requestParameters.characterId, requestParameters.gameSessionCreate, requestParameters.authToken, options).then((request) => request(axios, basePath));
        },
        /**
         * セッションを終了  - **session_id**: 終了するセッションのID - **reason**: 終了理由（省略可）
         * @summary End Session
         * @param {GameApiEndSessionApiV1GameSessionsSessionIdEndPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endSessionApiV1GameSessionsSessionIdEndPost(requestParameters: GameApiEndSessionApiV1GameSessionsSessionIdEndPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SessionResultResponse> {
            return localVarFp.endSessionApiV1GameSessionsSessionIdEndPost(requestParameters.sessionId, requestParameters.endSessionRequest, requestParameters.authToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定されたキャラクターのアクティブなセッションを取得  - **character_id**: チェックするキャラクターのID
         * @summary Get Active Session
         * @param {GameApiGetActiveSessionApiV1GameSessionsActiveGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveSessionApiV1GameSessionsActiveGet(requestParameters: GameApiGetActiveSessionApiV1GameSessionsActiveGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<GameSessionResponse> {
            return localVarFp.getActiveSessionApiV1GameSessionsActiveGet(requestParameters.characterId, requestParameters.authToken, options).then((request) => request(axios, basePath));
        },
        /**
         * セッションの詳細情報を取得  - **session_id**: 取得するセッションのID
         * @summary Get Session
         * @param {GameApiGetSessionApiV1GameSessionsSessionIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionApiV1GameSessionsSessionIdGet(requestParameters: GameApiGetSessionApiV1GameSessionsSessionIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<GameSessionResponse> {
            return localVarFp.getSessionApiV1GameSessionsSessionIdGet(requestParameters.sessionId, requestParameters.authToken, options).then((request) => request(axios, basePath));
        },
        /**
         * セッション履歴を取得  - **character_id**: 特定のキャラクターでフィルター（省略可） - **skip**: スキップするレコード数 - **limit**: 取得する最大レコード数
         * @summary Get Session History
         * @param {GameApiGetSessionHistoryApiV1GameSessionsHistoryGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionHistoryApiV1GameSessionsHistoryGet(requestParameters: GameApiGetSessionHistoryApiV1GameSessionsHistoryGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<SessionHistoryResponse> {
            return localVarFp.getSessionHistoryApiV1GameSessionsHistoryGet(requestParameters.characterId, requestParameters.skip, requestParameters.limit, requestParameters.authToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GameApi - interface
 * @export
 * @interface GameApi
 */
export interface GameApiInterface {
    /**
     * 既存セッションを継続  - **session_id**: 継続するセッションのID
     * @summary Continue Session
     * @param {GameApiContinueSessionApiV1GameSessionsSessionIdContinuePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameApiInterface
     */
    continueSessionApiV1GameSessionsSessionIdContinuePost(requestParameters: GameApiContinueSessionApiV1GameSessionsSessionIdContinuePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<GameSessionResponse>;

    /**
     * 新規ゲームセッションを作成  - **character_id**: セッションを開始するキャラクターのID - **current_scene**: 開始シーン（省略時はtown_square）
     * @summary Create Session
     * @param {GameApiCreateSessionApiV1GameSessionsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameApiInterface
     */
    createSessionApiV1GameSessionsPost(requestParameters: GameApiCreateSessionApiV1GameSessionsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<GameSessionResponse>;

    /**
     * セッションを終了  - **session_id**: 終了するセッションのID - **reason**: 終了理由（省略可）
     * @summary End Session
     * @param {GameApiEndSessionApiV1GameSessionsSessionIdEndPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameApiInterface
     */
    endSessionApiV1GameSessionsSessionIdEndPost(requestParameters: GameApiEndSessionApiV1GameSessionsSessionIdEndPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SessionResultResponse>;

    /**
     * 指定されたキャラクターのアクティブなセッションを取得  - **character_id**: チェックするキャラクターのID
     * @summary Get Active Session
     * @param {GameApiGetActiveSessionApiV1GameSessionsActiveGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameApiInterface
     */
    getActiveSessionApiV1GameSessionsActiveGet(requestParameters: GameApiGetActiveSessionApiV1GameSessionsActiveGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<GameSessionResponse>;

    /**
     * セッションの詳細情報を取得  - **session_id**: 取得するセッションのID
     * @summary Get Session
     * @param {GameApiGetSessionApiV1GameSessionsSessionIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameApiInterface
     */
    getSessionApiV1GameSessionsSessionIdGet(requestParameters: GameApiGetSessionApiV1GameSessionsSessionIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<GameSessionResponse>;

    /**
     * セッション履歴を取得  - **character_id**: 特定のキャラクターでフィルター（省略可） - **skip**: スキップするレコード数 - **limit**: 取得する最大レコード数
     * @summary Get Session History
     * @param {GameApiGetSessionHistoryApiV1GameSessionsHistoryGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameApiInterface
     */
    getSessionHistoryApiV1GameSessionsHistoryGet(requestParameters?: GameApiGetSessionHistoryApiV1GameSessionsHistoryGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<SessionHistoryResponse>;

}

/**
 * Request parameters for continueSessionApiV1GameSessionsSessionIdContinuePost operation in GameApi.
 * @export
 * @interface GameApiContinueSessionApiV1GameSessionsSessionIdContinuePostRequest
 */
export interface GameApiContinueSessionApiV1GameSessionsSessionIdContinuePostRequest {
    /**
     * 
     * @type {string}
     * @memberof GameApiContinueSessionApiV1GameSessionsSessionIdContinuePost
     */
    readonly sessionId: string

    /**
     * 
     * @type {SessionContinueRequest}
     * @memberof GameApiContinueSessionApiV1GameSessionsSessionIdContinuePost
     */
    readonly sessionContinueRequest: SessionContinueRequest

    /**
     * 
     * @type {string}
     * @memberof GameApiContinueSessionApiV1GameSessionsSessionIdContinuePost
     */
    readonly authToken?: string | null
}

/**
 * Request parameters for createSessionApiV1GameSessionsPost operation in GameApi.
 * @export
 * @interface GameApiCreateSessionApiV1GameSessionsPostRequest
 */
export interface GameApiCreateSessionApiV1GameSessionsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof GameApiCreateSessionApiV1GameSessionsPost
     */
    readonly characterId: string

    /**
     * 
     * @type {GameSessionCreate}
     * @memberof GameApiCreateSessionApiV1GameSessionsPost
     */
    readonly gameSessionCreate: GameSessionCreate

    /**
     * 
     * @type {string}
     * @memberof GameApiCreateSessionApiV1GameSessionsPost
     */
    readonly authToken?: string | null
}

/**
 * Request parameters for endSessionApiV1GameSessionsSessionIdEndPost operation in GameApi.
 * @export
 * @interface GameApiEndSessionApiV1GameSessionsSessionIdEndPostRequest
 */
export interface GameApiEndSessionApiV1GameSessionsSessionIdEndPostRequest {
    /**
     * 
     * @type {string}
     * @memberof GameApiEndSessionApiV1GameSessionsSessionIdEndPost
     */
    readonly sessionId: string

    /**
     * 
     * @type {EndSessionRequest}
     * @memberof GameApiEndSessionApiV1GameSessionsSessionIdEndPost
     */
    readonly endSessionRequest: EndSessionRequest

    /**
     * 
     * @type {string}
     * @memberof GameApiEndSessionApiV1GameSessionsSessionIdEndPost
     */
    readonly authToken?: string | null
}

/**
 * Request parameters for getActiveSessionApiV1GameSessionsActiveGet operation in GameApi.
 * @export
 * @interface GameApiGetActiveSessionApiV1GameSessionsActiveGetRequest
 */
export interface GameApiGetActiveSessionApiV1GameSessionsActiveGetRequest {
    /**
     * Character ID to check for active session
     * @type {string}
     * @memberof GameApiGetActiveSessionApiV1GameSessionsActiveGet
     */
    readonly characterId: string

    /**
     * 
     * @type {string}
     * @memberof GameApiGetActiveSessionApiV1GameSessionsActiveGet
     */
    readonly authToken?: string | null
}

/**
 * Request parameters for getSessionApiV1GameSessionsSessionIdGet operation in GameApi.
 * @export
 * @interface GameApiGetSessionApiV1GameSessionsSessionIdGetRequest
 */
export interface GameApiGetSessionApiV1GameSessionsSessionIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof GameApiGetSessionApiV1GameSessionsSessionIdGet
     */
    readonly sessionId: string

    /**
     * 
     * @type {string}
     * @memberof GameApiGetSessionApiV1GameSessionsSessionIdGet
     */
    readonly authToken?: string | null
}

/**
 * Request parameters for getSessionHistoryApiV1GameSessionsHistoryGet operation in GameApi.
 * @export
 * @interface GameApiGetSessionHistoryApiV1GameSessionsHistoryGetRequest
 */
export interface GameApiGetSessionHistoryApiV1GameSessionsHistoryGetRequest {
    /**
     * Filter by character ID
     * @type {string}
     * @memberof GameApiGetSessionHistoryApiV1GameSessionsHistoryGet
     */
    readonly characterId?: string | null

    /**
     * Number of records to skip
     * @type {number}
     * @memberof GameApiGetSessionHistoryApiV1GameSessionsHistoryGet
     */
    readonly skip?: number

    /**
     * Maximum number of records to return
     * @type {number}
     * @memberof GameApiGetSessionHistoryApiV1GameSessionsHistoryGet
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof GameApiGetSessionHistoryApiV1GameSessionsHistoryGet
     */
    readonly authToken?: string | null
}

/**
 * GameApi - object-oriented interface
 * @export
 * @class GameApi
 * @extends {BaseAPI}
 */
export class GameApi extends BaseAPI implements GameApiInterface {
    /**
     * 既存セッションを継続  - **session_id**: 継続するセッションのID
     * @summary Continue Session
     * @param {GameApiContinueSessionApiV1GameSessionsSessionIdContinuePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameApi
     */
    public continueSessionApiV1GameSessionsSessionIdContinuePost(requestParameters: GameApiContinueSessionApiV1GameSessionsSessionIdContinuePostRequest, options?: RawAxiosRequestConfig) {
        return GameApiFp(this.configuration).continueSessionApiV1GameSessionsSessionIdContinuePost(requestParameters.sessionId, requestParameters.sessionContinueRequest, requestParameters.authToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 新規ゲームセッションを作成  - **character_id**: セッションを開始するキャラクターのID - **current_scene**: 開始シーン（省略時はtown_square）
     * @summary Create Session
     * @param {GameApiCreateSessionApiV1GameSessionsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameApi
     */
    public createSessionApiV1GameSessionsPost(requestParameters: GameApiCreateSessionApiV1GameSessionsPostRequest, options?: RawAxiosRequestConfig) {
        return GameApiFp(this.configuration).createSessionApiV1GameSessionsPost(requestParameters.characterId, requestParameters.gameSessionCreate, requestParameters.authToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * セッションを終了  - **session_id**: 終了するセッションのID - **reason**: 終了理由（省略可）
     * @summary End Session
     * @param {GameApiEndSessionApiV1GameSessionsSessionIdEndPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameApi
     */
    public endSessionApiV1GameSessionsSessionIdEndPost(requestParameters: GameApiEndSessionApiV1GameSessionsSessionIdEndPostRequest, options?: RawAxiosRequestConfig) {
        return GameApiFp(this.configuration).endSessionApiV1GameSessionsSessionIdEndPost(requestParameters.sessionId, requestParameters.endSessionRequest, requestParameters.authToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定されたキャラクターのアクティブなセッションを取得  - **character_id**: チェックするキャラクターのID
     * @summary Get Active Session
     * @param {GameApiGetActiveSessionApiV1GameSessionsActiveGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameApi
     */
    public getActiveSessionApiV1GameSessionsActiveGet(requestParameters: GameApiGetActiveSessionApiV1GameSessionsActiveGetRequest, options?: RawAxiosRequestConfig) {
        return GameApiFp(this.configuration).getActiveSessionApiV1GameSessionsActiveGet(requestParameters.characterId, requestParameters.authToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * セッションの詳細情報を取得  - **session_id**: 取得するセッションのID
     * @summary Get Session
     * @param {GameApiGetSessionApiV1GameSessionsSessionIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameApi
     */
    public getSessionApiV1GameSessionsSessionIdGet(requestParameters: GameApiGetSessionApiV1GameSessionsSessionIdGetRequest, options?: RawAxiosRequestConfig) {
        return GameApiFp(this.configuration).getSessionApiV1GameSessionsSessionIdGet(requestParameters.sessionId, requestParameters.authToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * セッション履歴を取得  - **character_id**: 特定のキャラクターでフィルター（省略可） - **skip**: スキップするレコード数 - **limit**: 取得する最大レコード数
     * @summary Get Session History
     * @param {GameApiGetSessionHistoryApiV1GameSessionsHistoryGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameApi
     */
    public getSessionHistoryApiV1GameSessionsHistoryGet(requestParameters: GameApiGetSessionHistoryApiV1GameSessionsHistoryGetRequest = {}, options?: RawAxiosRequestConfig) {
        return GameApiFp(this.configuration).getSessionHistoryApiV1GameSessionsHistoryGet(requestParameters.characterId, requestParameters.skip, requestParameters.limit, requestParameters.authToken, options).then((request) => request(this.axios, this.basePath));
    }
}

