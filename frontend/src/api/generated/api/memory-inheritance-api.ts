/* tslint:disable */
/* eslint-disable */
/**
 * GESTALOKA API
 * マルチプレイ・テキストMMO - ゲスタロカ API
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from '../base'
// @ts-ignore
import type { HTTPValidationError } from '../models'
// @ts-ignore
import type { InheritanceHistoryEntry } from '../models'
// @ts-ignore
import type { MemoryCombinationPreview } from '../models'
// @ts-ignore
import type { MemoryInheritanceRequest } from '../models'
// @ts-ignore
import type { MemoryInheritanceResult } from '../models'
/**
 * MemoryInheritanceApi - axios parameter creator
 * @export
 */
export const MemoryInheritanceApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * 指定した記憶フラグメントを組み合わせて新しい価値を創造
     * @summary 記憶継承の実行
     * @param {string} characterId
     * @param {MemoryInheritanceRequest} memoryInheritanceRequest
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeInheritanceApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceExecutePost:
      async (
        characterId: string,
        memoryInheritanceRequest: MemoryInheritanceRequest,
        authToken?: string | null,
        options: RawAxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'characterId' is not null or undefined
        assertParamExists(
          'executeInheritanceApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceExecutePost',
          'characterId',
          characterId
        )
        // verify required parameter 'memoryInheritanceRequest' is not null or undefined
        assertParamExists(
          'executeInheritanceApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceExecutePost',
          'memoryInheritanceRequest',
          memoryInheritanceRequest
        )
        const localVarPath =
          `/api/v1/memory-inheritance/characters/{character_id}/memory-inheritance/execute`.replace(
            `{${'character_id'}}`,
            encodeURIComponent(String(characterId))
          )
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
        let baseOptions
        if (configuration) {
          baseOptions = configuration.baseOptions
        }

        const localVarRequestOptions = {
          method: 'POST',
          ...baseOptions,
          ...options,
        }
        const localVarHeaderParameter = {} as any
        const localVarQueryParameter = {} as any

        // authentication OAuth2PasswordBearer required
        // oauth required
        await setOAuthToObject(
          localVarHeaderParameter,
          'OAuth2PasswordBearer',
          [],
          configuration
        )

        localVarHeaderParameter['Content-Type'] = 'application/json'

        setSearchParams(localVarUrlObj, localVarQueryParameter)
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {}
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        }
        localVarRequestOptions.data = serializeDataIfNeeded(
          memoryInheritanceRequest,
          localVarRequestOptions,
          configuration
        )

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        }
      },
    /**
     * 指定した記憶フラグメントの組み合わせで可能な継承タイプとその効果をプレビュー
     * @summary 記憶組み合わせのプレビュー取得
     * @param {string} characterId
     * @param {Array<string>} requestBody
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCombinationPreviewApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritancePreviewGet:
      async (
        characterId: string,
        requestBody: Array<string>,
        authToken?: string | null,
        options: RawAxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'characterId' is not null or undefined
        assertParamExists(
          'getCombinationPreviewApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritancePreviewGet',
          'characterId',
          characterId
        )
        // verify required parameter 'requestBody' is not null or undefined
        assertParamExists(
          'getCombinationPreviewApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritancePreviewGet',
          'requestBody',
          requestBody
        )
        const localVarPath =
          `/api/v1/memory-inheritance/characters/{character_id}/memory-inheritance/preview`.replace(
            `{${'character_id'}}`,
            encodeURIComponent(String(characterId))
          )
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
        let baseOptions
        if (configuration) {
          baseOptions = configuration.baseOptions
        }

        const localVarRequestOptions = {
          method: 'GET',
          ...baseOptions,
          ...options,
        }
        const localVarHeaderParameter = {} as any
        const localVarQueryParameter = {} as any

        // authentication OAuth2PasswordBearer required
        // oauth required
        await setOAuthToObject(
          localVarHeaderParameter,
          'OAuth2PasswordBearer',
          [],
          configuration
        )

        localVarHeaderParameter['Content-Type'] = 'application/json'

        setSearchParams(localVarUrlObj, localVarQueryParameter)
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {}
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        }
        localVarRequestOptions.data = serializeDataIfNeeded(
          requestBody,
          localVarRequestOptions,
          configuration
        )

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        }
      },
    /**
     * 過去の記憶継承履歴を取得
     * @summary 記憶継承履歴の取得
     * @param {string} characterId
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInheritanceHistoryApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceHistoryGet:
      async (
        characterId: string,
        limit?: number,
        offset?: number,
        authToken?: string | null,
        options: RawAxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'characterId' is not null or undefined
        assertParamExists(
          'getInheritanceHistoryApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceHistoryGet',
          'characterId',
          characterId
        )
        const localVarPath =
          `/api/v1/memory-inheritance/characters/{character_id}/memory-inheritance/history`.replace(
            `{${'character_id'}}`,
            encodeURIComponent(String(characterId))
          )
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
        let baseOptions
        if (configuration) {
          baseOptions = configuration.baseOptions
        }

        const localVarRequestOptions = {
          method: 'GET',
          ...baseOptions,
          ...options,
        }
        const localVarHeaderParameter = {} as any
        const localVarQueryParameter = {} as any

        // authentication OAuth2PasswordBearer required
        // oauth required
        await setOAuthToObject(
          localVarHeaderParameter,
          'OAuth2PasswordBearer',
          [],
          configuration
        )

        if (limit !== undefined) {
          localVarQueryParameter['limit'] = limit
        }

        if (offset !== undefined) {
          localVarQueryParameter['offset'] = offset
        }

        setSearchParams(localVarUrlObj, localVarQueryParameter)
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {}
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        }

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        }
      },
    /**
     * キャラクターが保有するログ強化効果の一覧を取得
     * @summary ログ強化情報の取得
     * @param {string} characterId
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLogEnhancementsApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceEnhancementsGet:
      async (
        characterId: string,
        authToken?: string | null,
        options: RawAxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'characterId' is not null or undefined
        assertParamExists(
          'getLogEnhancementsApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceEnhancementsGet',
          'characterId',
          characterId
        )
        const localVarPath =
          `/api/v1/memory-inheritance/characters/{character_id}/memory-inheritance/enhancements`.replace(
            `{${'character_id'}}`,
            encodeURIComponent(String(characterId))
          )
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
        let baseOptions
        if (configuration) {
          baseOptions = configuration.baseOptions
        }

        const localVarRequestOptions = {
          method: 'GET',
          ...baseOptions,
          ...options,
        }
        const localVarHeaderParameter = {} as any
        const localVarQueryParameter = {} as any

        // authentication OAuth2PasswordBearer required
        // oauth required
        await setOAuthToObject(
          localVarHeaderParameter,
          'OAuth2PasswordBearer',
          [],
          configuration
        )

        setSearchParams(localVarUrlObj, localVarQueryParameter)
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {}
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        }

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        }
      },
  }
}

/**
 * MemoryInheritanceApi - functional programming interface
 * @export
 */
export const MemoryInheritanceApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    MemoryInheritanceApiAxiosParamCreator(configuration)
  return {
    /**
     * 指定した記憶フラグメントを組み合わせて新しい価値を創造
     * @summary 記憶継承の実行
     * @param {string} characterId
     * @param {MemoryInheritanceRequest} memoryInheritanceRequest
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async executeInheritanceApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceExecutePost(
      characterId: string,
      memoryInheritanceRequest: MemoryInheritanceRequest,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<MemoryInheritanceResult>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.executeInheritanceApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceExecutePost(
          characterId,
          memoryInheritanceRequest,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'MemoryInheritanceApi.executeInheritanceApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceExecutePost'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * 指定した記憶フラグメントの組み合わせで可能な継承タイプとその効果をプレビュー
     * @summary 記憶組み合わせのプレビュー取得
     * @param {string} characterId
     * @param {Array<string>} requestBody
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCombinationPreviewApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritancePreviewGet(
      characterId: string,
      requestBody: Array<string>,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<MemoryCombinationPreview>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getCombinationPreviewApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritancePreviewGet(
          characterId,
          requestBody,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'MemoryInheritanceApi.getCombinationPreviewApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritancePreviewGet'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * 過去の記憶継承履歴を取得
     * @summary 記憶継承履歴の取得
     * @param {string} characterId
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getInheritanceHistoryApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceHistoryGet(
      characterId: string,
      limit?: number,
      offset?: number,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<InheritanceHistoryEntry>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getInheritanceHistoryApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceHistoryGet(
          characterId,
          limit,
          offset,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'MemoryInheritanceApi.getInheritanceHistoryApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceHistoryGet'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * キャラクターが保有するログ強化効果の一覧を取得
     * @summary ログ強化情報の取得
     * @param {string} characterId
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getLogEnhancementsApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceEnhancementsGet(
      characterId: string,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getLogEnhancementsApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceEnhancementsGet(
          characterId,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'MemoryInheritanceApi.getLogEnhancementsApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceEnhancementsGet'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * MemoryInheritanceApi - factory interface
 * @export
 */
export const MemoryInheritanceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = MemoryInheritanceApiFp(configuration)
  return {
    /**
     * 指定した記憶フラグメントを組み合わせて新しい価値を創造
     * @summary 記憶継承の実行
     * @param {MemoryInheritanceApiExecuteInheritanceApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceExecutePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeInheritanceApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceExecutePost(
      requestParameters: MemoryInheritanceApiExecuteInheritanceApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceExecutePostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<MemoryInheritanceResult> {
      return localVarFp
        .executeInheritanceApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceExecutePost(
          requestParameters.characterId,
          requestParameters.memoryInheritanceRequest,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * 指定した記憶フラグメントの組み合わせで可能な継承タイプとその効果をプレビュー
     * @summary 記憶組み合わせのプレビュー取得
     * @param {MemoryInheritanceApiGetCombinationPreviewApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritancePreviewGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCombinationPreviewApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritancePreviewGet(
      requestParameters: MemoryInheritanceApiGetCombinationPreviewApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritancePreviewGetRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<MemoryCombinationPreview> {
      return localVarFp
        .getCombinationPreviewApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritancePreviewGet(
          requestParameters.characterId,
          requestParameters.requestBody,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * 過去の記憶継承履歴を取得
     * @summary 記憶継承履歴の取得
     * @param {MemoryInheritanceApiGetInheritanceHistoryApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceHistoryGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInheritanceHistoryApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceHistoryGet(
      requestParameters: MemoryInheritanceApiGetInheritanceHistoryApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceHistoryGetRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Array<InheritanceHistoryEntry>> {
      return localVarFp
        .getInheritanceHistoryApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceHistoryGet(
          requestParameters.characterId,
          requestParameters.limit,
          requestParameters.offset,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * キャラクターが保有するログ強化効果の一覧を取得
     * @summary ログ強化情報の取得
     * @param {MemoryInheritanceApiGetLogEnhancementsApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceEnhancementsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLogEnhancementsApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceEnhancementsGet(
      requestParameters: MemoryInheritanceApiGetLogEnhancementsApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceEnhancementsGetRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Array<object>> {
      return localVarFp
        .getLogEnhancementsApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceEnhancementsGet(
          requestParameters.characterId,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
  }
}

/**
 * MemoryInheritanceApi - interface
 * @export
 * @interface MemoryInheritanceApi
 */
export interface MemoryInheritanceApiInterface {
  /**
   * 指定した記憶フラグメントを組み合わせて新しい価値を創造
   * @summary 記憶継承の実行
   * @param {MemoryInheritanceApiExecuteInheritanceApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceExecutePostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemoryInheritanceApiInterface
   */
  executeInheritanceApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceExecutePost(
    requestParameters: MemoryInheritanceApiExecuteInheritanceApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceExecutePostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<MemoryInheritanceResult>

  /**
   * 指定した記憶フラグメントの組み合わせで可能な継承タイプとその効果をプレビュー
   * @summary 記憶組み合わせのプレビュー取得
   * @param {MemoryInheritanceApiGetCombinationPreviewApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritancePreviewGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemoryInheritanceApiInterface
   */
  getCombinationPreviewApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritancePreviewGet(
    requestParameters: MemoryInheritanceApiGetCombinationPreviewApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritancePreviewGetRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<MemoryCombinationPreview>

  /**
   * 過去の記憶継承履歴を取得
   * @summary 記憶継承履歴の取得
   * @param {MemoryInheritanceApiGetInheritanceHistoryApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceHistoryGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemoryInheritanceApiInterface
   */
  getInheritanceHistoryApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceHistoryGet(
    requestParameters: MemoryInheritanceApiGetInheritanceHistoryApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceHistoryGetRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Array<InheritanceHistoryEntry>>

  /**
   * キャラクターが保有するログ強化効果の一覧を取得
   * @summary ログ強化情報の取得
   * @param {MemoryInheritanceApiGetLogEnhancementsApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceEnhancementsGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemoryInheritanceApiInterface
   */
  getLogEnhancementsApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceEnhancementsGet(
    requestParameters: MemoryInheritanceApiGetLogEnhancementsApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceEnhancementsGetRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Array<object>>
}

/**
 * Request parameters for executeInheritanceApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceExecutePost operation in MemoryInheritanceApi.
 * @export
 * @interface MemoryInheritanceApiExecuteInheritanceApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceExecutePostRequest
 */
export interface MemoryInheritanceApiExecuteInheritanceApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceExecutePostRequest {
  /**
   *
   * @type {string}
   * @memberof MemoryInheritanceApiExecuteInheritanceApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceExecutePost
   */
  readonly characterId: string

  /**
   *
   * @type {MemoryInheritanceRequest}
   * @memberof MemoryInheritanceApiExecuteInheritanceApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceExecutePost
   */
  readonly memoryInheritanceRequest: MemoryInheritanceRequest

  /**
   *
   * @type {string}
   * @memberof MemoryInheritanceApiExecuteInheritanceApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceExecutePost
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for getCombinationPreviewApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritancePreviewGet operation in MemoryInheritanceApi.
 * @export
 * @interface MemoryInheritanceApiGetCombinationPreviewApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritancePreviewGetRequest
 */
export interface MemoryInheritanceApiGetCombinationPreviewApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritancePreviewGetRequest {
  /**
   *
   * @type {string}
   * @memberof MemoryInheritanceApiGetCombinationPreviewApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritancePreviewGet
   */
  readonly characterId: string

  /**
   *
   * @type {Array<string>}
   * @memberof MemoryInheritanceApiGetCombinationPreviewApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritancePreviewGet
   */
  readonly requestBody: Array<string>

  /**
   *
   * @type {string}
   * @memberof MemoryInheritanceApiGetCombinationPreviewApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritancePreviewGet
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for getInheritanceHistoryApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceHistoryGet operation in MemoryInheritanceApi.
 * @export
 * @interface MemoryInheritanceApiGetInheritanceHistoryApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceHistoryGetRequest
 */
export interface MemoryInheritanceApiGetInheritanceHistoryApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceHistoryGetRequest {
  /**
   *
   * @type {string}
   * @memberof MemoryInheritanceApiGetInheritanceHistoryApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceHistoryGet
   */
  readonly characterId: string

  /**
   *
   * @type {number}
   * @memberof MemoryInheritanceApiGetInheritanceHistoryApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceHistoryGet
   */
  readonly limit?: number

  /**
   *
   * @type {number}
   * @memberof MemoryInheritanceApiGetInheritanceHistoryApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceHistoryGet
   */
  readonly offset?: number

  /**
   *
   * @type {string}
   * @memberof MemoryInheritanceApiGetInheritanceHistoryApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceHistoryGet
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for getLogEnhancementsApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceEnhancementsGet operation in MemoryInheritanceApi.
 * @export
 * @interface MemoryInheritanceApiGetLogEnhancementsApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceEnhancementsGetRequest
 */
export interface MemoryInheritanceApiGetLogEnhancementsApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceEnhancementsGetRequest {
  /**
   *
   * @type {string}
   * @memberof MemoryInheritanceApiGetLogEnhancementsApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceEnhancementsGet
   */
  readonly characterId: string

  /**
   *
   * @type {string}
   * @memberof MemoryInheritanceApiGetLogEnhancementsApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceEnhancementsGet
   */
  readonly authToken?: string | null
}

/**
 * MemoryInheritanceApi - object-oriented interface
 * @export
 * @class MemoryInheritanceApi
 * @extends {BaseAPI}
 */
export class MemoryInheritanceApi
  extends BaseAPI
  implements MemoryInheritanceApiInterface
{
  /**
   * 指定した記憶フラグメントを組み合わせて新しい価値を創造
   * @summary 記憶継承の実行
   * @param {MemoryInheritanceApiExecuteInheritanceApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceExecutePostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemoryInheritanceApi
   */
  public executeInheritanceApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceExecutePost(
    requestParameters: MemoryInheritanceApiExecuteInheritanceApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceExecutePostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return MemoryInheritanceApiFp(this.configuration)
      .executeInheritanceApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceExecutePost(
        requestParameters.characterId,
        requestParameters.memoryInheritanceRequest,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * 指定した記憶フラグメントの組み合わせで可能な継承タイプとその効果をプレビュー
   * @summary 記憶組み合わせのプレビュー取得
   * @param {MemoryInheritanceApiGetCombinationPreviewApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritancePreviewGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemoryInheritanceApi
   */
  public getCombinationPreviewApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritancePreviewGet(
    requestParameters: MemoryInheritanceApiGetCombinationPreviewApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritancePreviewGetRequest,
    options?: RawAxiosRequestConfig
  ) {
    return MemoryInheritanceApiFp(this.configuration)
      .getCombinationPreviewApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritancePreviewGet(
        requestParameters.characterId,
        requestParameters.requestBody,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * 過去の記憶継承履歴を取得
   * @summary 記憶継承履歴の取得
   * @param {MemoryInheritanceApiGetInheritanceHistoryApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceHistoryGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemoryInheritanceApi
   */
  public getInheritanceHistoryApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceHistoryGet(
    requestParameters: MemoryInheritanceApiGetInheritanceHistoryApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceHistoryGetRequest,
    options?: RawAxiosRequestConfig
  ) {
    return MemoryInheritanceApiFp(this.configuration)
      .getInheritanceHistoryApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceHistoryGet(
        requestParameters.characterId,
        requestParameters.limit,
        requestParameters.offset,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * キャラクターが保有するログ強化効果の一覧を取得
   * @summary ログ強化情報の取得
   * @param {MemoryInheritanceApiGetLogEnhancementsApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceEnhancementsGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemoryInheritanceApi
   */
  public getLogEnhancementsApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceEnhancementsGet(
    requestParameters: MemoryInheritanceApiGetLogEnhancementsApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceEnhancementsGetRequest,
    options?: RawAxiosRequestConfig
  ) {
    return MemoryInheritanceApiFp(this.configuration)
      .getLogEnhancementsApiV1MemoryInheritanceCharactersCharacterIdMemoryInheritanceEnhancementsGet(
        requestParameters.characterId,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }
}
