/* tslint:disable */
/* eslint-disable */
/**
 * GESTALOKA API
 * マルチプレイ・テキストMMO - ゲスタロカ API
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from '../base'
// @ts-ignore
import type { CharacterTitleRead } from '../models'
// @ts-ignore
import type { HTTPValidationError } from '../models'
/**
 * TitlesApi - axios parameter creator
 * @export
 */
export const TitlesApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Equip a specific title.
     * @summary Equip Title
     * @param {string} titleId
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    equipTitleApiV1TitlesTitleIdEquipPut: async (
      titleId: string,
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'titleId' is not null or undefined
      assertParamExists(
        'equipTitleApiV1TitlesTitleIdEquipPut',
        'titleId',
        titleId
      )
      const localVarPath = `/api/v1/titles/{title_id}/equip`.replace(
        `{${'title_id'}}`,
        encodeURIComponent(String(titleId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get all titles for the current user\'s character.
     * @summary Get Character Titles
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCharacterTitlesApiV1TitlesGet: async (
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/titles/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get the currently equipped title.
     * @summary Get Equipped Title
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEquippedTitleApiV1TitlesEquippedGet: async (
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/titles/equipped`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Unequip all titles.
     * @summary Unequip All Titles
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unequipAllTitlesApiV1TitlesUnequipPut: async (
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/titles/unequip`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * TitlesApi - functional programming interface
 * @export
 */
export const TitlesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TitlesApiAxiosParamCreator(configuration)
  return {
    /**
     * Equip a specific title.
     * @summary Equip Title
     * @param {string} titleId
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async equipTitleApiV1TitlesTitleIdEquipPut(
      titleId: string,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CharacterTitleRead>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.equipTitleApiV1TitlesTitleIdEquipPut(
          titleId,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['TitlesApi.equipTitleApiV1TitlesTitleIdEquipPut']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Get all titles for the current user\'s character.
     * @summary Get Character Titles
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCharacterTitlesApiV1TitlesGet(
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<CharacterTitleRead>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getCharacterTitlesApiV1TitlesGet(
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['TitlesApi.getCharacterTitlesApiV1TitlesGet']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Get the currently equipped title.
     * @summary Get Equipped Title
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEquippedTitleApiV1TitlesEquippedGet(
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CharacterTitleRead>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getEquippedTitleApiV1TitlesEquippedGet(
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'TitlesApi.getEquippedTitleApiV1TitlesEquippedGet'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Unequip all titles.
     * @summary Unequip All Titles
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async unequipAllTitlesApiV1TitlesUnequipPut(
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.unequipAllTitlesApiV1TitlesUnequipPut(
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['TitlesApi.unequipAllTitlesApiV1TitlesUnequipPut']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * TitlesApi - factory interface
 * @export
 */
export const TitlesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = TitlesApiFp(configuration)
  return {
    /**
     * Equip a specific title.
     * @summary Equip Title
     * @param {TitlesApiEquipTitleApiV1TitlesTitleIdEquipPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    equipTitleApiV1TitlesTitleIdEquipPut(
      requestParameters: TitlesApiEquipTitleApiV1TitlesTitleIdEquipPutRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<CharacterTitleRead> {
      return localVarFp
        .equipTitleApiV1TitlesTitleIdEquipPut(
          requestParameters.titleId,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Get all titles for the current user\'s character.
     * @summary Get Character Titles
     * @param {TitlesApiGetCharacterTitlesApiV1TitlesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCharacterTitlesApiV1TitlesGet(
      requestParameters: TitlesApiGetCharacterTitlesApiV1TitlesGetRequest = {},
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Array<CharacterTitleRead>> {
      return localVarFp
        .getCharacterTitlesApiV1TitlesGet(requestParameters.authToken, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Get the currently equipped title.
     * @summary Get Equipped Title
     * @param {TitlesApiGetEquippedTitleApiV1TitlesEquippedGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEquippedTitleApiV1TitlesEquippedGet(
      requestParameters: TitlesApiGetEquippedTitleApiV1TitlesEquippedGetRequest = {},
      options?: RawAxiosRequestConfig
    ): AxiosPromise<CharacterTitleRead> {
      return localVarFp
        .getEquippedTitleApiV1TitlesEquippedGet(
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Unequip all titles.
     * @summary Unequip All Titles
     * @param {TitlesApiUnequipAllTitlesApiV1TitlesUnequipPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unequipAllTitlesApiV1TitlesUnequipPut(
      requestParameters: TitlesApiUnequipAllTitlesApiV1TitlesUnequipPutRequest = {},
      options?: RawAxiosRequestConfig
    ): AxiosPromise<object> {
      return localVarFp
        .unequipAllTitlesApiV1TitlesUnequipPut(
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
  }
}

/**
 * TitlesApi - interface
 * @export
 * @interface TitlesApi
 */
export interface TitlesApiInterface {
  /**
   * Equip a specific title.
   * @summary Equip Title
   * @param {TitlesApiEquipTitleApiV1TitlesTitleIdEquipPutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TitlesApiInterface
   */
  equipTitleApiV1TitlesTitleIdEquipPut(
    requestParameters: TitlesApiEquipTitleApiV1TitlesTitleIdEquipPutRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<CharacterTitleRead>

  /**
   * Get all titles for the current user\'s character.
   * @summary Get Character Titles
   * @param {TitlesApiGetCharacterTitlesApiV1TitlesGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TitlesApiInterface
   */
  getCharacterTitlesApiV1TitlesGet(
    requestParameters?: TitlesApiGetCharacterTitlesApiV1TitlesGetRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Array<CharacterTitleRead>>

  /**
   * Get the currently equipped title.
   * @summary Get Equipped Title
   * @param {TitlesApiGetEquippedTitleApiV1TitlesEquippedGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TitlesApiInterface
   */
  getEquippedTitleApiV1TitlesEquippedGet(
    requestParameters?: TitlesApiGetEquippedTitleApiV1TitlesEquippedGetRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<CharacterTitleRead>

  /**
   * Unequip all titles.
   * @summary Unequip All Titles
   * @param {TitlesApiUnequipAllTitlesApiV1TitlesUnequipPutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TitlesApiInterface
   */
  unequipAllTitlesApiV1TitlesUnequipPut(
    requestParameters?: TitlesApiUnequipAllTitlesApiV1TitlesUnequipPutRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<object>
}

/**
 * Request parameters for equipTitleApiV1TitlesTitleIdEquipPut operation in TitlesApi.
 * @export
 * @interface TitlesApiEquipTitleApiV1TitlesTitleIdEquipPutRequest
 */
export interface TitlesApiEquipTitleApiV1TitlesTitleIdEquipPutRequest {
  /**
   *
   * @type {string}
   * @memberof TitlesApiEquipTitleApiV1TitlesTitleIdEquipPut
   */
  readonly titleId: string

  /**
   *
   * @type {string}
   * @memberof TitlesApiEquipTitleApiV1TitlesTitleIdEquipPut
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for getCharacterTitlesApiV1TitlesGet operation in TitlesApi.
 * @export
 * @interface TitlesApiGetCharacterTitlesApiV1TitlesGetRequest
 */
export interface TitlesApiGetCharacterTitlesApiV1TitlesGetRequest {
  /**
   *
   * @type {string}
   * @memberof TitlesApiGetCharacterTitlesApiV1TitlesGet
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for getEquippedTitleApiV1TitlesEquippedGet operation in TitlesApi.
 * @export
 * @interface TitlesApiGetEquippedTitleApiV1TitlesEquippedGetRequest
 */
export interface TitlesApiGetEquippedTitleApiV1TitlesEquippedGetRequest {
  /**
   *
   * @type {string}
   * @memberof TitlesApiGetEquippedTitleApiV1TitlesEquippedGet
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for unequipAllTitlesApiV1TitlesUnequipPut operation in TitlesApi.
 * @export
 * @interface TitlesApiUnequipAllTitlesApiV1TitlesUnequipPutRequest
 */
export interface TitlesApiUnequipAllTitlesApiV1TitlesUnequipPutRequest {
  /**
   *
   * @type {string}
   * @memberof TitlesApiUnequipAllTitlesApiV1TitlesUnequipPut
   */
  readonly authToken?: string | null
}

/**
 * TitlesApi - object-oriented interface
 * @export
 * @class TitlesApi
 * @extends {BaseAPI}
 */
export class TitlesApi extends BaseAPI implements TitlesApiInterface {
  /**
   * Equip a specific title.
   * @summary Equip Title
   * @param {TitlesApiEquipTitleApiV1TitlesTitleIdEquipPutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TitlesApi
   */
  public equipTitleApiV1TitlesTitleIdEquipPut(
    requestParameters: TitlesApiEquipTitleApiV1TitlesTitleIdEquipPutRequest,
    options?: RawAxiosRequestConfig
  ) {
    return TitlesApiFp(this.configuration)
      .equipTitleApiV1TitlesTitleIdEquipPut(
        requestParameters.titleId,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get all titles for the current user\'s character.
   * @summary Get Character Titles
   * @param {TitlesApiGetCharacterTitlesApiV1TitlesGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TitlesApi
   */
  public getCharacterTitlesApiV1TitlesGet(
    requestParameters: TitlesApiGetCharacterTitlesApiV1TitlesGetRequest = {},
    options?: RawAxiosRequestConfig
  ) {
    return TitlesApiFp(this.configuration)
      .getCharacterTitlesApiV1TitlesGet(requestParameters.authToken, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get the currently equipped title.
   * @summary Get Equipped Title
   * @param {TitlesApiGetEquippedTitleApiV1TitlesEquippedGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TitlesApi
   */
  public getEquippedTitleApiV1TitlesEquippedGet(
    requestParameters: TitlesApiGetEquippedTitleApiV1TitlesEquippedGetRequest = {},
    options?: RawAxiosRequestConfig
  ) {
    return TitlesApiFp(this.configuration)
      .getEquippedTitleApiV1TitlesEquippedGet(
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Unequip all titles.
   * @summary Unequip All Titles
   * @param {TitlesApiUnequipAllTitlesApiV1TitlesUnequipPutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TitlesApi
   */
  public unequipAllTitlesApiV1TitlesUnequipPut(
    requestParameters: TitlesApiUnequipAllTitlesApiV1TitlesUnequipPutRequest = {},
    options?: RawAxiosRequestConfig
  ) {
    return TitlesApiFp(this.configuration)
      .unequipAllTitlesApiV1TitlesUnequipPut(
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }
}
