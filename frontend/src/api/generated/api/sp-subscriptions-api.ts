// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * GESTALOKA API
 * マルチプレイ・テキストMMO - ゲスタロカ API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { SPSubscriptionCancel } from '../models';
// @ts-ignore
import type { SPSubscriptionCreate } from '../models';
// @ts-ignore
import type { SPSubscriptionListResponse } from '../models';
// @ts-ignore
import type { SPSubscriptionPurchaseResponse } from '../models';
// @ts-ignore
import type { SPSubscriptionResponse } from '../models';
// @ts-ignore
import type { SPSubscriptionUpdate } from '../models';
// @ts-ignore
import type { SubscriptionPlansResponse } from '../models';
/**
 * SpSubscriptionsApi - axios parameter creator
 * @export
 */
export const SpSubscriptionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * サブスクリプションをキャンセル  Args:     data: キャンセルデータ  Returns:     dict: キャンセル結果  Raises:     HTTPException: キャンセルに失敗した場合
         * @summary Cancel Subscription
         * @param {SPSubscriptionCancel} sPSubscriptionCancel 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSubscriptionApiV1SpSubscriptionsCancelPost: async (sPSubscriptionCancel: SPSubscriptionCancel, authToken?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sPSubscriptionCancel' is not null or undefined
            assertParamExists('cancelSubscriptionApiV1SpSubscriptionsCancelPost', 'sPSubscriptionCancel', sPSubscriptionCancel)
            const localVarPath = `/api/v1/sp/subscriptions/cancel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sPSubscriptionCancel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 現在有効なサブスクリプションを取得  Returns:     SPSubscriptionResponse: 現在のサブスクリプション情報  Raises:     HTTPException: 有効なサブスクリプションがない場合
         * @summary Get Current Subscription
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentSubscriptionApiV1SpSubscriptionsCurrentGet: async (authToken?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/sp/subscriptions/current`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * サブスクリプション履歴を取得  Returns:     SPSubscriptionListResponse: サブスクリプション履歴
         * @summary Get Subscription History
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionHistoryApiV1SpSubscriptionsHistoryGet: async (authToken?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/sp/subscriptions/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 利用可能なサブスクリプションプラン一覧を取得  Returns:     SubscriptionPlansResponse: プラン一覧と現在のサブスクリプション情報
         * @summary Get Subscription Plans
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionPlansApiV1SpSubscriptionsPlansGet: async (authToken?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/sp/subscriptions/plans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * サブスクリプションを購入  Args:     data: サブスクリプション作成データ  Returns:     SPSubscriptionPurchaseResponse: 購入結果  Raises:     HTTPException: 購入に失敗した場合
         * @summary Purchase Subscription
         * @param {SPSubscriptionCreate} sPSubscriptionCreate 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseSubscriptionApiV1SpSubscriptionsPurchasePost: async (sPSubscriptionCreate: SPSubscriptionCreate, authToken?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sPSubscriptionCreate' is not null or undefined
            assertParamExists('purchaseSubscriptionApiV1SpSubscriptionsPurchasePost', 'sPSubscriptionCreate', sPSubscriptionCreate)
            const localVarPath = `/api/v1/sp/subscriptions/purchase`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sPSubscriptionCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * サブスクリプションを更新（自動更新設定、決済方法など）  Args:     data: 更新データ  Returns:     dict: 更新結果  Raises:     HTTPException: 更新に失敗した場合
         * @summary Update Subscription
         * @param {SPSubscriptionUpdate} sPSubscriptionUpdate 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscriptionApiV1SpSubscriptionsUpdatePut: async (sPSubscriptionUpdate: SPSubscriptionUpdate, authToken?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sPSubscriptionUpdate' is not null or undefined
            assertParamExists('updateSubscriptionApiV1SpSubscriptionsUpdatePut', 'sPSubscriptionUpdate', sPSubscriptionUpdate)
            const localVarPath = `/api/v1/sp/subscriptions/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sPSubscriptionUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SpSubscriptionsApi - functional programming interface
 * @export
 */
export const SpSubscriptionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SpSubscriptionsApiAxiosParamCreator(configuration)
    return {
        /**
         * サブスクリプションをキャンセル  Args:     data: キャンセルデータ  Returns:     dict: キャンセル結果  Raises:     HTTPException: キャンセルに失敗した場合
         * @summary Cancel Subscription
         * @param {SPSubscriptionCancel} sPSubscriptionCancel 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelSubscriptionApiV1SpSubscriptionsCancelPost(sPSubscriptionCancel: SPSubscriptionCancel, authToken?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelSubscriptionApiV1SpSubscriptionsCancelPost(sPSubscriptionCancel, authToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpSubscriptionsApi.cancelSubscriptionApiV1SpSubscriptionsCancelPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 現在有効なサブスクリプションを取得  Returns:     SPSubscriptionResponse: 現在のサブスクリプション情報  Raises:     HTTPException: 有効なサブスクリプションがない場合
         * @summary Get Current Subscription
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentSubscriptionApiV1SpSubscriptionsCurrentGet(authToken?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SPSubscriptionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentSubscriptionApiV1SpSubscriptionsCurrentGet(authToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpSubscriptionsApi.getCurrentSubscriptionApiV1SpSubscriptionsCurrentGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * サブスクリプション履歴を取得  Returns:     SPSubscriptionListResponse: サブスクリプション履歴
         * @summary Get Subscription History
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscriptionHistoryApiV1SpSubscriptionsHistoryGet(authToken?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SPSubscriptionListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubscriptionHistoryApiV1SpSubscriptionsHistoryGet(authToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpSubscriptionsApi.getSubscriptionHistoryApiV1SpSubscriptionsHistoryGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 利用可能なサブスクリプションプラン一覧を取得  Returns:     SubscriptionPlansResponse: プラン一覧と現在のサブスクリプション情報
         * @summary Get Subscription Plans
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscriptionPlansApiV1SpSubscriptionsPlansGet(authToken?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionPlansResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubscriptionPlansApiV1SpSubscriptionsPlansGet(authToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpSubscriptionsApi.getSubscriptionPlansApiV1SpSubscriptionsPlansGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * サブスクリプションを購入  Args:     data: サブスクリプション作成データ  Returns:     SPSubscriptionPurchaseResponse: 購入結果  Raises:     HTTPException: 購入に失敗した場合
         * @summary Purchase Subscription
         * @param {SPSubscriptionCreate} sPSubscriptionCreate 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async purchaseSubscriptionApiV1SpSubscriptionsPurchasePost(sPSubscriptionCreate: SPSubscriptionCreate, authToken?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SPSubscriptionPurchaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.purchaseSubscriptionApiV1SpSubscriptionsPurchasePost(sPSubscriptionCreate, authToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpSubscriptionsApi.purchaseSubscriptionApiV1SpSubscriptionsPurchasePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * サブスクリプションを更新（自動更新設定、決済方法など）  Args:     data: 更新データ  Returns:     dict: 更新結果  Raises:     HTTPException: 更新に失敗した場合
         * @summary Update Subscription
         * @param {SPSubscriptionUpdate} sPSubscriptionUpdate 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSubscriptionApiV1SpSubscriptionsUpdatePut(sPSubscriptionUpdate: SPSubscriptionUpdate, authToken?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSubscriptionApiV1SpSubscriptionsUpdatePut(sPSubscriptionUpdate, authToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpSubscriptionsApi.updateSubscriptionApiV1SpSubscriptionsUpdatePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SpSubscriptionsApi - factory interface
 * @export
 */
export const SpSubscriptionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SpSubscriptionsApiFp(configuration)
    return {
        /**
         * サブスクリプションをキャンセル  Args:     data: キャンセルデータ  Returns:     dict: キャンセル結果  Raises:     HTTPException: キャンセルに失敗した場合
         * @summary Cancel Subscription
         * @param {SpSubscriptionsApiCancelSubscriptionApiV1SpSubscriptionsCancelPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSubscriptionApiV1SpSubscriptionsCancelPost(requestParameters: SpSubscriptionsApiCancelSubscriptionApiV1SpSubscriptionsCancelPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.cancelSubscriptionApiV1SpSubscriptionsCancelPost(requestParameters.sPSubscriptionCancel, requestParameters.authToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 現在有効なサブスクリプションを取得  Returns:     SPSubscriptionResponse: 現在のサブスクリプション情報  Raises:     HTTPException: 有効なサブスクリプションがない場合
         * @summary Get Current Subscription
         * @param {SpSubscriptionsApiGetCurrentSubscriptionApiV1SpSubscriptionsCurrentGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentSubscriptionApiV1SpSubscriptionsCurrentGet(requestParameters: SpSubscriptionsApiGetCurrentSubscriptionApiV1SpSubscriptionsCurrentGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<SPSubscriptionResponse> {
            return localVarFp.getCurrentSubscriptionApiV1SpSubscriptionsCurrentGet(requestParameters.authToken, options).then((request) => request(axios, basePath));
        },
        /**
         * サブスクリプション履歴を取得  Returns:     SPSubscriptionListResponse: サブスクリプション履歴
         * @summary Get Subscription History
         * @param {SpSubscriptionsApiGetSubscriptionHistoryApiV1SpSubscriptionsHistoryGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionHistoryApiV1SpSubscriptionsHistoryGet(requestParameters: SpSubscriptionsApiGetSubscriptionHistoryApiV1SpSubscriptionsHistoryGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<SPSubscriptionListResponse> {
            return localVarFp.getSubscriptionHistoryApiV1SpSubscriptionsHistoryGet(requestParameters.authToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 利用可能なサブスクリプションプラン一覧を取得  Returns:     SubscriptionPlansResponse: プラン一覧と現在のサブスクリプション情報
         * @summary Get Subscription Plans
         * @param {SpSubscriptionsApiGetSubscriptionPlansApiV1SpSubscriptionsPlansGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionPlansApiV1SpSubscriptionsPlansGet(requestParameters: SpSubscriptionsApiGetSubscriptionPlansApiV1SpSubscriptionsPlansGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<SubscriptionPlansResponse> {
            return localVarFp.getSubscriptionPlansApiV1SpSubscriptionsPlansGet(requestParameters.authToken, options).then((request) => request(axios, basePath));
        },
        /**
         * サブスクリプションを購入  Args:     data: サブスクリプション作成データ  Returns:     SPSubscriptionPurchaseResponse: 購入結果  Raises:     HTTPException: 購入に失敗した場合
         * @summary Purchase Subscription
         * @param {SpSubscriptionsApiPurchaseSubscriptionApiV1SpSubscriptionsPurchasePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseSubscriptionApiV1SpSubscriptionsPurchasePost(requestParameters: SpSubscriptionsApiPurchaseSubscriptionApiV1SpSubscriptionsPurchasePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SPSubscriptionPurchaseResponse> {
            return localVarFp.purchaseSubscriptionApiV1SpSubscriptionsPurchasePost(requestParameters.sPSubscriptionCreate, requestParameters.authToken, options).then((request) => request(axios, basePath));
        },
        /**
         * サブスクリプションを更新（自動更新設定、決済方法など）  Args:     data: 更新データ  Returns:     dict: 更新結果  Raises:     HTTPException: 更新に失敗した場合
         * @summary Update Subscription
         * @param {SpSubscriptionsApiUpdateSubscriptionApiV1SpSubscriptionsUpdatePutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscriptionApiV1SpSubscriptionsUpdatePut(requestParameters: SpSubscriptionsApiUpdateSubscriptionApiV1SpSubscriptionsUpdatePutRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateSubscriptionApiV1SpSubscriptionsUpdatePut(requestParameters.sPSubscriptionUpdate, requestParameters.authToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SpSubscriptionsApi - interface
 * @export
 * @interface SpSubscriptionsApi
 */
export interface SpSubscriptionsApiInterface {
    /**
     * サブスクリプションをキャンセル  Args:     data: キャンセルデータ  Returns:     dict: キャンセル結果  Raises:     HTTPException: キャンセルに失敗した場合
     * @summary Cancel Subscription
     * @param {SpSubscriptionsApiCancelSubscriptionApiV1SpSubscriptionsCancelPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpSubscriptionsApiInterface
     */
    cancelSubscriptionApiV1SpSubscriptionsCancelPost(requestParameters: SpSubscriptionsApiCancelSubscriptionApiV1SpSubscriptionsCancelPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<object>;

    /**
     * 現在有効なサブスクリプションを取得  Returns:     SPSubscriptionResponse: 現在のサブスクリプション情報  Raises:     HTTPException: 有効なサブスクリプションがない場合
     * @summary Get Current Subscription
     * @param {SpSubscriptionsApiGetCurrentSubscriptionApiV1SpSubscriptionsCurrentGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpSubscriptionsApiInterface
     */
    getCurrentSubscriptionApiV1SpSubscriptionsCurrentGet(requestParameters?: SpSubscriptionsApiGetCurrentSubscriptionApiV1SpSubscriptionsCurrentGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<SPSubscriptionResponse>;

    /**
     * サブスクリプション履歴を取得  Returns:     SPSubscriptionListResponse: サブスクリプション履歴
     * @summary Get Subscription History
     * @param {SpSubscriptionsApiGetSubscriptionHistoryApiV1SpSubscriptionsHistoryGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpSubscriptionsApiInterface
     */
    getSubscriptionHistoryApiV1SpSubscriptionsHistoryGet(requestParameters?: SpSubscriptionsApiGetSubscriptionHistoryApiV1SpSubscriptionsHistoryGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<SPSubscriptionListResponse>;

    /**
     * 利用可能なサブスクリプションプラン一覧を取得  Returns:     SubscriptionPlansResponse: プラン一覧と現在のサブスクリプション情報
     * @summary Get Subscription Plans
     * @param {SpSubscriptionsApiGetSubscriptionPlansApiV1SpSubscriptionsPlansGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpSubscriptionsApiInterface
     */
    getSubscriptionPlansApiV1SpSubscriptionsPlansGet(requestParameters?: SpSubscriptionsApiGetSubscriptionPlansApiV1SpSubscriptionsPlansGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<SubscriptionPlansResponse>;

    /**
     * サブスクリプションを購入  Args:     data: サブスクリプション作成データ  Returns:     SPSubscriptionPurchaseResponse: 購入結果  Raises:     HTTPException: 購入に失敗した場合
     * @summary Purchase Subscription
     * @param {SpSubscriptionsApiPurchaseSubscriptionApiV1SpSubscriptionsPurchasePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpSubscriptionsApiInterface
     */
    purchaseSubscriptionApiV1SpSubscriptionsPurchasePost(requestParameters: SpSubscriptionsApiPurchaseSubscriptionApiV1SpSubscriptionsPurchasePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SPSubscriptionPurchaseResponse>;

    /**
     * サブスクリプションを更新（自動更新設定、決済方法など）  Args:     data: 更新データ  Returns:     dict: 更新結果  Raises:     HTTPException: 更新に失敗した場合
     * @summary Update Subscription
     * @param {SpSubscriptionsApiUpdateSubscriptionApiV1SpSubscriptionsUpdatePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpSubscriptionsApiInterface
     */
    updateSubscriptionApiV1SpSubscriptionsUpdatePut(requestParameters: SpSubscriptionsApiUpdateSubscriptionApiV1SpSubscriptionsUpdatePutRequest, options?: RawAxiosRequestConfig): AxiosPromise<object>;

}

/**
 * Request parameters for cancelSubscriptionApiV1SpSubscriptionsCancelPost operation in SpSubscriptionsApi.
 * @export
 * @interface SpSubscriptionsApiCancelSubscriptionApiV1SpSubscriptionsCancelPostRequest
 */
export interface SpSubscriptionsApiCancelSubscriptionApiV1SpSubscriptionsCancelPostRequest {
    /**
     * 
     * @type {SPSubscriptionCancel}
     * @memberof SpSubscriptionsApiCancelSubscriptionApiV1SpSubscriptionsCancelPost
     */
    readonly sPSubscriptionCancel: SPSubscriptionCancel

    /**
     * 
     * @type {string}
     * @memberof SpSubscriptionsApiCancelSubscriptionApiV1SpSubscriptionsCancelPost
     */
    readonly authToken?: string | null
}

/**
 * Request parameters for getCurrentSubscriptionApiV1SpSubscriptionsCurrentGet operation in SpSubscriptionsApi.
 * @export
 * @interface SpSubscriptionsApiGetCurrentSubscriptionApiV1SpSubscriptionsCurrentGetRequest
 */
export interface SpSubscriptionsApiGetCurrentSubscriptionApiV1SpSubscriptionsCurrentGetRequest {
    /**
     * 
     * @type {string}
     * @memberof SpSubscriptionsApiGetCurrentSubscriptionApiV1SpSubscriptionsCurrentGet
     */
    readonly authToken?: string | null
}

/**
 * Request parameters for getSubscriptionHistoryApiV1SpSubscriptionsHistoryGet operation in SpSubscriptionsApi.
 * @export
 * @interface SpSubscriptionsApiGetSubscriptionHistoryApiV1SpSubscriptionsHistoryGetRequest
 */
export interface SpSubscriptionsApiGetSubscriptionHistoryApiV1SpSubscriptionsHistoryGetRequest {
    /**
     * 
     * @type {string}
     * @memberof SpSubscriptionsApiGetSubscriptionHistoryApiV1SpSubscriptionsHistoryGet
     */
    readonly authToken?: string | null
}

/**
 * Request parameters for getSubscriptionPlansApiV1SpSubscriptionsPlansGet operation in SpSubscriptionsApi.
 * @export
 * @interface SpSubscriptionsApiGetSubscriptionPlansApiV1SpSubscriptionsPlansGetRequest
 */
export interface SpSubscriptionsApiGetSubscriptionPlansApiV1SpSubscriptionsPlansGetRequest {
    /**
     * 
     * @type {string}
     * @memberof SpSubscriptionsApiGetSubscriptionPlansApiV1SpSubscriptionsPlansGet
     */
    readonly authToken?: string | null
}

/**
 * Request parameters for purchaseSubscriptionApiV1SpSubscriptionsPurchasePost operation in SpSubscriptionsApi.
 * @export
 * @interface SpSubscriptionsApiPurchaseSubscriptionApiV1SpSubscriptionsPurchasePostRequest
 */
export interface SpSubscriptionsApiPurchaseSubscriptionApiV1SpSubscriptionsPurchasePostRequest {
    /**
     * 
     * @type {SPSubscriptionCreate}
     * @memberof SpSubscriptionsApiPurchaseSubscriptionApiV1SpSubscriptionsPurchasePost
     */
    readonly sPSubscriptionCreate: SPSubscriptionCreate

    /**
     * 
     * @type {string}
     * @memberof SpSubscriptionsApiPurchaseSubscriptionApiV1SpSubscriptionsPurchasePost
     */
    readonly authToken?: string | null
}

/**
 * Request parameters for updateSubscriptionApiV1SpSubscriptionsUpdatePut operation in SpSubscriptionsApi.
 * @export
 * @interface SpSubscriptionsApiUpdateSubscriptionApiV1SpSubscriptionsUpdatePutRequest
 */
export interface SpSubscriptionsApiUpdateSubscriptionApiV1SpSubscriptionsUpdatePutRequest {
    /**
     * 
     * @type {SPSubscriptionUpdate}
     * @memberof SpSubscriptionsApiUpdateSubscriptionApiV1SpSubscriptionsUpdatePut
     */
    readonly sPSubscriptionUpdate: SPSubscriptionUpdate

    /**
     * 
     * @type {string}
     * @memberof SpSubscriptionsApiUpdateSubscriptionApiV1SpSubscriptionsUpdatePut
     */
    readonly authToken?: string | null
}

/**
 * SpSubscriptionsApi - object-oriented interface
 * @export
 * @class SpSubscriptionsApi
 * @extends {BaseAPI}
 */
export class SpSubscriptionsApi extends BaseAPI implements SpSubscriptionsApiInterface {
    /**
     * サブスクリプションをキャンセル  Args:     data: キャンセルデータ  Returns:     dict: キャンセル結果  Raises:     HTTPException: キャンセルに失敗した場合
     * @summary Cancel Subscription
     * @param {SpSubscriptionsApiCancelSubscriptionApiV1SpSubscriptionsCancelPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpSubscriptionsApi
     */
    public cancelSubscriptionApiV1SpSubscriptionsCancelPost(requestParameters: SpSubscriptionsApiCancelSubscriptionApiV1SpSubscriptionsCancelPostRequest, options?: RawAxiosRequestConfig) {
        return SpSubscriptionsApiFp(this.configuration).cancelSubscriptionApiV1SpSubscriptionsCancelPost(requestParameters.sPSubscriptionCancel, requestParameters.authToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 現在有効なサブスクリプションを取得  Returns:     SPSubscriptionResponse: 現在のサブスクリプション情報  Raises:     HTTPException: 有効なサブスクリプションがない場合
     * @summary Get Current Subscription
     * @param {SpSubscriptionsApiGetCurrentSubscriptionApiV1SpSubscriptionsCurrentGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpSubscriptionsApi
     */
    public getCurrentSubscriptionApiV1SpSubscriptionsCurrentGet(requestParameters: SpSubscriptionsApiGetCurrentSubscriptionApiV1SpSubscriptionsCurrentGetRequest = {}, options?: RawAxiosRequestConfig) {
        return SpSubscriptionsApiFp(this.configuration).getCurrentSubscriptionApiV1SpSubscriptionsCurrentGet(requestParameters.authToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * サブスクリプション履歴を取得  Returns:     SPSubscriptionListResponse: サブスクリプション履歴
     * @summary Get Subscription History
     * @param {SpSubscriptionsApiGetSubscriptionHistoryApiV1SpSubscriptionsHistoryGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpSubscriptionsApi
     */
    public getSubscriptionHistoryApiV1SpSubscriptionsHistoryGet(requestParameters: SpSubscriptionsApiGetSubscriptionHistoryApiV1SpSubscriptionsHistoryGetRequest = {}, options?: RawAxiosRequestConfig) {
        return SpSubscriptionsApiFp(this.configuration).getSubscriptionHistoryApiV1SpSubscriptionsHistoryGet(requestParameters.authToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 利用可能なサブスクリプションプラン一覧を取得  Returns:     SubscriptionPlansResponse: プラン一覧と現在のサブスクリプション情報
     * @summary Get Subscription Plans
     * @param {SpSubscriptionsApiGetSubscriptionPlansApiV1SpSubscriptionsPlansGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpSubscriptionsApi
     */
    public getSubscriptionPlansApiV1SpSubscriptionsPlansGet(requestParameters: SpSubscriptionsApiGetSubscriptionPlansApiV1SpSubscriptionsPlansGetRequest = {}, options?: RawAxiosRequestConfig) {
        return SpSubscriptionsApiFp(this.configuration).getSubscriptionPlansApiV1SpSubscriptionsPlansGet(requestParameters.authToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * サブスクリプションを購入  Args:     data: サブスクリプション作成データ  Returns:     SPSubscriptionPurchaseResponse: 購入結果  Raises:     HTTPException: 購入に失敗した場合
     * @summary Purchase Subscription
     * @param {SpSubscriptionsApiPurchaseSubscriptionApiV1SpSubscriptionsPurchasePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpSubscriptionsApi
     */
    public purchaseSubscriptionApiV1SpSubscriptionsPurchasePost(requestParameters: SpSubscriptionsApiPurchaseSubscriptionApiV1SpSubscriptionsPurchasePostRequest, options?: RawAxiosRequestConfig) {
        return SpSubscriptionsApiFp(this.configuration).purchaseSubscriptionApiV1SpSubscriptionsPurchasePost(requestParameters.sPSubscriptionCreate, requestParameters.authToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * サブスクリプションを更新（自動更新設定、決済方法など）  Args:     data: 更新データ  Returns:     dict: 更新結果  Raises:     HTTPException: 更新に失敗した場合
     * @summary Update Subscription
     * @param {SpSubscriptionsApiUpdateSubscriptionApiV1SpSubscriptionsUpdatePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpSubscriptionsApi
     */
    public updateSubscriptionApiV1SpSubscriptionsUpdatePut(requestParameters: SpSubscriptionsApiUpdateSubscriptionApiV1SpSubscriptionsUpdatePutRequest, options?: RawAxiosRequestConfig) {
        return SpSubscriptionsApiFp(this.configuration).updateSubscriptionApiV1SpSubscriptionsUpdatePut(requestParameters.sPSubscriptionUpdate, requestParameters.authToken, options).then((request) => request(this.axios, this.basePath));
    }
}

