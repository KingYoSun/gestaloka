/* tslint:disable */
/* eslint-disable */
/**
 * GESTALOKA API
 * マルチプレイ・テキストMMO - ゲスタロカ API
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from '../base'
// @ts-ignore
import type { HTTPValidationError } from '../models'
// @ts-ignore
import type { Quest } from '../models'
// @ts-ignore
import type { QuestOrigin } from '../models'
// @ts-ignore
import type { QuestProposal } from '../models'
// @ts-ignore
import type { QuestStatus } from '../models'
/**
 * QuestsApi - axios parameter creator
 * @export
 */
export const QuestsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * 提案されたクエストを受諾する  Args:     character_id: キャラクターID     quest_id: クエストID  Returns:     更新されたクエスト
     * @summary Accept Quest
     * @param {string} characterId
     * @param {string} questId
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptQuestApiV1QuestsCharacterIdQuestsQuestIdAcceptPost: async (
      characterId: string,
      questId: string,
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'characterId' is not null or undefined
      assertParamExists(
        'acceptQuestApiV1QuestsCharacterIdQuestsQuestIdAcceptPost',
        'characterId',
        characterId
      )
      // verify required parameter 'questId' is not null or undefined
      assertParamExists(
        'acceptQuestApiV1QuestsCharacterIdQuestsQuestIdAcceptPost',
        'questId',
        questId
      )
      const localVarPath =
        `/api/v1/quests/{character_id}/quests/{quest_id}/accept`
          .replace(
            `{${'character_id'}}`,
            encodeURIComponent(String(characterId))
          )
          .replace(`{${'quest_id'}}`, encodeURIComponent(String(questId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 新しいクエストを作成する  Args:     character_id: キャラクターID     title: クエストタイトル     description: クエストの説明     origin: クエストの発生源     session_id: セッションID（オプション）  Returns:     作成されたクエスト
     * @summary Create Quest
     * @param {string} characterId
     * @param {string} title
     * @param {string} description
     * @param {QuestOrigin} [origin]
     * @param {string | null} [sessionId]
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQuestApiV1QuestsCharacterIdCreatePost: async (
      characterId: string,
      title: string,
      description: string,
      origin?: QuestOrigin,
      sessionId?: string | null,
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'characterId' is not null or undefined
      assertParamExists(
        'createQuestApiV1QuestsCharacterIdCreatePost',
        'characterId',
        characterId
      )
      // verify required parameter 'title' is not null or undefined
      assertParamExists(
        'createQuestApiV1QuestsCharacterIdCreatePost',
        'title',
        title
      )
      // verify required parameter 'description' is not null or undefined
      assertParamExists(
        'createQuestApiV1QuestsCharacterIdCreatePost',
        'description',
        description
      )
      const localVarPath = `/api/v1/quests/{character_id}/create`.replace(
        `{${'character_id'}}`,
        encodeURIComponent(String(characterId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      if (title !== undefined) {
        localVarQueryParameter['title'] = title
      }

      if (description !== undefined) {
        localVarQueryParameter['description'] = description
      }

      if (origin !== undefined) {
        localVarQueryParameter['origin'] = origin
      }

      if (sessionId !== undefined) {
        localVarQueryParameter['session_id'] = sessionId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * キャラクターのクエストを取得する  Args:     character_id: キャラクターID     status: フィルタリングするステータス（オプション）     limit: 取得数制限     offset: オフセット  Returns:     クエストのリスト
     * @summary Get Character Quests
     * @param {string} characterId
     * @param {QuestStatus | null} [status]
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCharacterQuestsApiV1QuestsCharacterIdQuestsGet: async (
      characterId: string,
      status?: QuestStatus | null,
      limit?: number,
      offset?: number,
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'characterId' is not null or undefined
      assertParamExists(
        'getCharacterQuestsApiV1QuestsCharacterIdQuestsGet',
        'characterId',
        characterId
      )
      const localVarPath = `/api/v1/quests/{character_id}/quests`.replace(
        `{${'character_id'}}`,
        encodeURIComponent(String(characterId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      if (status !== undefined) {
        localVarQueryParameter['status'] = status
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 最近の行動を分析してクエストを提案する  Args:     character_id: キャラクターID     session_id: 現在のセッションID  Returns:     提案されたクエストのリスト
     * @summary Get Quest Proposals
     * @param {string} characterId
     * @param {string} sessionId
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuestProposalsApiV1QuestsCharacterIdProposalsGet: async (
      characterId: string,
      sessionId: string,
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'characterId' is not null or undefined
      assertParamExists(
        'getQuestProposalsApiV1QuestsCharacterIdProposalsGet',
        'characterId',
        characterId
      )
      // verify required parameter 'sessionId' is not null or undefined
      assertParamExists(
        'getQuestProposalsApiV1QuestsCharacterIdProposalsGet',
        'sessionId',
        sessionId
      )
      const localVarPath = `/api/v1/quests/{character_id}/proposals`.replace(
        `{${'character_id'}}`,
        encodeURIComponent(String(characterId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      if (sessionId !== undefined) {
        localVarQueryParameter['session_id'] = sessionId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * プレイヤーの行動から暗黙的なクエストを推測する  Args:     character_id: キャラクターID     session_id: セッションID  Returns:     推測されたクエスト（作成された場合）
     * @summary Infer Implicit Quest
     * @param {string} characterId
     * @param {string} sessionId
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inferImplicitQuestApiV1QuestsCharacterIdQuestsInferPost: async (
      characterId: string,
      sessionId: string,
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'characterId' is not null or undefined
      assertParamExists(
        'inferImplicitQuestApiV1QuestsCharacterIdQuestsInferPost',
        'characterId',
        characterId
      )
      // verify required parameter 'sessionId' is not null or undefined
      assertParamExists(
        'inferImplicitQuestApiV1QuestsCharacterIdQuestsInferPost',
        'sessionId',
        sessionId
      )
      const localVarPath = `/api/v1/quests/{character_id}/quests/infer`.replace(
        `{${'character_id'}}`,
        encodeURIComponent(String(characterId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      if (sessionId !== undefined) {
        localVarQueryParameter['session_id'] = sessionId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * クエストの進行状況を更新する  Args:     character_id: キャラクターID     quest_id: クエストID  Returns:     更新されたクエスト
     * @summary Update Quest Progress
     * @param {string} characterId
     * @param {string} questId
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQuestProgressApiV1QuestsCharacterIdQuestsQuestIdUpdatePost: async (
      characterId: string,
      questId: string,
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'characterId' is not null or undefined
      assertParamExists(
        'updateQuestProgressApiV1QuestsCharacterIdQuestsQuestIdUpdatePost',
        'characterId',
        characterId
      )
      // verify required parameter 'questId' is not null or undefined
      assertParamExists(
        'updateQuestProgressApiV1QuestsCharacterIdQuestsQuestIdUpdatePost',
        'questId',
        questId
      )
      const localVarPath =
        `/api/v1/quests/{character_id}/quests/{quest_id}/update`
          .replace(
            `{${'character_id'}}`,
            encodeURIComponent(String(characterId))
          )
          .replace(`{${'quest_id'}}`, encodeURIComponent(String(questId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * QuestsApi - functional programming interface
 * @export
 */
export const QuestsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = QuestsApiAxiosParamCreator(configuration)
  return {
    /**
     * 提案されたクエストを受諾する  Args:     character_id: キャラクターID     quest_id: クエストID  Returns:     更新されたクエスト
     * @summary Accept Quest
     * @param {string} characterId
     * @param {string} questId
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async acceptQuestApiV1QuestsCharacterIdQuestsQuestIdAcceptPost(
      characterId: string,
      questId: string,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Quest>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.acceptQuestApiV1QuestsCharacterIdQuestsQuestIdAcceptPost(
          characterId,
          questId,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'QuestsApi.acceptQuestApiV1QuestsCharacterIdQuestsQuestIdAcceptPost'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * 新しいクエストを作成する  Args:     character_id: キャラクターID     title: クエストタイトル     description: クエストの説明     origin: クエストの発生源     session_id: セッションID（オプション）  Returns:     作成されたクエスト
     * @summary Create Quest
     * @param {string} characterId
     * @param {string} title
     * @param {string} description
     * @param {QuestOrigin} [origin]
     * @param {string | null} [sessionId]
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createQuestApiV1QuestsCharacterIdCreatePost(
      characterId: string,
      title: string,
      description: string,
      origin?: QuestOrigin,
      sessionId?: string | null,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Quest>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createQuestApiV1QuestsCharacterIdCreatePost(
          characterId,
          title,
          description,
          origin,
          sessionId,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'QuestsApi.createQuestApiV1QuestsCharacterIdCreatePost'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * キャラクターのクエストを取得する  Args:     character_id: キャラクターID     status: フィルタリングするステータス（オプション）     limit: 取得数制限     offset: オフセット  Returns:     クエストのリスト
     * @summary Get Character Quests
     * @param {string} characterId
     * @param {QuestStatus | null} [status]
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCharacterQuestsApiV1QuestsCharacterIdQuestsGet(
      characterId: string,
      status?: QuestStatus | null,
      limit?: number,
      offset?: number,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Quest>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getCharacterQuestsApiV1QuestsCharacterIdQuestsGet(
          characterId,
          status,
          limit,
          offset,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'QuestsApi.getCharacterQuestsApiV1QuestsCharacterIdQuestsGet'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * 最近の行動を分析してクエストを提案する  Args:     character_id: キャラクターID     session_id: 現在のセッションID  Returns:     提案されたクエストのリスト
     * @summary Get Quest Proposals
     * @param {string} characterId
     * @param {string} sessionId
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getQuestProposalsApiV1QuestsCharacterIdProposalsGet(
      characterId: string,
      sessionId: string,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<QuestProposal>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getQuestProposalsApiV1QuestsCharacterIdProposalsGet(
          characterId,
          sessionId,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'QuestsApi.getQuestProposalsApiV1QuestsCharacterIdProposalsGet'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * プレイヤーの行動から暗黙的なクエストを推測する  Args:     character_id: キャラクターID     session_id: セッションID  Returns:     推測されたクエスト（作成された場合）
     * @summary Infer Implicit Quest
     * @param {string} characterId
     * @param {string} sessionId
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async inferImplicitQuestApiV1QuestsCharacterIdQuestsInferPost(
      characterId: string,
      sessionId: string,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Quest>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.inferImplicitQuestApiV1QuestsCharacterIdQuestsInferPost(
          characterId,
          sessionId,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'QuestsApi.inferImplicitQuestApiV1QuestsCharacterIdQuestsInferPost'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * クエストの進行状況を更新する  Args:     character_id: キャラクターID     quest_id: クエストID  Returns:     更新されたクエスト
     * @summary Update Quest Progress
     * @param {string} characterId
     * @param {string} questId
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateQuestProgressApiV1QuestsCharacterIdQuestsQuestIdUpdatePost(
      characterId: string,
      questId: string,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Quest>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateQuestProgressApiV1QuestsCharacterIdQuestsQuestIdUpdatePost(
          characterId,
          questId,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'QuestsApi.updateQuestProgressApiV1QuestsCharacterIdQuestsQuestIdUpdatePost'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * QuestsApi - factory interface
 * @export
 */
export const QuestsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = QuestsApiFp(configuration)
  return {
    /**
     * 提案されたクエストを受諾する  Args:     character_id: キャラクターID     quest_id: クエストID  Returns:     更新されたクエスト
     * @summary Accept Quest
     * @param {QuestsApiAcceptQuestApiV1QuestsCharacterIdQuestsQuestIdAcceptPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptQuestApiV1QuestsCharacterIdQuestsQuestIdAcceptPost(
      requestParameters: QuestsApiAcceptQuestApiV1QuestsCharacterIdQuestsQuestIdAcceptPostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Quest> {
      return localVarFp
        .acceptQuestApiV1QuestsCharacterIdQuestsQuestIdAcceptPost(
          requestParameters.characterId,
          requestParameters.questId,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * 新しいクエストを作成する  Args:     character_id: キャラクターID     title: クエストタイトル     description: クエストの説明     origin: クエストの発生源     session_id: セッションID（オプション）  Returns:     作成されたクエスト
     * @summary Create Quest
     * @param {QuestsApiCreateQuestApiV1QuestsCharacterIdCreatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQuestApiV1QuestsCharacterIdCreatePost(
      requestParameters: QuestsApiCreateQuestApiV1QuestsCharacterIdCreatePostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Quest> {
      return localVarFp
        .createQuestApiV1QuestsCharacterIdCreatePost(
          requestParameters.characterId,
          requestParameters.title,
          requestParameters.description,
          requestParameters.origin,
          requestParameters.sessionId,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * キャラクターのクエストを取得する  Args:     character_id: キャラクターID     status: フィルタリングするステータス（オプション）     limit: 取得数制限     offset: オフセット  Returns:     クエストのリスト
     * @summary Get Character Quests
     * @param {QuestsApiGetCharacterQuestsApiV1QuestsCharacterIdQuestsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCharacterQuestsApiV1QuestsCharacterIdQuestsGet(
      requestParameters: QuestsApiGetCharacterQuestsApiV1QuestsCharacterIdQuestsGetRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Array<Quest>> {
      return localVarFp
        .getCharacterQuestsApiV1QuestsCharacterIdQuestsGet(
          requestParameters.characterId,
          requestParameters.status,
          requestParameters.limit,
          requestParameters.offset,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * 最近の行動を分析してクエストを提案する  Args:     character_id: キャラクターID     session_id: 現在のセッションID  Returns:     提案されたクエストのリスト
     * @summary Get Quest Proposals
     * @param {QuestsApiGetQuestProposalsApiV1QuestsCharacterIdProposalsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuestProposalsApiV1QuestsCharacterIdProposalsGet(
      requestParameters: QuestsApiGetQuestProposalsApiV1QuestsCharacterIdProposalsGetRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Array<QuestProposal>> {
      return localVarFp
        .getQuestProposalsApiV1QuestsCharacterIdProposalsGet(
          requestParameters.characterId,
          requestParameters.sessionId,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * プレイヤーの行動から暗黙的なクエストを推測する  Args:     character_id: キャラクターID     session_id: セッションID  Returns:     推測されたクエスト（作成された場合）
     * @summary Infer Implicit Quest
     * @param {QuestsApiInferImplicitQuestApiV1QuestsCharacterIdQuestsInferPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inferImplicitQuestApiV1QuestsCharacterIdQuestsInferPost(
      requestParameters: QuestsApiInferImplicitQuestApiV1QuestsCharacterIdQuestsInferPostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Quest> {
      return localVarFp
        .inferImplicitQuestApiV1QuestsCharacterIdQuestsInferPost(
          requestParameters.characterId,
          requestParameters.sessionId,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * クエストの進行状況を更新する  Args:     character_id: キャラクターID     quest_id: クエストID  Returns:     更新されたクエスト
     * @summary Update Quest Progress
     * @param {QuestsApiUpdateQuestProgressApiV1QuestsCharacterIdQuestsQuestIdUpdatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQuestProgressApiV1QuestsCharacterIdQuestsQuestIdUpdatePost(
      requestParameters: QuestsApiUpdateQuestProgressApiV1QuestsCharacterIdQuestsQuestIdUpdatePostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Quest> {
      return localVarFp
        .updateQuestProgressApiV1QuestsCharacterIdQuestsQuestIdUpdatePost(
          requestParameters.characterId,
          requestParameters.questId,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
  }
}

/**
 * QuestsApi - interface
 * @export
 * @interface QuestsApi
 */
export interface QuestsApiInterface {
  /**
   * 提案されたクエストを受諾する  Args:     character_id: キャラクターID     quest_id: クエストID  Returns:     更新されたクエスト
   * @summary Accept Quest
   * @param {QuestsApiAcceptQuestApiV1QuestsCharacterIdQuestsQuestIdAcceptPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestsApiInterface
   */
  acceptQuestApiV1QuestsCharacterIdQuestsQuestIdAcceptPost(
    requestParameters: QuestsApiAcceptQuestApiV1QuestsCharacterIdQuestsQuestIdAcceptPostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Quest>

  /**
   * 新しいクエストを作成する  Args:     character_id: キャラクターID     title: クエストタイトル     description: クエストの説明     origin: クエストの発生源     session_id: セッションID（オプション）  Returns:     作成されたクエスト
   * @summary Create Quest
   * @param {QuestsApiCreateQuestApiV1QuestsCharacterIdCreatePostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestsApiInterface
   */
  createQuestApiV1QuestsCharacterIdCreatePost(
    requestParameters: QuestsApiCreateQuestApiV1QuestsCharacterIdCreatePostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Quest>

  /**
   * キャラクターのクエストを取得する  Args:     character_id: キャラクターID     status: フィルタリングするステータス（オプション）     limit: 取得数制限     offset: オフセット  Returns:     クエストのリスト
   * @summary Get Character Quests
   * @param {QuestsApiGetCharacterQuestsApiV1QuestsCharacterIdQuestsGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestsApiInterface
   */
  getCharacterQuestsApiV1QuestsCharacterIdQuestsGet(
    requestParameters: QuestsApiGetCharacterQuestsApiV1QuestsCharacterIdQuestsGetRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Array<Quest>>

  /**
   * 最近の行動を分析してクエストを提案する  Args:     character_id: キャラクターID     session_id: 現在のセッションID  Returns:     提案されたクエストのリスト
   * @summary Get Quest Proposals
   * @param {QuestsApiGetQuestProposalsApiV1QuestsCharacterIdProposalsGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestsApiInterface
   */
  getQuestProposalsApiV1QuestsCharacterIdProposalsGet(
    requestParameters: QuestsApiGetQuestProposalsApiV1QuestsCharacterIdProposalsGetRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Array<QuestProposal>>

  /**
   * プレイヤーの行動から暗黙的なクエストを推測する  Args:     character_id: キャラクターID     session_id: セッションID  Returns:     推測されたクエスト（作成された場合）
   * @summary Infer Implicit Quest
   * @param {QuestsApiInferImplicitQuestApiV1QuestsCharacterIdQuestsInferPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestsApiInterface
   */
  inferImplicitQuestApiV1QuestsCharacterIdQuestsInferPost(
    requestParameters: QuestsApiInferImplicitQuestApiV1QuestsCharacterIdQuestsInferPostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Quest>

  /**
   * クエストの進行状況を更新する  Args:     character_id: キャラクターID     quest_id: クエストID  Returns:     更新されたクエスト
   * @summary Update Quest Progress
   * @param {QuestsApiUpdateQuestProgressApiV1QuestsCharacterIdQuestsQuestIdUpdatePostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestsApiInterface
   */
  updateQuestProgressApiV1QuestsCharacterIdQuestsQuestIdUpdatePost(
    requestParameters: QuestsApiUpdateQuestProgressApiV1QuestsCharacterIdQuestsQuestIdUpdatePostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Quest>
}

/**
 * Request parameters for acceptQuestApiV1QuestsCharacterIdQuestsQuestIdAcceptPost operation in QuestsApi.
 * @export
 * @interface QuestsApiAcceptQuestApiV1QuestsCharacterIdQuestsQuestIdAcceptPostRequest
 */
export interface QuestsApiAcceptQuestApiV1QuestsCharacterIdQuestsQuestIdAcceptPostRequest {
  /**
   *
   * @type {string}
   * @memberof QuestsApiAcceptQuestApiV1QuestsCharacterIdQuestsQuestIdAcceptPost
   */
  readonly characterId: string

  /**
   *
   * @type {string}
   * @memberof QuestsApiAcceptQuestApiV1QuestsCharacterIdQuestsQuestIdAcceptPost
   */
  readonly questId: string

  /**
   *
   * @type {string}
   * @memberof QuestsApiAcceptQuestApiV1QuestsCharacterIdQuestsQuestIdAcceptPost
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for createQuestApiV1QuestsCharacterIdCreatePost operation in QuestsApi.
 * @export
 * @interface QuestsApiCreateQuestApiV1QuestsCharacterIdCreatePostRequest
 */
export interface QuestsApiCreateQuestApiV1QuestsCharacterIdCreatePostRequest {
  /**
   *
   * @type {string}
   * @memberof QuestsApiCreateQuestApiV1QuestsCharacterIdCreatePost
   */
  readonly characterId: string

  /**
   *
   * @type {string}
   * @memberof QuestsApiCreateQuestApiV1QuestsCharacterIdCreatePost
   */
  readonly title: string

  /**
   *
   * @type {string}
   * @memberof QuestsApiCreateQuestApiV1QuestsCharacterIdCreatePost
   */
  readonly description: string

  /**
   *
   * @type {QuestOrigin}
   * @memberof QuestsApiCreateQuestApiV1QuestsCharacterIdCreatePost
   */
  readonly origin?: QuestOrigin

  /**
   *
   * @type {string}
   * @memberof QuestsApiCreateQuestApiV1QuestsCharacterIdCreatePost
   */
  readonly sessionId?: string | null

  /**
   *
   * @type {string}
   * @memberof QuestsApiCreateQuestApiV1QuestsCharacterIdCreatePost
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for getCharacterQuestsApiV1QuestsCharacterIdQuestsGet operation in QuestsApi.
 * @export
 * @interface QuestsApiGetCharacterQuestsApiV1QuestsCharacterIdQuestsGetRequest
 */
export interface QuestsApiGetCharacterQuestsApiV1QuestsCharacterIdQuestsGetRequest {
  /**
   *
   * @type {string}
   * @memberof QuestsApiGetCharacterQuestsApiV1QuestsCharacterIdQuestsGet
   */
  readonly characterId: string

  /**
   *
   * @type {QuestStatus}
   * @memberof QuestsApiGetCharacterQuestsApiV1QuestsCharacterIdQuestsGet
   */
  readonly status?: QuestStatus | null

  /**
   *
   * @type {number}
   * @memberof QuestsApiGetCharacterQuestsApiV1QuestsCharacterIdQuestsGet
   */
  readonly limit?: number

  /**
   *
   * @type {number}
   * @memberof QuestsApiGetCharacterQuestsApiV1QuestsCharacterIdQuestsGet
   */
  readonly offset?: number

  /**
   *
   * @type {string}
   * @memberof QuestsApiGetCharacterQuestsApiV1QuestsCharacterIdQuestsGet
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for getQuestProposalsApiV1QuestsCharacterIdProposalsGet operation in QuestsApi.
 * @export
 * @interface QuestsApiGetQuestProposalsApiV1QuestsCharacterIdProposalsGetRequest
 */
export interface QuestsApiGetQuestProposalsApiV1QuestsCharacterIdProposalsGetRequest {
  /**
   *
   * @type {string}
   * @memberof QuestsApiGetQuestProposalsApiV1QuestsCharacterIdProposalsGet
   */
  readonly characterId: string

  /**
   *
   * @type {string}
   * @memberof QuestsApiGetQuestProposalsApiV1QuestsCharacterIdProposalsGet
   */
  readonly sessionId: string

  /**
   *
   * @type {string}
   * @memberof QuestsApiGetQuestProposalsApiV1QuestsCharacterIdProposalsGet
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for inferImplicitQuestApiV1QuestsCharacterIdQuestsInferPost operation in QuestsApi.
 * @export
 * @interface QuestsApiInferImplicitQuestApiV1QuestsCharacterIdQuestsInferPostRequest
 */
export interface QuestsApiInferImplicitQuestApiV1QuestsCharacterIdQuestsInferPostRequest {
  /**
   *
   * @type {string}
   * @memberof QuestsApiInferImplicitQuestApiV1QuestsCharacterIdQuestsInferPost
   */
  readonly characterId: string

  /**
   *
   * @type {string}
   * @memberof QuestsApiInferImplicitQuestApiV1QuestsCharacterIdQuestsInferPost
   */
  readonly sessionId: string

  /**
   *
   * @type {string}
   * @memberof QuestsApiInferImplicitQuestApiV1QuestsCharacterIdQuestsInferPost
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for updateQuestProgressApiV1QuestsCharacterIdQuestsQuestIdUpdatePost operation in QuestsApi.
 * @export
 * @interface QuestsApiUpdateQuestProgressApiV1QuestsCharacterIdQuestsQuestIdUpdatePostRequest
 */
export interface QuestsApiUpdateQuestProgressApiV1QuestsCharacterIdQuestsQuestIdUpdatePostRequest {
  /**
   *
   * @type {string}
   * @memberof QuestsApiUpdateQuestProgressApiV1QuestsCharacterIdQuestsQuestIdUpdatePost
   */
  readonly characterId: string

  /**
   *
   * @type {string}
   * @memberof QuestsApiUpdateQuestProgressApiV1QuestsCharacterIdQuestsQuestIdUpdatePost
   */
  readonly questId: string

  /**
   *
   * @type {string}
   * @memberof QuestsApiUpdateQuestProgressApiV1QuestsCharacterIdQuestsQuestIdUpdatePost
   */
  readonly authToken?: string | null
}

/**
 * QuestsApi - object-oriented interface
 * @export
 * @class QuestsApi
 * @extends {BaseAPI}
 */
export class QuestsApi extends BaseAPI implements QuestsApiInterface {
  /**
   * 提案されたクエストを受諾する  Args:     character_id: キャラクターID     quest_id: クエストID  Returns:     更新されたクエスト
   * @summary Accept Quest
   * @param {QuestsApiAcceptQuestApiV1QuestsCharacterIdQuestsQuestIdAcceptPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestsApi
   */
  public acceptQuestApiV1QuestsCharacterIdQuestsQuestIdAcceptPost(
    requestParameters: QuestsApiAcceptQuestApiV1QuestsCharacterIdQuestsQuestIdAcceptPostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return QuestsApiFp(this.configuration)
      .acceptQuestApiV1QuestsCharacterIdQuestsQuestIdAcceptPost(
        requestParameters.characterId,
        requestParameters.questId,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * 新しいクエストを作成する  Args:     character_id: キャラクターID     title: クエストタイトル     description: クエストの説明     origin: クエストの発生源     session_id: セッションID（オプション）  Returns:     作成されたクエスト
   * @summary Create Quest
   * @param {QuestsApiCreateQuestApiV1QuestsCharacterIdCreatePostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestsApi
   */
  public createQuestApiV1QuestsCharacterIdCreatePost(
    requestParameters: QuestsApiCreateQuestApiV1QuestsCharacterIdCreatePostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return QuestsApiFp(this.configuration)
      .createQuestApiV1QuestsCharacterIdCreatePost(
        requestParameters.characterId,
        requestParameters.title,
        requestParameters.description,
        requestParameters.origin,
        requestParameters.sessionId,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * キャラクターのクエストを取得する  Args:     character_id: キャラクターID     status: フィルタリングするステータス（オプション）     limit: 取得数制限     offset: オフセット  Returns:     クエストのリスト
   * @summary Get Character Quests
   * @param {QuestsApiGetCharacterQuestsApiV1QuestsCharacterIdQuestsGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestsApi
   */
  public getCharacterQuestsApiV1QuestsCharacterIdQuestsGet(
    requestParameters: QuestsApiGetCharacterQuestsApiV1QuestsCharacterIdQuestsGetRequest,
    options?: RawAxiosRequestConfig
  ) {
    return QuestsApiFp(this.configuration)
      .getCharacterQuestsApiV1QuestsCharacterIdQuestsGet(
        requestParameters.characterId,
        requestParameters.status,
        requestParameters.limit,
        requestParameters.offset,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * 最近の行動を分析してクエストを提案する  Args:     character_id: キャラクターID     session_id: 現在のセッションID  Returns:     提案されたクエストのリスト
   * @summary Get Quest Proposals
   * @param {QuestsApiGetQuestProposalsApiV1QuestsCharacterIdProposalsGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestsApi
   */
  public getQuestProposalsApiV1QuestsCharacterIdProposalsGet(
    requestParameters: QuestsApiGetQuestProposalsApiV1QuestsCharacterIdProposalsGetRequest,
    options?: RawAxiosRequestConfig
  ) {
    return QuestsApiFp(this.configuration)
      .getQuestProposalsApiV1QuestsCharacterIdProposalsGet(
        requestParameters.characterId,
        requestParameters.sessionId,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * プレイヤーの行動から暗黙的なクエストを推測する  Args:     character_id: キャラクターID     session_id: セッションID  Returns:     推測されたクエスト（作成された場合）
   * @summary Infer Implicit Quest
   * @param {QuestsApiInferImplicitQuestApiV1QuestsCharacterIdQuestsInferPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestsApi
   */
  public inferImplicitQuestApiV1QuestsCharacterIdQuestsInferPost(
    requestParameters: QuestsApiInferImplicitQuestApiV1QuestsCharacterIdQuestsInferPostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return QuestsApiFp(this.configuration)
      .inferImplicitQuestApiV1QuestsCharacterIdQuestsInferPost(
        requestParameters.characterId,
        requestParameters.sessionId,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * クエストの進行状況を更新する  Args:     character_id: キャラクターID     quest_id: クエストID  Returns:     更新されたクエスト
   * @summary Update Quest Progress
   * @param {QuestsApiUpdateQuestProgressApiV1QuestsCharacterIdQuestsQuestIdUpdatePostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestsApi
   */
  public updateQuestProgressApiV1QuestsCharacterIdQuestsQuestIdUpdatePost(
    requestParameters: QuestsApiUpdateQuestProgressApiV1QuestsCharacterIdQuestsQuestIdUpdatePostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return QuestsApiFp(this.configuration)
      .updateQuestProgressApiV1QuestsCharacterIdQuestsQuestIdUpdatePost(
        requestParameters.characterId,
        requestParameters.questId,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }
}
