/* tslint:disable */
/* eslint-disable */
/**
 * GESTALOKA API
 * マルチプレイ・テキストMMO - ゲスタロカ API
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from '../base'
// @ts-ignore
import type { Character } from '../models'
// @ts-ignore
import type { CharacterCreate } from '../models'
// @ts-ignore
import type { CharacterUpdate } from '../models'
// @ts-ignore
import type { HTTPValidationError } from '../models'
/**
 * CharactersApi - axios parameter creator
 * @export
 */
export const CharactersApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * キャラクターをアクティブにする
     * @summary Activate Character
     * @param {string} characterId
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activateCharacterApiV1CharactersCharacterIdActivatePost: async (
      characterId: string,
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'characterId' is not null or undefined
      assertParamExists(
        'activateCharacterApiV1CharactersCharacterIdActivatePost',
        'characterId',
        characterId
      )
      const localVarPath = `/api/v1/characters/{character_id}/activate`.replace(
        `{${'character_id'}}`,
        encodeURIComponent(String(characterId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 新しいキャラクター作成
     * @summary Create Character
     * @param {CharacterCreate} characterCreate
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCharacterApiV1CharactersPost: async (
      characterCreate: CharacterCreate,
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'characterCreate' is not null or undefined
      assertParamExists(
        'createCharacterApiV1CharactersPost',
        'characterCreate',
        characterCreate
      )
      const localVarPath = `/api/v1/characters/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        characterCreate,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * キャラクター削除
     * @summary Delete Character
     * @param {string} characterId
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCharacterApiV1CharactersCharacterIdDelete: async (
      characterId: string,
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'characterId' is not null or undefined
      assertParamExists(
        'deleteCharacterApiV1CharactersCharacterIdDelete',
        'characterId',
        characterId
      )
      const localVarPath = `/api/v1/characters/{character_id}`.replace(
        `{${'character_id'}}`,
        encodeURIComponent(String(characterId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 特定のキャラクター取得
     * @summary Get Character
     * @param {string} characterId
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCharacterApiV1CharactersCharacterIdGet: async (
      characterId: string,
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'characterId' is not null or undefined
      assertParamExists(
        'getCharacterApiV1CharactersCharacterIdGet',
        'characterId',
        characterId
      )
      const localVarPath = `/api/v1/characters/{character_id}`.replace(
        `{${'character_id'}}`,
        encodeURIComponent(String(characterId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * ユーザーのキャラクター一覧取得
     * @summary Get User Characters
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserCharactersApiV1CharactersGet: async (
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/characters/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * キャラクター更新
     * @summary Update Character
     * @param {string} characterId
     * @param {CharacterUpdate} characterUpdate
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCharacterApiV1CharactersCharacterIdPut: async (
      characterId: string,
      characterUpdate: CharacterUpdate,
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'characterId' is not null or undefined
      assertParamExists(
        'updateCharacterApiV1CharactersCharacterIdPut',
        'characterId',
        characterId
      )
      // verify required parameter 'characterUpdate' is not null or undefined
      assertParamExists(
        'updateCharacterApiV1CharactersCharacterIdPut',
        'characterUpdate',
        characterUpdate
      )
      const localVarPath = `/api/v1/characters/{character_id}`.replace(
        `{${'character_id'}}`,
        encodeURIComponent(String(characterId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        characterUpdate,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * CharactersApi - functional programming interface
 * @export
 */
export const CharactersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    CharactersApiAxiosParamCreator(configuration)
  return {
    /**
     * キャラクターをアクティブにする
     * @summary Activate Character
     * @param {string} characterId
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async activateCharacterApiV1CharactersCharacterIdActivatePost(
      characterId: string,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Character>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.activateCharacterApiV1CharactersCharacterIdActivatePost(
          characterId,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'CharactersApi.activateCharacterApiV1CharactersCharacterIdActivatePost'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * 新しいキャラクター作成
     * @summary Create Character
     * @param {CharacterCreate} characterCreate
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCharacterApiV1CharactersPost(
      characterCreate: CharacterCreate,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Character>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createCharacterApiV1CharactersPost(
          characterCreate,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'CharactersApi.createCharacterApiV1CharactersPost'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * キャラクター削除
     * @summary Delete Character
     * @param {string} characterId
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteCharacterApiV1CharactersCharacterIdDelete(
      characterId: string,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteCharacterApiV1CharactersCharacterIdDelete(
          characterId,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'CharactersApi.deleteCharacterApiV1CharactersCharacterIdDelete'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * 特定のキャラクター取得
     * @summary Get Character
     * @param {string} characterId
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCharacterApiV1CharactersCharacterIdGet(
      characterId: string,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Character>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getCharacterApiV1CharactersCharacterIdGet(
          characterId,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'CharactersApi.getCharacterApiV1CharactersCharacterIdGet'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * ユーザーのキャラクター一覧取得
     * @summary Get User Characters
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserCharactersApiV1CharactersGet(
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<Character>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getUserCharactersApiV1CharactersGet(
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'CharactersApi.getUserCharactersApiV1CharactersGet'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * キャラクター更新
     * @summary Update Character
     * @param {string} characterId
     * @param {CharacterUpdate} characterUpdate
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateCharacterApiV1CharactersCharacterIdPut(
      characterId: string,
      characterUpdate: CharacterUpdate,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Character>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateCharacterApiV1CharactersCharacterIdPut(
          characterId,
          characterUpdate,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'CharactersApi.updateCharacterApiV1CharactersCharacterIdPut'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * CharactersApi - factory interface
 * @export
 */
export const CharactersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CharactersApiFp(configuration)
  return {
    /**
     * キャラクターをアクティブにする
     * @summary Activate Character
     * @param {CharactersApiActivateCharacterApiV1CharactersCharacterIdActivatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activateCharacterApiV1CharactersCharacterIdActivatePost(
      requestParameters: CharactersApiActivateCharacterApiV1CharactersCharacterIdActivatePostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Character> {
      return localVarFp
        .activateCharacterApiV1CharactersCharacterIdActivatePost(
          requestParameters.characterId,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * 新しいキャラクター作成
     * @summary Create Character
     * @param {CharactersApiCreateCharacterApiV1CharactersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCharacterApiV1CharactersPost(
      requestParameters: CharactersApiCreateCharacterApiV1CharactersPostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Character> {
      return localVarFp
        .createCharacterApiV1CharactersPost(
          requestParameters.characterCreate,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * キャラクター削除
     * @summary Delete Character
     * @param {CharactersApiDeleteCharacterApiV1CharactersCharacterIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCharacterApiV1CharactersCharacterIdDelete(
      requestParameters: CharactersApiDeleteCharacterApiV1CharactersCharacterIdDeleteRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .deleteCharacterApiV1CharactersCharacterIdDelete(
          requestParameters.characterId,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * 特定のキャラクター取得
     * @summary Get Character
     * @param {CharactersApiGetCharacterApiV1CharactersCharacterIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCharacterApiV1CharactersCharacterIdGet(
      requestParameters: CharactersApiGetCharacterApiV1CharactersCharacterIdGetRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Character> {
      return localVarFp
        .getCharacterApiV1CharactersCharacterIdGet(
          requestParameters.characterId,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * ユーザーのキャラクター一覧取得
     * @summary Get User Characters
     * @param {CharactersApiGetUserCharactersApiV1CharactersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserCharactersApiV1CharactersGet(
      requestParameters: CharactersApiGetUserCharactersApiV1CharactersGetRequest = {},
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Array<Character>> {
      return localVarFp
        .getUserCharactersApiV1CharactersGet(
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * キャラクター更新
     * @summary Update Character
     * @param {CharactersApiUpdateCharacterApiV1CharactersCharacterIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCharacterApiV1CharactersCharacterIdPut(
      requestParameters: CharactersApiUpdateCharacterApiV1CharactersCharacterIdPutRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Character> {
      return localVarFp
        .updateCharacterApiV1CharactersCharacterIdPut(
          requestParameters.characterId,
          requestParameters.characterUpdate,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
  }
}

/**
 * CharactersApi - interface
 * @export
 * @interface CharactersApi
 */
export interface CharactersApiInterface {
  /**
   * キャラクターをアクティブにする
   * @summary Activate Character
   * @param {CharactersApiActivateCharacterApiV1CharactersCharacterIdActivatePostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CharactersApiInterface
   */
  activateCharacterApiV1CharactersCharacterIdActivatePost(
    requestParameters: CharactersApiActivateCharacterApiV1CharactersCharacterIdActivatePostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Character>

  /**
   * 新しいキャラクター作成
   * @summary Create Character
   * @param {CharactersApiCreateCharacterApiV1CharactersPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CharactersApiInterface
   */
  createCharacterApiV1CharactersPost(
    requestParameters: CharactersApiCreateCharacterApiV1CharactersPostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Character>

  /**
   * キャラクター削除
   * @summary Delete Character
   * @param {CharactersApiDeleteCharacterApiV1CharactersCharacterIdDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CharactersApiInterface
   */
  deleteCharacterApiV1CharactersCharacterIdDelete(
    requestParameters: CharactersApiDeleteCharacterApiV1CharactersCharacterIdDeleteRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<any>

  /**
   * 特定のキャラクター取得
   * @summary Get Character
   * @param {CharactersApiGetCharacterApiV1CharactersCharacterIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CharactersApiInterface
   */
  getCharacterApiV1CharactersCharacterIdGet(
    requestParameters: CharactersApiGetCharacterApiV1CharactersCharacterIdGetRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Character>

  /**
   * ユーザーのキャラクター一覧取得
   * @summary Get User Characters
   * @param {CharactersApiGetUserCharactersApiV1CharactersGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CharactersApiInterface
   */
  getUserCharactersApiV1CharactersGet(
    requestParameters?: CharactersApiGetUserCharactersApiV1CharactersGetRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Array<Character>>

  /**
   * キャラクター更新
   * @summary Update Character
   * @param {CharactersApiUpdateCharacterApiV1CharactersCharacterIdPutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CharactersApiInterface
   */
  updateCharacterApiV1CharactersCharacterIdPut(
    requestParameters: CharactersApiUpdateCharacterApiV1CharactersCharacterIdPutRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Character>
}

/**
 * Request parameters for activateCharacterApiV1CharactersCharacterIdActivatePost operation in CharactersApi.
 * @export
 * @interface CharactersApiActivateCharacterApiV1CharactersCharacterIdActivatePostRequest
 */
export interface CharactersApiActivateCharacterApiV1CharactersCharacterIdActivatePostRequest {
  /**
   *
   * @type {string}
   * @memberof CharactersApiActivateCharacterApiV1CharactersCharacterIdActivatePost
   */
  readonly characterId: string

  /**
   *
   * @type {string}
   * @memberof CharactersApiActivateCharacterApiV1CharactersCharacterIdActivatePost
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for createCharacterApiV1CharactersPost operation in CharactersApi.
 * @export
 * @interface CharactersApiCreateCharacterApiV1CharactersPostRequest
 */
export interface CharactersApiCreateCharacterApiV1CharactersPostRequest {
  /**
   *
   * @type {CharacterCreate}
   * @memberof CharactersApiCreateCharacterApiV1CharactersPost
   */
  readonly characterCreate: CharacterCreate

  /**
   *
   * @type {string}
   * @memberof CharactersApiCreateCharacterApiV1CharactersPost
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for deleteCharacterApiV1CharactersCharacterIdDelete operation in CharactersApi.
 * @export
 * @interface CharactersApiDeleteCharacterApiV1CharactersCharacterIdDeleteRequest
 */
export interface CharactersApiDeleteCharacterApiV1CharactersCharacterIdDeleteRequest {
  /**
   *
   * @type {string}
   * @memberof CharactersApiDeleteCharacterApiV1CharactersCharacterIdDelete
   */
  readonly characterId: string

  /**
   *
   * @type {string}
   * @memberof CharactersApiDeleteCharacterApiV1CharactersCharacterIdDelete
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for getCharacterApiV1CharactersCharacterIdGet operation in CharactersApi.
 * @export
 * @interface CharactersApiGetCharacterApiV1CharactersCharacterIdGetRequest
 */
export interface CharactersApiGetCharacterApiV1CharactersCharacterIdGetRequest {
  /**
   *
   * @type {string}
   * @memberof CharactersApiGetCharacterApiV1CharactersCharacterIdGet
   */
  readonly characterId: string

  /**
   *
   * @type {string}
   * @memberof CharactersApiGetCharacterApiV1CharactersCharacterIdGet
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for getUserCharactersApiV1CharactersGet operation in CharactersApi.
 * @export
 * @interface CharactersApiGetUserCharactersApiV1CharactersGetRequest
 */
export interface CharactersApiGetUserCharactersApiV1CharactersGetRequest {
  /**
   *
   * @type {string}
   * @memberof CharactersApiGetUserCharactersApiV1CharactersGet
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for updateCharacterApiV1CharactersCharacterIdPut operation in CharactersApi.
 * @export
 * @interface CharactersApiUpdateCharacterApiV1CharactersCharacterIdPutRequest
 */
export interface CharactersApiUpdateCharacterApiV1CharactersCharacterIdPutRequest {
  /**
   *
   * @type {string}
   * @memberof CharactersApiUpdateCharacterApiV1CharactersCharacterIdPut
   */
  readonly characterId: string

  /**
   *
   * @type {CharacterUpdate}
   * @memberof CharactersApiUpdateCharacterApiV1CharactersCharacterIdPut
   */
  readonly characterUpdate: CharacterUpdate

  /**
   *
   * @type {string}
   * @memberof CharactersApiUpdateCharacterApiV1CharactersCharacterIdPut
   */
  readonly authToken?: string | null
}

/**
 * CharactersApi - object-oriented interface
 * @export
 * @class CharactersApi
 * @extends {BaseAPI}
 */
export class CharactersApi extends BaseAPI implements CharactersApiInterface {
  /**
   * キャラクターをアクティブにする
   * @summary Activate Character
   * @param {CharactersApiActivateCharacterApiV1CharactersCharacterIdActivatePostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CharactersApi
   */
  public activateCharacterApiV1CharactersCharacterIdActivatePost(
    requestParameters: CharactersApiActivateCharacterApiV1CharactersCharacterIdActivatePostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return CharactersApiFp(this.configuration)
      .activateCharacterApiV1CharactersCharacterIdActivatePost(
        requestParameters.characterId,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * 新しいキャラクター作成
   * @summary Create Character
   * @param {CharactersApiCreateCharacterApiV1CharactersPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CharactersApi
   */
  public createCharacterApiV1CharactersPost(
    requestParameters: CharactersApiCreateCharacterApiV1CharactersPostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return CharactersApiFp(this.configuration)
      .createCharacterApiV1CharactersPost(
        requestParameters.characterCreate,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * キャラクター削除
   * @summary Delete Character
   * @param {CharactersApiDeleteCharacterApiV1CharactersCharacterIdDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CharactersApi
   */
  public deleteCharacterApiV1CharactersCharacterIdDelete(
    requestParameters: CharactersApiDeleteCharacterApiV1CharactersCharacterIdDeleteRequest,
    options?: RawAxiosRequestConfig
  ) {
    return CharactersApiFp(this.configuration)
      .deleteCharacterApiV1CharactersCharacterIdDelete(
        requestParameters.characterId,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * 特定のキャラクター取得
   * @summary Get Character
   * @param {CharactersApiGetCharacterApiV1CharactersCharacterIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CharactersApi
   */
  public getCharacterApiV1CharactersCharacterIdGet(
    requestParameters: CharactersApiGetCharacterApiV1CharactersCharacterIdGetRequest,
    options?: RawAxiosRequestConfig
  ) {
    return CharactersApiFp(this.configuration)
      .getCharacterApiV1CharactersCharacterIdGet(
        requestParameters.characterId,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * ユーザーのキャラクター一覧取得
   * @summary Get User Characters
   * @param {CharactersApiGetUserCharactersApiV1CharactersGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CharactersApi
   */
  public getUserCharactersApiV1CharactersGet(
    requestParameters: CharactersApiGetUserCharactersApiV1CharactersGetRequest = {},
    options?: RawAxiosRequestConfig
  ) {
    return CharactersApiFp(this.configuration)
      .getUserCharactersApiV1CharactersGet(requestParameters.authToken, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * キャラクター更新
   * @summary Update Character
   * @param {CharactersApiUpdateCharacterApiV1CharactersCharacterIdPutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CharactersApi
   */
  public updateCharacterApiV1CharactersCharacterIdPut(
    requestParameters: CharactersApiUpdateCharacterApiV1CharactersCharacterIdPutRequest,
    options?: RawAxiosRequestConfig
  ) {
    return CharactersApiFp(this.configuration)
      .updateCharacterApiV1CharactersCharacterIdPut(
        requestParameters.characterId,
        requestParameters.characterUpdate,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }
}
