/* tslint:disable */
/* eslint-disable */
/**
 * GESTALOKA API
 * マルチプレイ・テキストMMO - ゲスタロカ API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AdminSPAdjustment } from '../models';
// @ts-ignore
import type { AdminSPAdjustmentResponse } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { PlayerSPDetail } from '../models';
// @ts-ignore
import type { SPTransactionHistory } from '../models';
// @ts-ignore
import type { SPTransactionType } from '../models';
/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * プレイヤーのSPを手動で調整。 管理者による付与・減算が可能。
         * @summary Adjust Player Sp
         * @param {AdminSPAdjustment} adminSPAdjustment 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adjustPlayerSpApiV1AdminAdminSpAdjustPost: async (adminSPAdjustment: AdminSPAdjustment, authToken?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminSPAdjustment' is not null or undefined
            assertParamExists('adjustPlayerSpApiV1AdminAdminSpAdjustPost', 'adminSPAdjustment', adminSPAdjustment)
            const localVarPath = `/api/v1/admin/admin/sp/adjust`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminSPAdjustment, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プレイヤーのSPを手動で調整。 管理者による付与・減算が可能。
         * @summary Adjust Player Sp
         * @param {AdminSPAdjustment} adminSPAdjustment 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adjustPlayerSpApiV1AdminAdminSpAdjustPost_1: async (adminSPAdjustment: AdminSPAdjustment, authToken?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminSPAdjustment' is not null or undefined
            assertParamExists('adjustPlayerSpApiV1AdminAdminSpAdjustPost_1', 'adminSPAdjustment', adminSPAdjustment)
            const localVarPath = `/api/v1/admin/admin/sp/adjust`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminSPAdjustment, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 複数プレイヤーのSPを一括調整。 イベント配布などに使用。
         * @summary Batch Adjust Sp
         * @param {Array<AdminSPAdjustment>} adminSPAdjustment 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchAdjustSpApiV1AdminAdminSpBatchAdjustPost: async (adminSPAdjustment: Array<AdminSPAdjustment>, authToken?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminSPAdjustment' is not null or undefined
            assertParamExists('batchAdjustSpApiV1AdminAdminSpBatchAdjustPost', 'adminSPAdjustment', adminSPAdjustment)
            const localVarPath = `/api/v1/admin/admin/sp/batch-adjust`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminSPAdjustment, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 複数プレイヤーのSPを一括調整。 イベント配布などに使用。
         * @summary Batch Adjust Sp
         * @param {Array<AdminSPAdjustment>} adminSPAdjustment 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchAdjustSpApiV1AdminAdminSpBatchAdjustPost_2: async (adminSPAdjustment: Array<AdminSPAdjustment>, authToken?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminSPAdjustment' is not null or undefined
            assertParamExists('batchAdjustSpApiV1AdminAdminSpBatchAdjustPost_2', 'adminSPAdjustment', adminSPAdjustment)
            const localVarPath = `/api/v1/admin/admin/sp/batch-adjust`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminSPAdjustment, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 全プレイヤーのSP情報を取得。 検索機能付き（ユーザー名、メールアドレス）。
         * @summary Get All Players Sp
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {string | null} [search] 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPlayersSpApiV1AdminAdminSpPlayersGet: async (skip?: number, limit?: number, search?: string | null, authToken?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/admin/admin/sp/players`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 全プレイヤーのSP情報を取得。 検索機能付き（ユーザー名、メールアドレス）。
         * @summary Get All Players Sp
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {string | null} [search] 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPlayersSpApiV1AdminAdminSpPlayersGet_3: async (skip?: number, limit?: number, search?: string | null, authToken?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/admin/admin/sp/players`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 特定プレイヤーのSP情報を取得。
         * @summary Get Player Sp Detail
         * @param {string} userId 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGet: async (userId: string, authToken?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGet', 'userId', userId)
            const localVarPath = `/api/v1/admin/admin/sp/players/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 特定プレイヤーのSP情報を取得。
         * @summary Get Player Sp Detail
         * @param {string} userId 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGet_4: async (userId: string, authToken?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGet_4', 'userId', userId)
            const localVarPath = `/api/v1/admin/admin/sp/players/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 特定プレイヤーのSP取引履歴を取得。
         * @summary Get Player Sp Transactions
         * @param {string} userId 
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {SPTransactionType | null} [transactionType] 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet: async (userId: string, skip?: number, limit?: number, transactionType?: SPTransactionType | null, authToken?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet', 'userId', userId)
            const localVarPath = `/api/v1/admin/admin/sp/players/{user_id}/transactions`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (transactionType !== undefined) {
                localVarQueryParameter['transaction_type'] = transactionType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 特定プレイヤーのSP取引履歴を取得。
         * @summary Get Player Sp Transactions
         * @param {string} userId 
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {SPTransactionType | null} [transactionType] 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet_5: async (userId: string, skip?: number, limit?: number, transactionType?: SPTransactionType | null, authToken?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet_5', 'userId', userId)
            const localVarPath = `/api/v1/admin/admin/sp/players/{user_id}/transactions`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (transactionType !== undefined) {
                localVarQueryParameter['transaction_type'] = transactionType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration)
    return {
        /**
         * プレイヤーのSPを手動で調整。 管理者による付与・減算が可能。
         * @summary Adjust Player Sp
         * @param {AdminSPAdjustment} adminSPAdjustment 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adjustPlayerSpApiV1AdminAdminSpAdjustPost(adminSPAdjustment: AdminSPAdjustment, authToken?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminSPAdjustmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adjustPlayerSpApiV1AdminAdminSpAdjustPost(adminSPAdjustment, authToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adjustPlayerSpApiV1AdminAdminSpAdjustPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * プレイヤーのSPを手動で調整。 管理者による付与・減算が可能。
         * @summary Adjust Player Sp
         * @param {AdminSPAdjustment} adminSPAdjustment 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adjustPlayerSpApiV1AdminAdminSpAdjustPost_1(adminSPAdjustment: AdminSPAdjustment, authToken?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminSPAdjustmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adjustPlayerSpApiV1AdminAdminSpAdjustPost_1(adminSPAdjustment, authToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adjustPlayerSpApiV1AdminAdminSpAdjustPost_1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 複数プレイヤーのSPを一括調整。 イベント配布などに使用。
         * @summary Batch Adjust Sp
         * @param {Array<AdminSPAdjustment>} adminSPAdjustment 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async batchAdjustSpApiV1AdminAdminSpBatchAdjustPost(adminSPAdjustment: Array<AdminSPAdjustment>, authToken?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AdminSPAdjustmentResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.batchAdjustSpApiV1AdminAdminSpBatchAdjustPost(adminSPAdjustment, authToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.batchAdjustSpApiV1AdminAdminSpBatchAdjustPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 複数プレイヤーのSPを一括調整。 イベント配布などに使用。
         * @summary Batch Adjust Sp
         * @param {Array<AdminSPAdjustment>} adminSPAdjustment 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async batchAdjustSpApiV1AdminAdminSpBatchAdjustPost_2(adminSPAdjustment: Array<AdminSPAdjustment>, authToken?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AdminSPAdjustmentResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.batchAdjustSpApiV1AdminAdminSpBatchAdjustPost_2(adminSPAdjustment, authToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.batchAdjustSpApiV1AdminAdminSpBatchAdjustPost_2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 全プレイヤーのSP情報を取得。 検索機能付き（ユーザー名、メールアドレス）。
         * @summary Get All Players Sp
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {string | null} [search] 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPlayersSpApiV1AdminAdminSpPlayersGet(skip?: number, limit?: number, search?: string | null, authToken?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PlayerSPDetail>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPlayersSpApiV1AdminAdminSpPlayersGet(skip, limit, search, authToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.getAllPlayersSpApiV1AdminAdminSpPlayersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 全プレイヤーのSP情報を取得。 検索機能付き（ユーザー名、メールアドレス）。
         * @summary Get All Players Sp
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {string | null} [search] 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPlayersSpApiV1AdminAdminSpPlayersGet_3(skip?: number, limit?: number, search?: string | null, authToken?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PlayerSPDetail>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPlayersSpApiV1AdminAdminSpPlayersGet_3(skip, limit, search, authToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.getAllPlayersSpApiV1AdminAdminSpPlayersGet_3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 特定プレイヤーのSP情報を取得。
         * @summary Get Player Sp Detail
         * @param {string} userId 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGet(userId: string, authToken?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerSPDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGet(userId, authToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.getPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 特定プレイヤーのSP情報を取得。
         * @summary Get Player Sp Detail
         * @param {string} userId 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGet_4(userId: string, authToken?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerSPDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGet_4(userId, authToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.getPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGet_4']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 特定プレイヤーのSP取引履歴を取得。
         * @summary Get Player Sp Transactions
         * @param {string} userId 
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {SPTransactionType | null} [transactionType] 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet(userId: string, skip?: number, limit?: number, transactionType?: SPTransactionType | null, authToken?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SPTransactionHistory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet(userId, skip, limit, transactionType, authToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.getPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 特定プレイヤーのSP取引履歴を取得。
         * @summary Get Player Sp Transactions
         * @param {string} userId 
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {SPTransactionType | null} [transactionType] 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet_5(userId: string, skip?: number, limit?: number, transactionType?: SPTransactionType | null, authToken?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SPTransactionHistory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet_5(userId, skip, limit, transactionType, authToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.getPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet_5']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminApiFp(configuration)
    return {
        /**
         * プレイヤーのSPを手動で調整。 管理者による付与・減算が可能。
         * @summary Adjust Player Sp
         * @param {AdminApiAdjustPlayerSpApiV1AdminAdminSpAdjustPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adjustPlayerSpApiV1AdminAdminSpAdjustPost(requestParameters: AdminApiAdjustPlayerSpApiV1AdminAdminSpAdjustPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AdminSPAdjustmentResponse> {
            return localVarFp.adjustPlayerSpApiV1AdminAdminSpAdjustPost(requestParameters.adminSPAdjustment, requestParameters.authToken, options).then((request) => request(axios, basePath));
        },
        /**
         * プレイヤーのSPを手動で調整。 管理者による付与・減算が可能。
         * @summary Adjust Player Sp
         * @param {AdminApiAdjustPlayerSpApiV1AdminAdminSpAdjustPost0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adjustPlayerSpApiV1AdminAdminSpAdjustPost_1(requestParameters: AdminApiAdjustPlayerSpApiV1AdminAdminSpAdjustPost0Request, options?: RawAxiosRequestConfig): AxiosPromise<AdminSPAdjustmentResponse> {
            return localVarFp.adjustPlayerSpApiV1AdminAdminSpAdjustPost_1(requestParameters.adminSPAdjustment, requestParameters.authToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 複数プレイヤーのSPを一括調整。 イベント配布などに使用。
         * @summary Batch Adjust Sp
         * @param {AdminApiBatchAdjustSpApiV1AdminAdminSpBatchAdjustPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchAdjustSpApiV1AdminAdminSpBatchAdjustPost(requestParameters: AdminApiBatchAdjustSpApiV1AdminAdminSpBatchAdjustPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<AdminSPAdjustmentResponse>> {
            return localVarFp.batchAdjustSpApiV1AdminAdminSpBatchAdjustPost(requestParameters.adminSPAdjustment, requestParameters.authToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 複数プレイヤーのSPを一括調整。 イベント配布などに使用。
         * @summary Batch Adjust Sp
         * @param {AdminApiBatchAdjustSpApiV1AdminAdminSpBatchAdjustPost0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchAdjustSpApiV1AdminAdminSpBatchAdjustPost_2(requestParameters: AdminApiBatchAdjustSpApiV1AdminAdminSpBatchAdjustPost0Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<AdminSPAdjustmentResponse>> {
            return localVarFp.batchAdjustSpApiV1AdminAdminSpBatchAdjustPost_2(requestParameters.adminSPAdjustment, requestParameters.authToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 全プレイヤーのSP情報を取得。 検索機能付き（ユーザー名、メールアドレス）。
         * @summary Get All Players Sp
         * @param {AdminApiGetAllPlayersSpApiV1AdminAdminSpPlayersGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPlayersSpApiV1AdminAdminSpPlayersGet(requestParameters: AdminApiGetAllPlayersSpApiV1AdminAdminSpPlayersGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<PlayerSPDetail>> {
            return localVarFp.getAllPlayersSpApiV1AdminAdminSpPlayersGet(requestParameters.skip, requestParameters.limit, requestParameters.search, requestParameters.authToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 全プレイヤーのSP情報を取得。 検索機能付き（ユーザー名、メールアドレス）。
         * @summary Get All Players Sp
         * @param {AdminApiGetAllPlayersSpApiV1AdminAdminSpPlayersGet0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPlayersSpApiV1AdminAdminSpPlayersGet_3(requestParameters: AdminApiGetAllPlayersSpApiV1AdminAdminSpPlayersGet0Request = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<PlayerSPDetail>> {
            return localVarFp.getAllPlayersSpApiV1AdminAdminSpPlayersGet_3(requestParameters.skip, requestParameters.limit, requestParameters.search, requestParameters.authToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 特定プレイヤーのSP情報を取得。
         * @summary Get Player Sp Detail
         * @param {AdminApiGetPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGet(requestParameters: AdminApiGetPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PlayerSPDetail> {
            return localVarFp.getPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGet(requestParameters.userId, requestParameters.authToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 特定プレイヤーのSP情報を取得。
         * @summary Get Player Sp Detail
         * @param {AdminApiGetPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGet0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGet_4(requestParameters: AdminApiGetPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGet0Request, options?: RawAxiosRequestConfig): AxiosPromise<PlayerSPDetail> {
            return localVarFp.getPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGet_4(requestParameters.userId, requestParameters.authToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 特定プレイヤーのSP取引履歴を取得。
         * @summary Get Player Sp Transactions
         * @param {AdminApiGetPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet(requestParameters: AdminApiGetPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<SPTransactionHistory> {
            return localVarFp.getPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet(requestParameters.userId, requestParameters.skip, requestParameters.limit, requestParameters.transactionType, requestParameters.authToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 特定プレイヤーのSP取引履歴を取得。
         * @summary Get Player Sp Transactions
         * @param {AdminApiGetPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet_5(requestParameters: AdminApiGetPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet0Request, options?: RawAxiosRequestConfig): AxiosPromise<SPTransactionHistory> {
            return localVarFp.getPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet_5(requestParameters.userId, requestParameters.skip, requestParameters.limit, requestParameters.transactionType, requestParameters.authToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminApi - interface
 * @export
 * @interface AdminApi
 */
export interface AdminApiInterface {
    /**
     * プレイヤーのSPを手動で調整。 管理者による付与・減算が可能。
     * @summary Adjust Player Sp
     * @param {AdminApiAdjustPlayerSpApiV1AdminAdminSpAdjustPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adjustPlayerSpApiV1AdminAdminSpAdjustPost(requestParameters: AdminApiAdjustPlayerSpApiV1AdminAdminSpAdjustPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AdminSPAdjustmentResponse>;

    /**
     * プレイヤーのSPを手動で調整。 管理者による付与・減算が可能。
     * @summary Adjust Player Sp
     * @param {AdminApiAdjustPlayerSpApiV1AdminAdminSpAdjustPost0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adjustPlayerSpApiV1AdminAdminSpAdjustPost_1(requestParameters: AdminApiAdjustPlayerSpApiV1AdminAdminSpAdjustPost0Request, options?: RawAxiosRequestConfig): AxiosPromise<AdminSPAdjustmentResponse>;

    /**
     * 複数プレイヤーのSPを一括調整。 イベント配布などに使用。
     * @summary Batch Adjust Sp
     * @param {AdminApiBatchAdjustSpApiV1AdminAdminSpBatchAdjustPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    batchAdjustSpApiV1AdminAdminSpBatchAdjustPost(requestParameters: AdminApiBatchAdjustSpApiV1AdminAdminSpBatchAdjustPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<AdminSPAdjustmentResponse>>;

    /**
     * 複数プレイヤーのSPを一括調整。 イベント配布などに使用。
     * @summary Batch Adjust Sp
     * @param {AdminApiBatchAdjustSpApiV1AdminAdminSpBatchAdjustPost0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    batchAdjustSpApiV1AdminAdminSpBatchAdjustPost_2(requestParameters: AdminApiBatchAdjustSpApiV1AdminAdminSpBatchAdjustPost0Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<AdminSPAdjustmentResponse>>;

    /**
     * 全プレイヤーのSP情報を取得。 検索機能付き（ユーザー名、メールアドレス）。
     * @summary Get All Players Sp
     * @param {AdminApiGetAllPlayersSpApiV1AdminAdminSpPlayersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    getAllPlayersSpApiV1AdminAdminSpPlayersGet(requestParameters?: AdminApiGetAllPlayersSpApiV1AdminAdminSpPlayersGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<PlayerSPDetail>>;

    /**
     * 全プレイヤーのSP情報を取得。 検索機能付き（ユーザー名、メールアドレス）。
     * @summary Get All Players Sp
     * @param {AdminApiGetAllPlayersSpApiV1AdminAdminSpPlayersGet0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    getAllPlayersSpApiV1AdminAdminSpPlayersGet_3(requestParameters?: AdminApiGetAllPlayersSpApiV1AdminAdminSpPlayersGet0Request, options?: RawAxiosRequestConfig): AxiosPromise<Array<PlayerSPDetail>>;

    /**
     * 特定プレイヤーのSP情報を取得。
     * @summary Get Player Sp Detail
     * @param {AdminApiGetPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    getPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGet(requestParameters: AdminApiGetPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PlayerSPDetail>;

    /**
     * 特定プレイヤーのSP情報を取得。
     * @summary Get Player Sp Detail
     * @param {AdminApiGetPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGet0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    getPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGet_4(requestParameters: AdminApiGetPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGet0Request, options?: RawAxiosRequestConfig): AxiosPromise<PlayerSPDetail>;

    /**
     * 特定プレイヤーのSP取引履歴を取得。
     * @summary Get Player Sp Transactions
     * @param {AdminApiGetPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    getPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet(requestParameters: AdminApiGetPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<SPTransactionHistory>;

    /**
     * 特定プレイヤーのSP取引履歴を取得。
     * @summary Get Player Sp Transactions
     * @param {AdminApiGetPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    getPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet_5(requestParameters: AdminApiGetPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet0Request, options?: RawAxiosRequestConfig): AxiosPromise<SPTransactionHistory>;

}

/**
 * Request parameters for adjustPlayerSpApiV1AdminAdminSpAdjustPost operation in AdminApi.
 * @export
 * @interface AdminApiAdjustPlayerSpApiV1AdminAdminSpAdjustPostRequest
 */
export interface AdminApiAdjustPlayerSpApiV1AdminAdminSpAdjustPostRequest {
    /**
     * 
     * @type {AdminSPAdjustment}
     * @memberof AdminApiAdjustPlayerSpApiV1AdminAdminSpAdjustPost
     */
    readonly adminSPAdjustment: AdminSPAdjustment

    /**
     * 
     * @type {string}
     * @memberof AdminApiAdjustPlayerSpApiV1AdminAdminSpAdjustPost
     */
    readonly authToken?: string | null
}

/**
 * Request parameters for adjustPlayerSpApiV1AdminAdminSpAdjustPost_1 operation in AdminApi.
 * @export
 * @interface AdminApiAdjustPlayerSpApiV1AdminAdminSpAdjustPost0Request
 */
export interface AdminApiAdjustPlayerSpApiV1AdminAdminSpAdjustPost0Request {
    /**
     * 
     * @type {AdminSPAdjustment}
     * @memberof AdminApiAdjustPlayerSpApiV1AdminAdminSpAdjustPost0
     */
    readonly adminSPAdjustment: AdminSPAdjustment

    /**
     * 
     * @type {string}
     * @memberof AdminApiAdjustPlayerSpApiV1AdminAdminSpAdjustPost0
     */
    readonly authToken?: string | null
}

/**
 * Request parameters for batchAdjustSpApiV1AdminAdminSpBatchAdjustPost operation in AdminApi.
 * @export
 * @interface AdminApiBatchAdjustSpApiV1AdminAdminSpBatchAdjustPostRequest
 */
export interface AdminApiBatchAdjustSpApiV1AdminAdminSpBatchAdjustPostRequest {
    /**
     * 
     * @type {Array<AdminSPAdjustment>}
     * @memberof AdminApiBatchAdjustSpApiV1AdminAdminSpBatchAdjustPost
     */
    readonly adminSPAdjustment: Array<AdminSPAdjustment>

    /**
     * 
     * @type {string}
     * @memberof AdminApiBatchAdjustSpApiV1AdminAdminSpBatchAdjustPost
     */
    readonly authToken?: string | null
}

/**
 * Request parameters for batchAdjustSpApiV1AdminAdminSpBatchAdjustPost_2 operation in AdminApi.
 * @export
 * @interface AdminApiBatchAdjustSpApiV1AdminAdminSpBatchAdjustPost0Request
 */
export interface AdminApiBatchAdjustSpApiV1AdminAdminSpBatchAdjustPost0Request {
    /**
     * 
     * @type {Array<AdminSPAdjustment>}
     * @memberof AdminApiBatchAdjustSpApiV1AdminAdminSpBatchAdjustPost0
     */
    readonly adminSPAdjustment: Array<AdminSPAdjustment>

    /**
     * 
     * @type {string}
     * @memberof AdminApiBatchAdjustSpApiV1AdminAdminSpBatchAdjustPost0
     */
    readonly authToken?: string | null
}

/**
 * Request parameters for getAllPlayersSpApiV1AdminAdminSpPlayersGet operation in AdminApi.
 * @export
 * @interface AdminApiGetAllPlayersSpApiV1AdminAdminSpPlayersGetRequest
 */
export interface AdminApiGetAllPlayersSpApiV1AdminAdminSpPlayersGetRequest {
    /**
     * 
     * @type {number}
     * @memberof AdminApiGetAllPlayersSpApiV1AdminAdminSpPlayersGet
     */
    readonly skip?: number

    /**
     * 
     * @type {number}
     * @memberof AdminApiGetAllPlayersSpApiV1AdminAdminSpPlayersGet
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof AdminApiGetAllPlayersSpApiV1AdminAdminSpPlayersGet
     */
    readonly search?: string | null

    /**
     * 
     * @type {string}
     * @memberof AdminApiGetAllPlayersSpApiV1AdminAdminSpPlayersGet
     */
    readonly authToken?: string | null
}

/**
 * Request parameters for getAllPlayersSpApiV1AdminAdminSpPlayersGet_3 operation in AdminApi.
 * @export
 * @interface AdminApiGetAllPlayersSpApiV1AdminAdminSpPlayersGet0Request
 */
export interface AdminApiGetAllPlayersSpApiV1AdminAdminSpPlayersGet0Request {
    /**
     * 
     * @type {number}
     * @memberof AdminApiGetAllPlayersSpApiV1AdminAdminSpPlayersGet0
     */
    readonly skip?: number

    /**
     * 
     * @type {number}
     * @memberof AdminApiGetAllPlayersSpApiV1AdminAdminSpPlayersGet0
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof AdminApiGetAllPlayersSpApiV1AdminAdminSpPlayersGet0
     */
    readonly search?: string | null

    /**
     * 
     * @type {string}
     * @memberof AdminApiGetAllPlayersSpApiV1AdminAdminSpPlayersGet0
     */
    readonly authToken?: string | null
}

/**
 * Request parameters for getPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGet operation in AdminApi.
 * @export
 * @interface AdminApiGetPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGetRequest
 */
export interface AdminApiGetPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminApiGetPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGet
     */
    readonly userId: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiGetPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGet
     */
    readonly authToken?: string | null
}

/**
 * Request parameters for getPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGet_4 operation in AdminApi.
 * @export
 * @interface AdminApiGetPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGet0Request
 */
export interface AdminApiGetPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGet0Request {
    /**
     * 
     * @type {string}
     * @memberof AdminApiGetPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGet0
     */
    readonly userId: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiGetPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGet0
     */
    readonly authToken?: string | null
}

/**
 * Request parameters for getPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet operation in AdminApi.
 * @export
 * @interface AdminApiGetPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGetRequest
 */
export interface AdminApiGetPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminApiGetPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet
     */
    readonly userId: string

    /**
     * 
     * @type {number}
     * @memberof AdminApiGetPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet
     */
    readonly skip?: number

    /**
     * 
     * @type {number}
     * @memberof AdminApiGetPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet
     */
    readonly limit?: number

    /**
     * 
     * @type {SPTransactionType}
     * @memberof AdminApiGetPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet
     */
    readonly transactionType?: SPTransactionType | null

    /**
     * 
     * @type {string}
     * @memberof AdminApiGetPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet
     */
    readonly authToken?: string | null
}

/**
 * Request parameters for getPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet_5 operation in AdminApi.
 * @export
 * @interface AdminApiGetPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet0Request
 */
export interface AdminApiGetPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet0Request {
    /**
     * 
     * @type {string}
     * @memberof AdminApiGetPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet0
     */
    readonly userId: string

    /**
     * 
     * @type {number}
     * @memberof AdminApiGetPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet0
     */
    readonly skip?: number

    /**
     * 
     * @type {number}
     * @memberof AdminApiGetPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet0
     */
    readonly limit?: number

    /**
     * 
     * @type {SPTransactionType}
     * @memberof AdminApiGetPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet0
     */
    readonly transactionType?: SPTransactionType | null

    /**
     * 
     * @type {string}
     * @memberof AdminApiGetPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet0
     */
    readonly authToken?: string | null
}

/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI implements AdminApiInterface {
    /**
     * プレイヤーのSPを手動で調整。 管理者による付与・減算が可能。
     * @summary Adjust Player Sp
     * @param {AdminApiAdjustPlayerSpApiV1AdminAdminSpAdjustPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adjustPlayerSpApiV1AdminAdminSpAdjustPost(requestParameters: AdminApiAdjustPlayerSpApiV1AdminAdminSpAdjustPostRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adjustPlayerSpApiV1AdminAdminSpAdjustPost(requestParameters.adminSPAdjustment, requestParameters.authToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プレイヤーのSPを手動で調整。 管理者による付与・減算が可能。
     * @summary Adjust Player Sp
     * @param {AdminApiAdjustPlayerSpApiV1AdminAdminSpAdjustPost0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adjustPlayerSpApiV1AdminAdminSpAdjustPost_1(requestParameters: AdminApiAdjustPlayerSpApiV1AdminAdminSpAdjustPost0Request, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adjustPlayerSpApiV1AdminAdminSpAdjustPost_1(requestParameters.adminSPAdjustment, requestParameters.authToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 複数プレイヤーのSPを一括調整。 イベント配布などに使用。
     * @summary Batch Adjust Sp
     * @param {AdminApiBatchAdjustSpApiV1AdminAdminSpBatchAdjustPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public batchAdjustSpApiV1AdminAdminSpBatchAdjustPost(requestParameters: AdminApiBatchAdjustSpApiV1AdminAdminSpBatchAdjustPostRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).batchAdjustSpApiV1AdminAdminSpBatchAdjustPost(requestParameters.adminSPAdjustment, requestParameters.authToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 複数プレイヤーのSPを一括調整。 イベント配布などに使用。
     * @summary Batch Adjust Sp
     * @param {AdminApiBatchAdjustSpApiV1AdminAdminSpBatchAdjustPost0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public batchAdjustSpApiV1AdminAdminSpBatchAdjustPost_2(requestParameters: AdminApiBatchAdjustSpApiV1AdminAdminSpBatchAdjustPost0Request, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).batchAdjustSpApiV1AdminAdminSpBatchAdjustPost_2(requestParameters.adminSPAdjustment, requestParameters.authToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 全プレイヤーのSP情報を取得。 検索機能付き（ユーザー名、メールアドレス）。
     * @summary Get All Players Sp
     * @param {AdminApiGetAllPlayersSpApiV1AdminAdminSpPlayersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public getAllPlayersSpApiV1AdminAdminSpPlayersGet(requestParameters: AdminApiGetAllPlayersSpApiV1AdminAdminSpPlayersGetRequest = {}, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).getAllPlayersSpApiV1AdminAdminSpPlayersGet(requestParameters.skip, requestParameters.limit, requestParameters.search, requestParameters.authToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 全プレイヤーのSP情報を取得。 検索機能付き（ユーザー名、メールアドレス）。
     * @summary Get All Players Sp
     * @param {AdminApiGetAllPlayersSpApiV1AdminAdminSpPlayersGet0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public getAllPlayersSpApiV1AdminAdminSpPlayersGet_3(requestParameters: AdminApiGetAllPlayersSpApiV1AdminAdminSpPlayersGet0Request = {}, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).getAllPlayersSpApiV1AdminAdminSpPlayersGet_3(requestParameters.skip, requestParameters.limit, requestParameters.search, requestParameters.authToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 特定プレイヤーのSP情報を取得。
     * @summary Get Player Sp Detail
     * @param {AdminApiGetPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public getPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGet(requestParameters: AdminApiGetPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGetRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).getPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGet(requestParameters.userId, requestParameters.authToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 特定プレイヤーのSP情報を取得。
     * @summary Get Player Sp Detail
     * @param {AdminApiGetPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGet0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public getPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGet_4(requestParameters: AdminApiGetPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGet0Request, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).getPlayerSpDetailApiV1AdminAdminSpPlayersUserIdGet_4(requestParameters.userId, requestParameters.authToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 特定プレイヤーのSP取引履歴を取得。
     * @summary Get Player Sp Transactions
     * @param {AdminApiGetPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public getPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet(requestParameters: AdminApiGetPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGetRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).getPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet(requestParameters.userId, requestParameters.skip, requestParameters.limit, requestParameters.transactionType, requestParameters.authToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 特定プレイヤーのSP取引履歴を取得。
     * @summary Get Player Sp Transactions
     * @param {AdminApiGetPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public getPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet_5(requestParameters: AdminApiGetPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet0Request, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).getPlayerSpTransactionsApiV1AdminAdminSpPlayersUserIdTransactionsGet_5(requestParameters.userId, requestParameters.skip, requestParameters.limit, requestParameters.transactionType, requestParameters.authToken, options).then((request) => request(this.axios, this.basePath));
    }
}

