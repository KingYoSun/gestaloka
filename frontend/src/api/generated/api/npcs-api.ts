// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * GESTALOKA API
 * マルチプレイ・テキストMMO - ゲスタロカ API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { NPCLocationUpdate } from '../models';
// @ts-ignore
import type { NPCProfile } from '../models';
/**
 * NpcsApi - axios parameter creator
 * @export
 */
export const NpcsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 特定のNPCの詳細を取得
         * @summary Get Npc
         * @param {string} npcId 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNpcApiV1NpcsNpcsNpcIdGet: async (npcId: string, authToken?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'npcId' is not null or undefined
            assertParamExists('getNpcApiV1NpcsNpcsNpcIdGet', 'npcId', npcId)
            const localVarPath = `/api/v1/npcs/npcs/{npc_id}`
                .replace(`{${"npc_id"}}`, encodeURIComponent(String(npcId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 特定の場所にいるNPCの一覧を取得
         * @summary Get Npcs In Location
         * @param {string} locationName 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNpcsInLocationApiV1NpcsLocationsLocationNameNpcsGet: async (locationName: string, authToken?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationName' is not null or undefined
            assertParamExists('getNpcsInLocationApiV1NpcsLocationsLocationNameNpcsGet', 'locationName', locationName)
            const localVarPath = `/api/v1/npcs/locations/{location_name}/npcs`
                .replace(`{${"location_name"}}`, encodeURIComponent(String(locationName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * NPCの一覧を取得  フィルタリング: - location: 特定の場所にいるNPCのみ - npc_type: LOG_NPC, PERMANENT_NPC, TEMPORARY_NPC - is_active: アクティブなNPCのみ
         * @summary List Npcs
         * @param {string | null} [location] 
         * @param {string | null} [npcType] 
         * @param {boolean} [isActive] 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNpcsApiV1NpcsNpcsGet: async (location?: string | null, npcType?: string | null, isActive?: boolean, authToken?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/npcs/npcs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (npcType !== undefined) {
                localVarQueryParameter['npc_type'] = npcType;
            }

            if (isActive !== undefined) {
                localVarQueryParameter['is_active'] = isActive;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * NPCを別の場所に移動（GM権限が必要）
         * @summary Move Npc
         * @param {string} npcId 
         * @param {NPCLocationUpdate} nPCLocationUpdate 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveNpcApiV1NpcsNpcsNpcIdMovePost: async (npcId: string, nPCLocationUpdate: NPCLocationUpdate, authToken?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'npcId' is not null or undefined
            assertParamExists('moveNpcApiV1NpcsNpcsNpcIdMovePost', 'npcId', npcId)
            // verify required parameter 'nPCLocationUpdate' is not null or undefined
            assertParamExists('moveNpcApiV1NpcsNpcsNpcIdMovePost', 'nPCLocationUpdate', nPCLocationUpdate)
            const localVarPath = `/api/v1/npcs/npcs/{npc_id}/move`
                .replace(`{${"npc_id"}}`, encodeURIComponent(String(npcId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nPCLocationUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NpcsApi - functional programming interface
 * @export
 */
export const NpcsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NpcsApiAxiosParamCreator(configuration)
    return {
        /**
         * 特定のNPCの詳細を取得
         * @summary Get Npc
         * @param {string} npcId 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNpcApiV1NpcsNpcsNpcIdGet(npcId: string, authToken?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NPCProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNpcApiV1NpcsNpcsNpcIdGet(npcId, authToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NpcsApi.getNpcApiV1NpcsNpcsNpcIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 特定の場所にいるNPCの一覧を取得
         * @summary Get Npcs In Location
         * @param {string} locationName 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNpcsInLocationApiV1NpcsLocationsLocationNameNpcsGet(locationName: string, authToken?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NPCProfile>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNpcsInLocationApiV1NpcsLocationsLocationNameNpcsGet(locationName, authToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NpcsApi.getNpcsInLocationApiV1NpcsLocationsLocationNameNpcsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * NPCの一覧を取得  フィルタリング: - location: 特定の場所にいるNPCのみ - npc_type: LOG_NPC, PERMANENT_NPC, TEMPORARY_NPC - is_active: アクティブなNPCのみ
         * @summary List Npcs
         * @param {string | null} [location] 
         * @param {string | null} [npcType] 
         * @param {boolean} [isActive] 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listNpcsApiV1NpcsNpcsGet(location?: string | null, npcType?: string | null, isActive?: boolean, authToken?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NPCProfile>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listNpcsApiV1NpcsNpcsGet(location, npcType, isActive, authToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NpcsApi.listNpcsApiV1NpcsNpcsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * NPCを別の場所に移動（GM権限が必要）
         * @summary Move Npc
         * @param {string} npcId 
         * @param {NPCLocationUpdate} nPCLocationUpdate 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moveNpcApiV1NpcsNpcsNpcIdMovePost(npcId: string, nPCLocationUpdate: NPCLocationUpdate, authToken?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moveNpcApiV1NpcsNpcsNpcIdMovePost(npcId, nPCLocationUpdate, authToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NpcsApi.moveNpcApiV1NpcsNpcsNpcIdMovePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NpcsApi - factory interface
 * @export
 */
export const NpcsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NpcsApiFp(configuration)
    return {
        /**
         * 特定のNPCの詳細を取得
         * @summary Get Npc
         * @param {NpcsApiGetNpcApiV1NpcsNpcsNpcIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNpcApiV1NpcsNpcsNpcIdGet(requestParameters: NpcsApiGetNpcApiV1NpcsNpcsNpcIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<NPCProfile> {
            return localVarFp.getNpcApiV1NpcsNpcsNpcIdGet(requestParameters.npcId, requestParameters.authToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 特定の場所にいるNPCの一覧を取得
         * @summary Get Npcs In Location
         * @param {NpcsApiGetNpcsInLocationApiV1NpcsLocationsLocationNameNpcsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNpcsInLocationApiV1NpcsLocationsLocationNameNpcsGet(requestParameters: NpcsApiGetNpcsInLocationApiV1NpcsLocationsLocationNameNpcsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<NPCProfile>> {
            return localVarFp.getNpcsInLocationApiV1NpcsLocationsLocationNameNpcsGet(requestParameters.locationName, requestParameters.authToken, options).then((request) => request(axios, basePath));
        },
        /**
         * NPCの一覧を取得  フィルタリング: - location: 特定の場所にいるNPCのみ - npc_type: LOG_NPC, PERMANENT_NPC, TEMPORARY_NPC - is_active: アクティブなNPCのみ
         * @summary List Npcs
         * @param {NpcsApiListNpcsApiV1NpcsNpcsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNpcsApiV1NpcsNpcsGet(requestParameters: NpcsApiListNpcsApiV1NpcsNpcsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<NPCProfile>> {
            return localVarFp.listNpcsApiV1NpcsNpcsGet(requestParameters.location, requestParameters.npcType, requestParameters.isActive, requestParameters.authToken, options).then((request) => request(axios, basePath));
        },
        /**
         * NPCを別の場所に移動（GM権限が必要）
         * @summary Move Npc
         * @param {NpcsApiMoveNpcApiV1NpcsNpcsNpcIdMovePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveNpcApiV1NpcsNpcsNpcIdMovePost(requestParameters: NpcsApiMoveNpcApiV1NpcsNpcsNpcIdMovePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.moveNpcApiV1NpcsNpcsNpcIdMovePost(requestParameters.npcId, requestParameters.nPCLocationUpdate, requestParameters.authToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NpcsApi - interface
 * @export
 * @interface NpcsApi
 */
export interface NpcsApiInterface {
    /**
     * 特定のNPCの詳細を取得
     * @summary Get Npc
     * @param {NpcsApiGetNpcApiV1NpcsNpcsNpcIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NpcsApiInterface
     */
    getNpcApiV1NpcsNpcsNpcIdGet(requestParameters: NpcsApiGetNpcApiV1NpcsNpcsNpcIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<NPCProfile>;

    /**
     * 特定の場所にいるNPCの一覧を取得
     * @summary Get Npcs In Location
     * @param {NpcsApiGetNpcsInLocationApiV1NpcsLocationsLocationNameNpcsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NpcsApiInterface
     */
    getNpcsInLocationApiV1NpcsLocationsLocationNameNpcsGet(requestParameters: NpcsApiGetNpcsInLocationApiV1NpcsLocationsLocationNameNpcsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<NPCProfile>>;

    /**
     * NPCの一覧を取得  フィルタリング: - location: 特定の場所にいるNPCのみ - npc_type: LOG_NPC, PERMANENT_NPC, TEMPORARY_NPC - is_active: アクティブなNPCのみ
     * @summary List Npcs
     * @param {NpcsApiListNpcsApiV1NpcsNpcsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NpcsApiInterface
     */
    listNpcsApiV1NpcsNpcsGet(requestParameters?: NpcsApiListNpcsApiV1NpcsNpcsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<NPCProfile>>;

    /**
     * NPCを別の場所に移動（GM権限が必要）
     * @summary Move Npc
     * @param {NpcsApiMoveNpcApiV1NpcsNpcsNpcIdMovePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NpcsApiInterface
     */
    moveNpcApiV1NpcsNpcsNpcIdMovePost(requestParameters: NpcsApiMoveNpcApiV1NpcsNpcsNpcIdMovePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<object>;

}

/**
 * Request parameters for getNpcApiV1NpcsNpcsNpcIdGet operation in NpcsApi.
 * @export
 * @interface NpcsApiGetNpcApiV1NpcsNpcsNpcIdGetRequest
 */
export interface NpcsApiGetNpcApiV1NpcsNpcsNpcIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof NpcsApiGetNpcApiV1NpcsNpcsNpcIdGet
     */
    readonly npcId: string

    /**
     * 
     * @type {string}
     * @memberof NpcsApiGetNpcApiV1NpcsNpcsNpcIdGet
     */
    readonly authToken?: string | null
}

/**
 * Request parameters for getNpcsInLocationApiV1NpcsLocationsLocationNameNpcsGet operation in NpcsApi.
 * @export
 * @interface NpcsApiGetNpcsInLocationApiV1NpcsLocationsLocationNameNpcsGetRequest
 */
export interface NpcsApiGetNpcsInLocationApiV1NpcsLocationsLocationNameNpcsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof NpcsApiGetNpcsInLocationApiV1NpcsLocationsLocationNameNpcsGet
     */
    readonly locationName: string

    /**
     * 
     * @type {string}
     * @memberof NpcsApiGetNpcsInLocationApiV1NpcsLocationsLocationNameNpcsGet
     */
    readonly authToken?: string | null
}

/**
 * Request parameters for listNpcsApiV1NpcsNpcsGet operation in NpcsApi.
 * @export
 * @interface NpcsApiListNpcsApiV1NpcsNpcsGetRequest
 */
export interface NpcsApiListNpcsApiV1NpcsNpcsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof NpcsApiListNpcsApiV1NpcsNpcsGet
     */
    readonly location?: string | null

    /**
     * 
     * @type {string}
     * @memberof NpcsApiListNpcsApiV1NpcsNpcsGet
     */
    readonly npcType?: string | null

    /**
     * 
     * @type {boolean}
     * @memberof NpcsApiListNpcsApiV1NpcsNpcsGet
     */
    readonly isActive?: boolean

    /**
     * 
     * @type {string}
     * @memberof NpcsApiListNpcsApiV1NpcsNpcsGet
     */
    readonly authToken?: string | null
}

/**
 * Request parameters for moveNpcApiV1NpcsNpcsNpcIdMovePost operation in NpcsApi.
 * @export
 * @interface NpcsApiMoveNpcApiV1NpcsNpcsNpcIdMovePostRequest
 */
export interface NpcsApiMoveNpcApiV1NpcsNpcsNpcIdMovePostRequest {
    /**
     * 
     * @type {string}
     * @memberof NpcsApiMoveNpcApiV1NpcsNpcsNpcIdMovePost
     */
    readonly npcId: string

    /**
     * 
     * @type {NPCLocationUpdate}
     * @memberof NpcsApiMoveNpcApiV1NpcsNpcsNpcIdMovePost
     */
    readonly nPCLocationUpdate: NPCLocationUpdate

    /**
     * 
     * @type {string}
     * @memberof NpcsApiMoveNpcApiV1NpcsNpcsNpcIdMovePost
     */
    readonly authToken?: string | null
}

/**
 * NpcsApi - object-oriented interface
 * @export
 * @class NpcsApi
 * @extends {BaseAPI}
 */
export class NpcsApi extends BaseAPI implements NpcsApiInterface {
    /**
     * 特定のNPCの詳細を取得
     * @summary Get Npc
     * @param {NpcsApiGetNpcApiV1NpcsNpcsNpcIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NpcsApi
     */
    public getNpcApiV1NpcsNpcsNpcIdGet(requestParameters: NpcsApiGetNpcApiV1NpcsNpcsNpcIdGetRequest, options?: RawAxiosRequestConfig) {
        return NpcsApiFp(this.configuration).getNpcApiV1NpcsNpcsNpcIdGet(requestParameters.npcId, requestParameters.authToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 特定の場所にいるNPCの一覧を取得
     * @summary Get Npcs In Location
     * @param {NpcsApiGetNpcsInLocationApiV1NpcsLocationsLocationNameNpcsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NpcsApi
     */
    public getNpcsInLocationApiV1NpcsLocationsLocationNameNpcsGet(requestParameters: NpcsApiGetNpcsInLocationApiV1NpcsLocationsLocationNameNpcsGetRequest, options?: RawAxiosRequestConfig) {
        return NpcsApiFp(this.configuration).getNpcsInLocationApiV1NpcsLocationsLocationNameNpcsGet(requestParameters.locationName, requestParameters.authToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * NPCの一覧を取得  フィルタリング: - location: 特定の場所にいるNPCのみ - npc_type: LOG_NPC, PERMANENT_NPC, TEMPORARY_NPC - is_active: アクティブなNPCのみ
     * @summary List Npcs
     * @param {NpcsApiListNpcsApiV1NpcsNpcsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NpcsApi
     */
    public listNpcsApiV1NpcsNpcsGet(requestParameters: NpcsApiListNpcsApiV1NpcsNpcsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return NpcsApiFp(this.configuration).listNpcsApiV1NpcsNpcsGet(requestParameters.location, requestParameters.npcType, requestParameters.isActive, requestParameters.authToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * NPCを別の場所に移動（GM権限が必要）
     * @summary Move Npc
     * @param {NpcsApiMoveNpcApiV1NpcsNpcsNpcIdMovePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NpcsApi
     */
    public moveNpcApiV1NpcsNpcsNpcIdMovePost(requestParameters: NpcsApiMoveNpcApiV1NpcsNpcsNpcIdMovePostRequest, options?: RawAxiosRequestConfig) {
        return NpcsApiFp(this.configuration).moveNpcApiV1NpcsNpcsNpcIdMovePost(requestParameters.npcId, requestParameters.nPCLocationUpdate, requestParameters.authToken, options).then((request) => request(this.axios, this.basePath));
    }
}

