/* tslint:disable */
/* eslint-disable */
/**
 * GESTALOKA API
 * マルチプレイ・テキストMMO - ゲスタロカ API
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from '../base'
// @ts-ignore
import type { CompletedLogCreate } from '../models'
// @ts-ignore
import type { CompletedLogRead } from '../models'
// @ts-ignore
import type { CompletedLogUpdate } from '../models'
// @ts-ignore
import type { HTTPValidationError } from '../models'
// @ts-ignore
import type { LogFragmentCreate } from '../models'
// @ts-ignore
import type { LogFragmentRead } from '../models'
/**
 * LogsApi - axios parameter creator
 * @export
 */
export const LogsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * 完成ログを作成（ログフラグメントの編纂）  複数のログフラグメントを組み合わせて、 他プレイヤーの世界でNPCとして活動可能な完全な記録を作成。
     * @summary Create Completed Log
     * @param {CompletedLogCreate} completedLogCreate
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCompletedLogApiV1LogsCompletedPost: async (
      completedLogCreate: CompletedLogCreate,
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'completedLogCreate' is not null or undefined
      assertParamExists(
        'createCompletedLogApiV1LogsCompletedPost',
        'completedLogCreate',
        completedLogCreate
      )
      const localVarPath = `/api/v1/logs/completed`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        completedLogCreate,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * ログの欠片を作成  重要な行動や決断から生成される記録の断片。 GMのAIによって自動生成される。
     * @summary Create Log Fragment
     * @param {LogFragmentCreate} logFragmentCreate
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLogFragmentApiV1LogsFragmentsPost: async (
      logFragmentCreate: LogFragmentCreate,
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'logFragmentCreate' is not null or undefined
      assertParamExists(
        'createLogFragmentApiV1LogsFragmentsPost',
        'logFragmentCreate',
        logFragmentCreate
      )
      const localVarPath = `/api/v1/logs/fragments`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        logFragmentCreate,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * フラグメントから浄化アイテムを作成  ポジティブなフラグメントを組み合わせて浄化アイテムを生成
     * @summary Create Purification Item From Fragments
     * @param {Array<string | null>} requestBody
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPurificationItemFromFragmentsApiV1LogsFragmentsCreatePurificationItemPost:
      async (
        requestBody: Array<string | null>,
        authToken?: string | null,
        options: RawAxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'requestBody' is not null or undefined
        assertParamExists(
          'createPurificationItemFromFragmentsApiV1LogsFragmentsCreatePurificationItemPost',
          'requestBody',
          requestBody
        )
        const localVarPath = `/api/v1/logs/fragments/create-purification-item`
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
        let baseOptions
        if (configuration) {
          baseOptions = configuration.baseOptions
        }

        const localVarRequestOptions = {
          method: 'POST',
          ...baseOptions,
          ...options,
        }
        const localVarHeaderParameter = {} as any
        const localVarQueryParameter = {} as any

        // authentication OAuth2PasswordBearer required
        // oauth required
        await setOAuthToObject(
          localVarHeaderParameter,
          'OAuth2PasswordBearer',
          [],
          configuration
        )

        localVarHeaderParameter['Content-Type'] = 'application/json'

        setSearchParams(localVarUrlObj, localVarQueryParameter)
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers ? baseOptions.headers : {}
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers,
        }
        localVarRequestOptions.data = serializeDataIfNeeded(
          requestBody,
          localVarRequestOptions,
          configuration
        )

        return {
          url: toPathString(localVarUrlObj),
          options: localVarRequestOptions,
        }
      },
    /**
     * キャラクターの完成ログ一覧を取得
     * @summary Get Character Completed Logs
     * @param {string} characterId
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCharacterCompletedLogsApiV1LogsCompletedCharacterIdGet: async (
      characterId: string,
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'characterId' is not null or undefined
      assertParamExists(
        'getCharacterCompletedLogsApiV1LogsCompletedCharacterIdGet',
        'characterId',
        characterId
      )
      const localVarPath = `/api/v1/logs/completed/{character_id}`.replace(
        `{${'character_id'}}`,
        encodeURIComponent(String(characterId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * キャラクターのログフラグメント一覧を取得
     * @summary Get Character Fragments
     * @param {string} characterId
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCharacterFragmentsApiV1LogsFragmentsCharacterIdGet: async (
      characterId: string,
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'characterId' is not null or undefined
      assertParamExists(
        'getCharacterFragmentsApiV1LogsFragmentsCharacterIdGet',
        'characterId',
        characterId
      )
      const localVarPath = `/api/v1/logs/fragments/{character_id}`.replace(
        `{${'character_id'}}`,
        encodeURIComponent(String(characterId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 編纂コストとボーナスをプレビュー  実際にSPを消費せずに、編纂時のコストとボーナスを確認できる
     * @summary Preview Compilation Cost
     * @param {CompletedLogCreate} completedLogCreate
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    previewCompilationCostApiV1LogsCompletedPreviewPost: async (
      completedLogCreate: CompletedLogCreate,
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'completedLogCreate' is not null or undefined
      assertParamExists(
        'previewCompilationCostApiV1LogsCompletedPreviewPost',
        'completedLogCreate',
        completedLogCreate
      )
      const localVarPath = `/api/v1/logs/completed/preview`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        completedLogCreate,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 完成ログの汚染を浄化  浄化アイテムとSPを消費して、ログの汚染度を下げる
     * @summary Purify Completed Log
     * @param {string} logId
     * @param {Array<string | null>} requestBody
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purifyCompletedLogApiV1LogsCompletedLogIdPurifyPost: async (
      logId: string,
      requestBody: Array<string | null>,
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'logId' is not null or undefined
      assertParamExists(
        'purifyCompletedLogApiV1LogsCompletedLogIdPurifyPost',
        'logId',
        logId
      )
      // verify required parameter 'requestBody' is not null or undefined
      assertParamExists(
        'purifyCompletedLogApiV1LogsCompletedLogIdPurifyPost',
        'requestBody',
        requestBody
      )
      const localVarPath = `/api/v1/logs/completed/{log_id}/purify`.replace(
        `{${'log_id'}}`,
        encodeURIComponent(String(logId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 完成ログを更新
     * @summary Update Completed Log
     * @param {string} logId
     * @param {CompletedLogUpdate} completedLogUpdate
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCompletedLogApiV1LogsCompletedLogIdPatch: async (
      logId: string,
      completedLogUpdate: CompletedLogUpdate,
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'logId' is not null or undefined
      assertParamExists(
        'updateCompletedLogApiV1LogsCompletedLogIdPatch',
        'logId',
        logId
      )
      // verify required parameter 'completedLogUpdate' is not null or undefined
      assertParamExists(
        'updateCompletedLogApiV1LogsCompletedLogIdPatch',
        'completedLogUpdate',
        completedLogUpdate
      )
      const localVarPath = `/api/v1/logs/completed/{log_id}`.replace(
        `{${'log_id'}}`,
        encodeURIComponent(String(logId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        completedLogUpdate,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * LogsApi - functional programming interface
 * @export
 */
export const LogsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = LogsApiAxiosParamCreator(configuration)
  return {
    /**
     * 完成ログを作成（ログフラグメントの編纂）  複数のログフラグメントを組み合わせて、 他プレイヤーの世界でNPCとして活動可能な完全な記録を作成。
     * @summary Create Completed Log
     * @param {CompletedLogCreate} completedLogCreate
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCompletedLogApiV1LogsCompletedPost(
      completedLogCreate: CompletedLogCreate,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CompletedLogRead>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createCompletedLogApiV1LogsCompletedPost(
          completedLogCreate,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'LogsApi.createCompletedLogApiV1LogsCompletedPost'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * ログの欠片を作成  重要な行動や決断から生成される記録の断片。 GMのAIによって自動生成される。
     * @summary Create Log Fragment
     * @param {LogFragmentCreate} logFragmentCreate
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createLogFragmentApiV1LogsFragmentsPost(
      logFragmentCreate: LogFragmentCreate,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LogFragmentRead>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createLogFragmentApiV1LogsFragmentsPost(
          logFragmentCreate,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['LogsApi.createLogFragmentApiV1LogsFragmentsPost']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * フラグメントから浄化アイテムを作成  ポジティブなフラグメントを組み合わせて浄化アイテムを生成
     * @summary Create Purification Item From Fragments
     * @param {Array<string | null>} requestBody
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPurificationItemFromFragmentsApiV1LogsFragmentsCreatePurificationItemPost(
      requestBody: Array<string | null>,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createPurificationItemFromFragmentsApiV1LogsFragmentsCreatePurificationItemPost(
          requestBody,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'LogsApi.createPurificationItemFromFragmentsApiV1LogsFragmentsCreatePurificationItemPost'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * キャラクターの完成ログ一覧を取得
     * @summary Get Character Completed Logs
     * @param {string} characterId
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCharacterCompletedLogsApiV1LogsCompletedCharacterIdGet(
      characterId: string,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<CompletedLogRead>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getCharacterCompletedLogsApiV1LogsCompletedCharacterIdGet(
          characterId,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'LogsApi.getCharacterCompletedLogsApiV1LogsCompletedCharacterIdGet'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * キャラクターのログフラグメント一覧を取得
     * @summary Get Character Fragments
     * @param {string} characterId
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCharacterFragmentsApiV1LogsFragmentsCharacterIdGet(
      characterId: string,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<LogFragmentRead>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getCharacterFragmentsApiV1LogsFragmentsCharacterIdGet(
          characterId,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'LogsApi.getCharacterFragmentsApiV1LogsFragmentsCharacterIdGet'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * 編纂コストとボーナスをプレビュー  実際にSPを消費せずに、編纂時のコストとボーナスを確認できる
     * @summary Preview Compilation Cost
     * @param {CompletedLogCreate} completedLogCreate
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async previewCompilationCostApiV1LogsCompletedPreviewPost(
      completedLogCreate: CompletedLogCreate,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.previewCompilationCostApiV1LogsCompletedPreviewPost(
          completedLogCreate,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'LogsApi.previewCompilationCostApiV1LogsCompletedPreviewPost'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * 完成ログの汚染を浄化  浄化アイテムとSPを消費して、ログの汚染度を下げる
     * @summary Purify Completed Log
     * @param {string} logId
     * @param {Array<string | null>} requestBody
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async purifyCompletedLogApiV1LogsCompletedLogIdPurifyPost(
      logId: string,
      requestBody: Array<string | null>,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.purifyCompletedLogApiV1LogsCompletedLogIdPurifyPost(
          logId,
          requestBody,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'LogsApi.purifyCompletedLogApiV1LogsCompletedLogIdPurifyPost'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * 完成ログを更新
     * @summary Update Completed Log
     * @param {string} logId
     * @param {CompletedLogUpdate} completedLogUpdate
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateCompletedLogApiV1LogsCompletedLogIdPatch(
      logId: string,
      completedLogUpdate: CompletedLogUpdate,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CompletedLogRead>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateCompletedLogApiV1LogsCompletedLogIdPatch(
          logId,
          completedLogUpdate,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'LogsApi.updateCompletedLogApiV1LogsCompletedLogIdPatch'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * LogsApi - factory interface
 * @export
 */
export const LogsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = LogsApiFp(configuration)
  return {
    /**
     * 完成ログを作成（ログフラグメントの編纂）  複数のログフラグメントを組み合わせて、 他プレイヤーの世界でNPCとして活動可能な完全な記録を作成。
     * @summary Create Completed Log
     * @param {LogsApiCreateCompletedLogApiV1LogsCompletedPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCompletedLogApiV1LogsCompletedPost(
      requestParameters: LogsApiCreateCompletedLogApiV1LogsCompletedPostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<CompletedLogRead> {
      return localVarFp
        .createCompletedLogApiV1LogsCompletedPost(
          requestParameters.completedLogCreate,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * ログの欠片を作成  重要な行動や決断から生成される記録の断片。 GMのAIによって自動生成される。
     * @summary Create Log Fragment
     * @param {LogsApiCreateLogFragmentApiV1LogsFragmentsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLogFragmentApiV1LogsFragmentsPost(
      requestParameters: LogsApiCreateLogFragmentApiV1LogsFragmentsPostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<LogFragmentRead> {
      return localVarFp
        .createLogFragmentApiV1LogsFragmentsPost(
          requestParameters.logFragmentCreate,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * フラグメントから浄化アイテムを作成  ポジティブなフラグメントを組み合わせて浄化アイテムを生成
     * @summary Create Purification Item From Fragments
     * @param {LogsApiCreatePurificationItemFromFragmentsApiV1LogsFragmentsCreatePurificationItemPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPurificationItemFromFragmentsApiV1LogsFragmentsCreatePurificationItemPost(
      requestParameters: LogsApiCreatePurificationItemFromFragmentsApiV1LogsFragmentsCreatePurificationItemPostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .createPurificationItemFromFragmentsApiV1LogsFragmentsCreatePurificationItemPost(
          requestParameters.requestBody,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * キャラクターの完成ログ一覧を取得
     * @summary Get Character Completed Logs
     * @param {LogsApiGetCharacterCompletedLogsApiV1LogsCompletedCharacterIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCharacterCompletedLogsApiV1LogsCompletedCharacterIdGet(
      requestParameters: LogsApiGetCharacterCompletedLogsApiV1LogsCompletedCharacterIdGetRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Array<CompletedLogRead>> {
      return localVarFp
        .getCharacterCompletedLogsApiV1LogsCompletedCharacterIdGet(
          requestParameters.characterId,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * キャラクターのログフラグメント一覧を取得
     * @summary Get Character Fragments
     * @param {LogsApiGetCharacterFragmentsApiV1LogsFragmentsCharacterIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCharacterFragmentsApiV1LogsFragmentsCharacterIdGet(
      requestParameters: LogsApiGetCharacterFragmentsApiV1LogsFragmentsCharacterIdGetRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Array<LogFragmentRead>> {
      return localVarFp
        .getCharacterFragmentsApiV1LogsFragmentsCharacterIdGet(
          requestParameters.characterId,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * 編纂コストとボーナスをプレビュー  実際にSPを消費せずに、編纂時のコストとボーナスを確認できる
     * @summary Preview Compilation Cost
     * @param {LogsApiPreviewCompilationCostApiV1LogsCompletedPreviewPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    previewCompilationCostApiV1LogsCompletedPreviewPost(
      requestParameters: LogsApiPreviewCompilationCostApiV1LogsCompletedPreviewPostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .previewCompilationCostApiV1LogsCompletedPreviewPost(
          requestParameters.completedLogCreate,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * 完成ログの汚染を浄化  浄化アイテムとSPを消費して、ログの汚染度を下げる
     * @summary Purify Completed Log
     * @param {LogsApiPurifyCompletedLogApiV1LogsCompletedLogIdPurifyPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purifyCompletedLogApiV1LogsCompletedLogIdPurifyPost(
      requestParameters: LogsApiPurifyCompletedLogApiV1LogsCompletedLogIdPurifyPostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .purifyCompletedLogApiV1LogsCompletedLogIdPurifyPost(
          requestParameters.logId,
          requestParameters.requestBody,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * 完成ログを更新
     * @summary Update Completed Log
     * @param {LogsApiUpdateCompletedLogApiV1LogsCompletedLogIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCompletedLogApiV1LogsCompletedLogIdPatch(
      requestParameters: LogsApiUpdateCompletedLogApiV1LogsCompletedLogIdPatchRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<CompletedLogRead> {
      return localVarFp
        .updateCompletedLogApiV1LogsCompletedLogIdPatch(
          requestParameters.logId,
          requestParameters.completedLogUpdate,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
  }
}

/**
 * LogsApi - interface
 * @export
 * @interface LogsApi
 */
export interface LogsApiInterface {
  /**
   * 完成ログを作成（ログフラグメントの編纂）  複数のログフラグメントを組み合わせて、 他プレイヤーの世界でNPCとして活動可能な完全な記録を作成。
   * @summary Create Completed Log
   * @param {LogsApiCreateCompletedLogApiV1LogsCompletedPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LogsApiInterface
   */
  createCompletedLogApiV1LogsCompletedPost(
    requestParameters: LogsApiCreateCompletedLogApiV1LogsCompletedPostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<CompletedLogRead>

  /**
   * ログの欠片を作成  重要な行動や決断から生成される記録の断片。 GMのAIによって自動生成される。
   * @summary Create Log Fragment
   * @param {LogsApiCreateLogFragmentApiV1LogsFragmentsPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LogsApiInterface
   */
  createLogFragmentApiV1LogsFragmentsPost(
    requestParameters: LogsApiCreateLogFragmentApiV1LogsFragmentsPostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<LogFragmentRead>

  /**
   * フラグメントから浄化アイテムを作成  ポジティブなフラグメントを組み合わせて浄化アイテムを生成
   * @summary Create Purification Item From Fragments
   * @param {LogsApiCreatePurificationItemFromFragmentsApiV1LogsFragmentsCreatePurificationItemPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LogsApiInterface
   */
  createPurificationItemFromFragmentsApiV1LogsFragmentsCreatePurificationItemPost(
    requestParameters: LogsApiCreatePurificationItemFromFragmentsApiV1LogsFragmentsCreatePurificationItemPostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<any>

  /**
   * キャラクターの完成ログ一覧を取得
   * @summary Get Character Completed Logs
   * @param {LogsApiGetCharacterCompletedLogsApiV1LogsCompletedCharacterIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LogsApiInterface
   */
  getCharacterCompletedLogsApiV1LogsCompletedCharacterIdGet(
    requestParameters: LogsApiGetCharacterCompletedLogsApiV1LogsCompletedCharacterIdGetRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Array<CompletedLogRead>>

  /**
   * キャラクターのログフラグメント一覧を取得
   * @summary Get Character Fragments
   * @param {LogsApiGetCharacterFragmentsApiV1LogsFragmentsCharacterIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LogsApiInterface
   */
  getCharacterFragmentsApiV1LogsFragmentsCharacterIdGet(
    requestParameters: LogsApiGetCharacterFragmentsApiV1LogsFragmentsCharacterIdGetRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Array<LogFragmentRead>>

  /**
   * 編纂コストとボーナスをプレビュー  実際にSPを消費せずに、編纂時のコストとボーナスを確認できる
   * @summary Preview Compilation Cost
   * @param {LogsApiPreviewCompilationCostApiV1LogsCompletedPreviewPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LogsApiInterface
   */
  previewCompilationCostApiV1LogsCompletedPreviewPost(
    requestParameters: LogsApiPreviewCompilationCostApiV1LogsCompletedPreviewPostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<any>

  /**
   * 完成ログの汚染を浄化  浄化アイテムとSPを消費して、ログの汚染度を下げる
   * @summary Purify Completed Log
   * @param {LogsApiPurifyCompletedLogApiV1LogsCompletedLogIdPurifyPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LogsApiInterface
   */
  purifyCompletedLogApiV1LogsCompletedLogIdPurifyPost(
    requestParameters: LogsApiPurifyCompletedLogApiV1LogsCompletedLogIdPurifyPostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<any>

  /**
   * 完成ログを更新
   * @summary Update Completed Log
   * @param {LogsApiUpdateCompletedLogApiV1LogsCompletedLogIdPatchRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LogsApiInterface
   */
  updateCompletedLogApiV1LogsCompletedLogIdPatch(
    requestParameters: LogsApiUpdateCompletedLogApiV1LogsCompletedLogIdPatchRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<CompletedLogRead>
}

/**
 * Request parameters for createCompletedLogApiV1LogsCompletedPost operation in LogsApi.
 * @export
 * @interface LogsApiCreateCompletedLogApiV1LogsCompletedPostRequest
 */
export interface LogsApiCreateCompletedLogApiV1LogsCompletedPostRequest {
  /**
   *
   * @type {CompletedLogCreate}
   * @memberof LogsApiCreateCompletedLogApiV1LogsCompletedPost
   */
  readonly completedLogCreate: CompletedLogCreate

  /**
   *
   * @type {string}
   * @memberof LogsApiCreateCompletedLogApiV1LogsCompletedPost
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for createLogFragmentApiV1LogsFragmentsPost operation in LogsApi.
 * @export
 * @interface LogsApiCreateLogFragmentApiV1LogsFragmentsPostRequest
 */
export interface LogsApiCreateLogFragmentApiV1LogsFragmentsPostRequest {
  /**
   *
   * @type {LogFragmentCreate}
   * @memberof LogsApiCreateLogFragmentApiV1LogsFragmentsPost
   */
  readonly logFragmentCreate: LogFragmentCreate

  /**
   *
   * @type {string}
   * @memberof LogsApiCreateLogFragmentApiV1LogsFragmentsPost
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for createPurificationItemFromFragmentsApiV1LogsFragmentsCreatePurificationItemPost operation in LogsApi.
 * @export
 * @interface LogsApiCreatePurificationItemFromFragmentsApiV1LogsFragmentsCreatePurificationItemPostRequest
 */
export interface LogsApiCreatePurificationItemFromFragmentsApiV1LogsFragmentsCreatePurificationItemPostRequest {
  /**
   *
   * @type {Array<string | null>}
   * @memberof LogsApiCreatePurificationItemFromFragmentsApiV1LogsFragmentsCreatePurificationItemPost
   */
  readonly requestBody: Array<string | null>

  /**
   *
   * @type {string}
   * @memberof LogsApiCreatePurificationItemFromFragmentsApiV1LogsFragmentsCreatePurificationItemPost
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for getCharacterCompletedLogsApiV1LogsCompletedCharacterIdGet operation in LogsApi.
 * @export
 * @interface LogsApiGetCharacterCompletedLogsApiV1LogsCompletedCharacterIdGetRequest
 */
export interface LogsApiGetCharacterCompletedLogsApiV1LogsCompletedCharacterIdGetRequest {
  /**
   *
   * @type {string}
   * @memberof LogsApiGetCharacterCompletedLogsApiV1LogsCompletedCharacterIdGet
   */
  readonly characterId: string

  /**
   *
   * @type {string}
   * @memberof LogsApiGetCharacterCompletedLogsApiV1LogsCompletedCharacterIdGet
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for getCharacterFragmentsApiV1LogsFragmentsCharacterIdGet operation in LogsApi.
 * @export
 * @interface LogsApiGetCharacterFragmentsApiV1LogsFragmentsCharacterIdGetRequest
 */
export interface LogsApiGetCharacterFragmentsApiV1LogsFragmentsCharacterIdGetRequest {
  /**
   *
   * @type {string}
   * @memberof LogsApiGetCharacterFragmentsApiV1LogsFragmentsCharacterIdGet
   */
  readonly characterId: string

  /**
   *
   * @type {string}
   * @memberof LogsApiGetCharacterFragmentsApiV1LogsFragmentsCharacterIdGet
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for previewCompilationCostApiV1LogsCompletedPreviewPost operation in LogsApi.
 * @export
 * @interface LogsApiPreviewCompilationCostApiV1LogsCompletedPreviewPostRequest
 */
export interface LogsApiPreviewCompilationCostApiV1LogsCompletedPreviewPostRequest {
  /**
   *
   * @type {CompletedLogCreate}
   * @memberof LogsApiPreviewCompilationCostApiV1LogsCompletedPreviewPost
   */
  readonly completedLogCreate: CompletedLogCreate

  /**
   *
   * @type {string}
   * @memberof LogsApiPreviewCompilationCostApiV1LogsCompletedPreviewPost
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for purifyCompletedLogApiV1LogsCompletedLogIdPurifyPost operation in LogsApi.
 * @export
 * @interface LogsApiPurifyCompletedLogApiV1LogsCompletedLogIdPurifyPostRequest
 */
export interface LogsApiPurifyCompletedLogApiV1LogsCompletedLogIdPurifyPostRequest {
  /**
   *
   * @type {string}
   * @memberof LogsApiPurifyCompletedLogApiV1LogsCompletedLogIdPurifyPost
   */
  readonly logId: string

  /**
   *
   * @type {Array<string | null>}
   * @memberof LogsApiPurifyCompletedLogApiV1LogsCompletedLogIdPurifyPost
   */
  readonly requestBody: Array<string | null>

  /**
   *
   * @type {string}
   * @memberof LogsApiPurifyCompletedLogApiV1LogsCompletedLogIdPurifyPost
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for updateCompletedLogApiV1LogsCompletedLogIdPatch operation in LogsApi.
 * @export
 * @interface LogsApiUpdateCompletedLogApiV1LogsCompletedLogIdPatchRequest
 */
export interface LogsApiUpdateCompletedLogApiV1LogsCompletedLogIdPatchRequest {
  /**
   *
   * @type {string}
   * @memberof LogsApiUpdateCompletedLogApiV1LogsCompletedLogIdPatch
   */
  readonly logId: string

  /**
   *
   * @type {CompletedLogUpdate}
   * @memberof LogsApiUpdateCompletedLogApiV1LogsCompletedLogIdPatch
   */
  readonly completedLogUpdate: CompletedLogUpdate

  /**
   *
   * @type {string}
   * @memberof LogsApiUpdateCompletedLogApiV1LogsCompletedLogIdPatch
   */
  readonly authToken?: string | null
}

/**
 * LogsApi - object-oriented interface
 * @export
 * @class LogsApi
 * @extends {BaseAPI}
 */
export class LogsApi extends BaseAPI implements LogsApiInterface {
  /**
   * 完成ログを作成（ログフラグメントの編纂）  複数のログフラグメントを組み合わせて、 他プレイヤーの世界でNPCとして活動可能な完全な記録を作成。
   * @summary Create Completed Log
   * @param {LogsApiCreateCompletedLogApiV1LogsCompletedPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LogsApi
   */
  public createCompletedLogApiV1LogsCompletedPost(
    requestParameters: LogsApiCreateCompletedLogApiV1LogsCompletedPostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return LogsApiFp(this.configuration)
      .createCompletedLogApiV1LogsCompletedPost(
        requestParameters.completedLogCreate,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * ログの欠片を作成  重要な行動や決断から生成される記録の断片。 GMのAIによって自動生成される。
   * @summary Create Log Fragment
   * @param {LogsApiCreateLogFragmentApiV1LogsFragmentsPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LogsApi
   */
  public createLogFragmentApiV1LogsFragmentsPost(
    requestParameters: LogsApiCreateLogFragmentApiV1LogsFragmentsPostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return LogsApiFp(this.configuration)
      .createLogFragmentApiV1LogsFragmentsPost(
        requestParameters.logFragmentCreate,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * フラグメントから浄化アイテムを作成  ポジティブなフラグメントを組み合わせて浄化アイテムを生成
   * @summary Create Purification Item From Fragments
   * @param {LogsApiCreatePurificationItemFromFragmentsApiV1LogsFragmentsCreatePurificationItemPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LogsApi
   */
  public createPurificationItemFromFragmentsApiV1LogsFragmentsCreatePurificationItemPost(
    requestParameters: LogsApiCreatePurificationItemFromFragmentsApiV1LogsFragmentsCreatePurificationItemPostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return LogsApiFp(this.configuration)
      .createPurificationItemFromFragmentsApiV1LogsFragmentsCreatePurificationItemPost(
        requestParameters.requestBody,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * キャラクターの完成ログ一覧を取得
   * @summary Get Character Completed Logs
   * @param {LogsApiGetCharacterCompletedLogsApiV1LogsCompletedCharacterIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LogsApi
   */
  public getCharacterCompletedLogsApiV1LogsCompletedCharacterIdGet(
    requestParameters: LogsApiGetCharacterCompletedLogsApiV1LogsCompletedCharacterIdGetRequest,
    options?: RawAxiosRequestConfig
  ) {
    return LogsApiFp(this.configuration)
      .getCharacterCompletedLogsApiV1LogsCompletedCharacterIdGet(
        requestParameters.characterId,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * キャラクターのログフラグメント一覧を取得
   * @summary Get Character Fragments
   * @param {LogsApiGetCharacterFragmentsApiV1LogsFragmentsCharacterIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LogsApi
   */
  public getCharacterFragmentsApiV1LogsFragmentsCharacterIdGet(
    requestParameters: LogsApiGetCharacterFragmentsApiV1LogsFragmentsCharacterIdGetRequest,
    options?: RawAxiosRequestConfig
  ) {
    return LogsApiFp(this.configuration)
      .getCharacterFragmentsApiV1LogsFragmentsCharacterIdGet(
        requestParameters.characterId,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * 編纂コストとボーナスをプレビュー  実際にSPを消費せずに、編纂時のコストとボーナスを確認できる
   * @summary Preview Compilation Cost
   * @param {LogsApiPreviewCompilationCostApiV1LogsCompletedPreviewPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LogsApi
   */
  public previewCompilationCostApiV1LogsCompletedPreviewPost(
    requestParameters: LogsApiPreviewCompilationCostApiV1LogsCompletedPreviewPostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return LogsApiFp(this.configuration)
      .previewCompilationCostApiV1LogsCompletedPreviewPost(
        requestParameters.completedLogCreate,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * 完成ログの汚染を浄化  浄化アイテムとSPを消費して、ログの汚染度を下げる
   * @summary Purify Completed Log
   * @param {LogsApiPurifyCompletedLogApiV1LogsCompletedLogIdPurifyPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LogsApi
   */
  public purifyCompletedLogApiV1LogsCompletedLogIdPurifyPost(
    requestParameters: LogsApiPurifyCompletedLogApiV1LogsCompletedLogIdPurifyPostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return LogsApiFp(this.configuration)
      .purifyCompletedLogApiV1LogsCompletedLogIdPurifyPost(
        requestParameters.logId,
        requestParameters.requestBody,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * 完成ログを更新
   * @summary Update Completed Log
   * @param {LogsApiUpdateCompletedLogApiV1LogsCompletedLogIdPatchRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LogsApi
   */
  public updateCompletedLogApiV1LogsCompletedLogIdPatch(
    requestParameters: LogsApiUpdateCompletedLogApiV1LogsCompletedLogIdPatchRequest,
    options?: RawAxiosRequestConfig
  ) {
    return LogsApiFp(this.configuration)
      .updateCompletedLogApiV1LogsCompletedLogIdPatch(
        requestParameters.logId,
        requestParameters.completedLogUpdate,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }
}
