/* tslint:disable */
/* eslint-disable */
/**
 * GESTALOKA API
 * マルチプレイ・テキストMMO - ゲスタロカ API
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from '../base'
// @ts-ignore
import type { ActionChoice } from '../models'
// @ts-ignore
import type { ActionRequest } from '../models'
// @ts-ignore
import type { HTTPValidationError } from '../models'
// @ts-ignore
import type { NarrativeResponse } from '../models'
/**
 * NarrativeApi - axios parameter creator
 * @export
 */
export const NarrativeApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * 現在の状況に応じた行動選択肢を取得
     * @summary Get Available Actions
     * @param {string} characterId
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAvailableActionsApiV1NarrativeCharacterIdActionsGet: async (
      characterId: string,
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'characterId' is not null or undefined
      assertParamExists(
        'getAvailableActionsApiV1NarrativeCharacterIdActionsGet',
        'characterId',
        characterId
      )
      const localVarPath = `/api/v1/narrative/{character_id}/actions`.replace(
        `{${'character_id'}}`,
        encodeURIComponent(String(characterId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 物語主導の行動処理
     * @summary Perform Narrative Action
     * @param {string} characterId
     * @param {ActionRequest} actionRequest
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    performNarrativeActionApiV1NarrativeCharacterIdActionPost: async (
      characterId: string,
      actionRequest: ActionRequest,
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'characterId' is not null or undefined
      assertParamExists(
        'performNarrativeActionApiV1NarrativeCharacterIdActionPost',
        'characterId',
        characterId
      )
      // verify required parameter 'actionRequest' is not null or undefined
      assertParamExists(
        'performNarrativeActionApiV1NarrativeCharacterIdActionPost',
        'actionRequest',
        actionRequest
      )
      const localVarPath = `/api/v1/narrative/{character_id}/action`.replace(
        `{${'character_id'}}`,
        encodeURIComponent(String(characterId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        actionRequest,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * NarrativeApi - functional programming interface
 * @export
 */
export const NarrativeApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = NarrativeApiAxiosParamCreator(configuration)
  return {
    /**
     * 現在の状況に応じた行動選択肢を取得
     * @summary Get Available Actions
     * @param {string} characterId
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAvailableActionsApiV1NarrativeCharacterIdActionsGet(
      characterId: string,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<ActionChoice>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getAvailableActionsApiV1NarrativeCharacterIdActionsGet(
          characterId,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'NarrativeApi.getAvailableActionsApiV1NarrativeCharacterIdActionsGet'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * 物語主導の行動処理
     * @summary Perform Narrative Action
     * @param {string} characterId
     * @param {ActionRequest} actionRequest
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async performNarrativeActionApiV1NarrativeCharacterIdActionPost(
      characterId: string,
      actionRequest: ActionRequest,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<NarrativeResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.performNarrativeActionApiV1NarrativeCharacterIdActionPost(
          characterId,
          actionRequest,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'NarrativeApi.performNarrativeActionApiV1NarrativeCharacterIdActionPost'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * NarrativeApi - factory interface
 * @export
 */
export const NarrativeApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = NarrativeApiFp(configuration)
  return {
    /**
     * 現在の状況に応じた行動選択肢を取得
     * @summary Get Available Actions
     * @param {NarrativeApiGetAvailableActionsApiV1NarrativeCharacterIdActionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAvailableActionsApiV1NarrativeCharacterIdActionsGet(
      requestParameters: NarrativeApiGetAvailableActionsApiV1NarrativeCharacterIdActionsGetRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Array<ActionChoice>> {
      return localVarFp
        .getAvailableActionsApiV1NarrativeCharacterIdActionsGet(
          requestParameters.characterId,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * 物語主導の行動処理
     * @summary Perform Narrative Action
     * @param {NarrativeApiPerformNarrativeActionApiV1NarrativeCharacterIdActionPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    performNarrativeActionApiV1NarrativeCharacterIdActionPost(
      requestParameters: NarrativeApiPerformNarrativeActionApiV1NarrativeCharacterIdActionPostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<NarrativeResponse> {
      return localVarFp
        .performNarrativeActionApiV1NarrativeCharacterIdActionPost(
          requestParameters.characterId,
          requestParameters.actionRequest,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
  }
}

/**
 * NarrativeApi - interface
 * @export
 * @interface NarrativeApi
 */
export interface NarrativeApiInterface {
  /**
   * 現在の状況に応じた行動選択肢を取得
   * @summary Get Available Actions
   * @param {NarrativeApiGetAvailableActionsApiV1NarrativeCharacterIdActionsGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NarrativeApiInterface
   */
  getAvailableActionsApiV1NarrativeCharacterIdActionsGet(
    requestParameters: NarrativeApiGetAvailableActionsApiV1NarrativeCharacterIdActionsGetRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Array<ActionChoice>>

  /**
   * 物語主導の行動処理
   * @summary Perform Narrative Action
   * @param {NarrativeApiPerformNarrativeActionApiV1NarrativeCharacterIdActionPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NarrativeApiInterface
   */
  performNarrativeActionApiV1NarrativeCharacterIdActionPost(
    requestParameters: NarrativeApiPerformNarrativeActionApiV1NarrativeCharacterIdActionPostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<NarrativeResponse>
}

/**
 * Request parameters for getAvailableActionsApiV1NarrativeCharacterIdActionsGet operation in NarrativeApi.
 * @export
 * @interface NarrativeApiGetAvailableActionsApiV1NarrativeCharacterIdActionsGetRequest
 */
export interface NarrativeApiGetAvailableActionsApiV1NarrativeCharacterIdActionsGetRequest {
  /**
   *
   * @type {string}
   * @memberof NarrativeApiGetAvailableActionsApiV1NarrativeCharacterIdActionsGet
   */
  readonly characterId: string

  /**
   *
   * @type {string}
   * @memberof NarrativeApiGetAvailableActionsApiV1NarrativeCharacterIdActionsGet
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for performNarrativeActionApiV1NarrativeCharacterIdActionPost operation in NarrativeApi.
 * @export
 * @interface NarrativeApiPerformNarrativeActionApiV1NarrativeCharacterIdActionPostRequest
 */
export interface NarrativeApiPerformNarrativeActionApiV1NarrativeCharacterIdActionPostRequest {
  /**
   *
   * @type {string}
   * @memberof NarrativeApiPerformNarrativeActionApiV1NarrativeCharacterIdActionPost
   */
  readonly characterId: string

  /**
   *
   * @type {ActionRequest}
   * @memberof NarrativeApiPerformNarrativeActionApiV1NarrativeCharacterIdActionPost
   */
  readonly actionRequest: ActionRequest

  /**
   *
   * @type {string}
   * @memberof NarrativeApiPerformNarrativeActionApiV1NarrativeCharacterIdActionPost
   */
  readonly authToken?: string | null
}

/**
 * NarrativeApi - object-oriented interface
 * @export
 * @class NarrativeApi
 * @extends {BaseAPI}
 */
export class NarrativeApi extends BaseAPI implements NarrativeApiInterface {
  /**
   * 現在の状況に応じた行動選択肢を取得
   * @summary Get Available Actions
   * @param {NarrativeApiGetAvailableActionsApiV1NarrativeCharacterIdActionsGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NarrativeApi
   */
  public getAvailableActionsApiV1NarrativeCharacterIdActionsGet(
    requestParameters: NarrativeApiGetAvailableActionsApiV1NarrativeCharacterIdActionsGetRequest,
    options?: RawAxiosRequestConfig
  ) {
    return NarrativeApiFp(this.configuration)
      .getAvailableActionsApiV1NarrativeCharacterIdActionsGet(
        requestParameters.characterId,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * 物語主導の行動処理
   * @summary Perform Narrative Action
   * @param {NarrativeApiPerformNarrativeActionApiV1NarrativeCharacterIdActionPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NarrativeApi
   */
  public performNarrativeActionApiV1NarrativeCharacterIdActionPost(
    requestParameters: NarrativeApiPerformNarrativeActionApiV1NarrativeCharacterIdActionPostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return NarrativeApiFp(this.configuration)
      .performNarrativeActionApiV1NarrativeCharacterIdActionPost(
        requestParameters.characterId,
        requestParameters.actionRequest,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }
}
