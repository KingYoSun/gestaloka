// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * GESTALOKA API
 * マルチプレイ・テキストMMO - ゲスタロカ API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { LogFragmentDetail } from '../models';
// @ts-ignore
import type { LogFragmentListResponse } from '../models';
// @ts-ignore
import type { LogFragmentRarity } from '../models';
/**
 * LogFragmentsApi - axios parameter creator
 * @export
 */
export const LogFragmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * キャラクターが所有するログフラグメントを取得
         * @summary Get Character Fragments
         * @param {string} characterId 
         * @param {LogFragmentRarity | null} [rarity] レアリティでフィルタ
         * @param {string | null} [keyword] キーワードで検索
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCharacterFragmentsApiV1LogFragmentsCharacterIdFragmentsGet: async (characterId: string, rarity?: LogFragmentRarity | null, keyword?: string | null, limit?: number, offset?: number, authToken?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'characterId' is not null or undefined
            assertParamExists('getCharacterFragmentsApiV1LogFragmentsCharacterIdFragmentsGet', 'characterId', characterId)
            const localVarPath = `/api/v1/log-fragments/{character_id}/fragments`
                .replace(`{${"character_id"}}`, encodeURIComponent(String(characterId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (rarity !== undefined) {
                localVarQueryParameter['rarity'] = rarity;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 特定のログフラグメントの詳細を取得
         * @summary Get Fragment Detail
         * @param {string} fragmentId 
         * @param {string} characterId 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFragmentDetailApiV1LogFragmentsCharacterIdFragmentsFragmentIdGet: async (fragmentId: string, characterId: string, authToken?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fragmentId' is not null or undefined
            assertParamExists('getFragmentDetailApiV1LogFragmentsCharacterIdFragmentsFragmentIdGet', 'fragmentId', fragmentId)
            // verify required parameter 'characterId' is not null or undefined
            assertParamExists('getFragmentDetailApiV1LogFragmentsCharacterIdFragmentsFragmentIdGet', 'characterId', characterId)
            const localVarPath = `/api/v1/log-fragments/{character_id}/fragments/{fragment_id}`
                .replace(`{${"fragment_id"}}`, encodeURIComponent(String(fragmentId)))
                .replace(`{${"character_id"}}`, encodeURIComponent(String(characterId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LogFragmentsApi - functional programming interface
 * @export
 */
export const LogFragmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LogFragmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * キャラクターが所有するログフラグメントを取得
         * @summary Get Character Fragments
         * @param {string} characterId 
         * @param {LogFragmentRarity | null} [rarity] レアリティでフィルタ
         * @param {string | null} [keyword] キーワードで検索
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCharacterFragmentsApiV1LogFragmentsCharacterIdFragmentsGet(characterId: string, rarity?: LogFragmentRarity | null, keyword?: string | null, limit?: number, offset?: number, authToken?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogFragmentListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCharacterFragmentsApiV1LogFragmentsCharacterIdFragmentsGet(characterId, rarity, keyword, limit, offset, authToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LogFragmentsApi.getCharacterFragmentsApiV1LogFragmentsCharacterIdFragmentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 特定のログフラグメントの詳細を取得
         * @summary Get Fragment Detail
         * @param {string} fragmentId 
         * @param {string} characterId 
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFragmentDetailApiV1LogFragmentsCharacterIdFragmentsFragmentIdGet(fragmentId: string, characterId: string, authToken?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogFragmentDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFragmentDetailApiV1LogFragmentsCharacterIdFragmentsFragmentIdGet(fragmentId, characterId, authToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LogFragmentsApi.getFragmentDetailApiV1LogFragmentsCharacterIdFragmentsFragmentIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LogFragmentsApi - factory interface
 * @export
 */
export const LogFragmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LogFragmentsApiFp(configuration)
    return {
        /**
         * キャラクターが所有するログフラグメントを取得
         * @summary Get Character Fragments
         * @param {LogFragmentsApiGetCharacterFragmentsApiV1LogFragmentsCharacterIdFragmentsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCharacterFragmentsApiV1LogFragmentsCharacterIdFragmentsGet(requestParameters: LogFragmentsApiGetCharacterFragmentsApiV1LogFragmentsCharacterIdFragmentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<LogFragmentListResponse> {
            return localVarFp.getCharacterFragmentsApiV1LogFragmentsCharacterIdFragmentsGet(requestParameters.characterId, requestParameters.rarity, requestParameters.keyword, requestParameters.limit, requestParameters.offset, requestParameters.authToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 特定のログフラグメントの詳細を取得
         * @summary Get Fragment Detail
         * @param {LogFragmentsApiGetFragmentDetailApiV1LogFragmentsCharacterIdFragmentsFragmentIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFragmentDetailApiV1LogFragmentsCharacterIdFragmentsFragmentIdGet(requestParameters: LogFragmentsApiGetFragmentDetailApiV1LogFragmentsCharacterIdFragmentsFragmentIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<LogFragmentDetail> {
            return localVarFp.getFragmentDetailApiV1LogFragmentsCharacterIdFragmentsFragmentIdGet(requestParameters.fragmentId, requestParameters.characterId, requestParameters.authToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LogFragmentsApi - interface
 * @export
 * @interface LogFragmentsApi
 */
export interface LogFragmentsApiInterface {
    /**
     * キャラクターが所有するログフラグメントを取得
     * @summary Get Character Fragments
     * @param {LogFragmentsApiGetCharacterFragmentsApiV1LogFragmentsCharacterIdFragmentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogFragmentsApiInterface
     */
    getCharacterFragmentsApiV1LogFragmentsCharacterIdFragmentsGet(requestParameters: LogFragmentsApiGetCharacterFragmentsApiV1LogFragmentsCharacterIdFragmentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<LogFragmentListResponse>;

    /**
     * 特定のログフラグメントの詳細を取得
     * @summary Get Fragment Detail
     * @param {LogFragmentsApiGetFragmentDetailApiV1LogFragmentsCharacterIdFragmentsFragmentIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogFragmentsApiInterface
     */
    getFragmentDetailApiV1LogFragmentsCharacterIdFragmentsFragmentIdGet(requestParameters: LogFragmentsApiGetFragmentDetailApiV1LogFragmentsCharacterIdFragmentsFragmentIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<LogFragmentDetail>;

}

/**
 * Request parameters for getCharacterFragmentsApiV1LogFragmentsCharacterIdFragmentsGet operation in LogFragmentsApi.
 * @export
 * @interface LogFragmentsApiGetCharacterFragmentsApiV1LogFragmentsCharacterIdFragmentsGetRequest
 */
export interface LogFragmentsApiGetCharacterFragmentsApiV1LogFragmentsCharacterIdFragmentsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof LogFragmentsApiGetCharacterFragmentsApiV1LogFragmentsCharacterIdFragmentsGet
     */
    readonly characterId: string

    /**
     * レアリティでフィルタ
     * @type {LogFragmentRarity}
     * @memberof LogFragmentsApiGetCharacterFragmentsApiV1LogFragmentsCharacterIdFragmentsGet
     */
    readonly rarity?: LogFragmentRarity | null

    /**
     * キーワードで検索
     * @type {string}
     * @memberof LogFragmentsApiGetCharacterFragmentsApiV1LogFragmentsCharacterIdFragmentsGet
     */
    readonly keyword?: string | null

    /**
     * 
     * @type {number}
     * @memberof LogFragmentsApiGetCharacterFragmentsApiV1LogFragmentsCharacterIdFragmentsGet
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof LogFragmentsApiGetCharacterFragmentsApiV1LogFragmentsCharacterIdFragmentsGet
     */
    readonly offset?: number

    /**
     * 
     * @type {string}
     * @memberof LogFragmentsApiGetCharacterFragmentsApiV1LogFragmentsCharacterIdFragmentsGet
     */
    readonly authToken?: string | null
}

/**
 * Request parameters for getFragmentDetailApiV1LogFragmentsCharacterIdFragmentsFragmentIdGet operation in LogFragmentsApi.
 * @export
 * @interface LogFragmentsApiGetFragmentDetailApiV1LogFragmentsCharacterIdFragmentsFragmentIdGetRequest
 */
export interface LogFragmentsApiGetFragmentDetailApiV1LogFragmentsCharacterIdFragmentsFragmentIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof LogFragmentsApiGetFragmentDetailApiV1LogFragmentsCharacterIdFragmentsFragmentIdGet
     */
    readonly fragmentId: string

    /**
     * 
     * @type {string}
     * @memberof LogFragmentsApiGetFragmentDetailApiV1LogFragmentsCharacterIdFragmentsFragmentIdGet
     */
    readonly characterId: string

    /**
     * 
     * @type {string}
     * @memberof LogFragmentsApiGetFragmentDetailApiV1LogFragmentsCharacterIdFragmentsFragmentIdGet
     */
    readonly authToken?: string | null
}

/**
 * LogFragmentsApi - object-oriented interface
 * @export
 * @class LogFragmentsApi
 * @extends {BaseAPI}
 */
export class LogFragmentsApi extends BaseAPI implements LogFragmentsApiInterface {
    /**
     * キャラクターが所有するログフラグメントを取得
     * @summary Get Character Fragments
     * @param {LogFragmentsApiGetCharacterFragmentsApiV1LogFragmentsCharacterIdFragmentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogFragmentsApi
     */
    public getCharacterFragmentsApiV1LogFragmentsCharacterIdFragmentsGet(requestParameters: LogFragmentsApiGetCharacterFragmentsApiV1LogFragmentsCharacterIdFragmentsGetRequest, options?: RawAxiosRequestConfig) {
        return LogFragmentsApiFp(this.configuration).getCharacterFragmentsApiV1LogFragmentsCharacterIdFragmentsGet(requestParameters.characterId, requestParameters.rarity, requestParameters.keyword, requestParameters.limit, requestParameters.offset, requestParameters.authToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 特定のログフラグメントの詳細を取得
     * @summary Get Fragment Detail
     * @param {LogFragmentsApiGetFragmentDetailApiV1LogFragmentsCharacterIdFragmentsFragmentIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogFragmentsApi
     */
    public getFragmentDetailApiV1LogFragmentsCharacterIdFragmentsFragmentIdGet(requestParameters: LogFragmentsApiGetFragmentDetailApiV1LogFragmentsCharacterIdFragmentsFragmentIdGetRequest, options?: RawAxiosRequestConfig) {
        return LogFragmentsApiFp(this.configuration).getFragmentDetailApiV1LogFragmentsCharacterIdFragmentsFragmentIdGet(requestParameters.fragmentId, requestParameters.characterId, requestParameters.authToken, options).then((request) => request(this.axios, this.basePath));
    }
}

