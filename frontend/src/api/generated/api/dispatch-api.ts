/* tslint:disable */
/* eslint-disable */
/**
 * GESTALOKA API
 * マルチプレイ・テキストMMO - ゲスタロカ API
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from '../base'
// @ts-ignore
import type { DispatchCreate } from '../models'
// @ts-ignore
import type { DispatchRead } from '../models'
// @ts-ignore
import type { DispatchReportRead } from '../models'
// @ts-ignore
import type { DispatchStatus } from '../models'
// @ts-ignore
import type { DispatchWithEncounters } from '../models'
// @ts-ignore
import type { HTTPValidationError } from '../models'
/**
 * DispatchApi - axios parameter creator
 * @export
 */
export const DispatchApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * ログを派遣する  完成ログを指定して、他のプレイヤーの世界に派遣します。 派遣にはSPが必要です。
     * @summary Create Dispatch
     * @param {DispatchCreate} dispatchCreate
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDispatchApiV1DispatchDispatchPost: async (
      dispatchCreate: DispatchCreate,
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'dispatchCreate' is not null or undefined
      assertParamExists(
        'createDispatchApiV1DispatchDispatchPost',
        'dispatchCreate',
        dispatchCreate
      )
      const localVarPath = `/api/v1/dispatch/dispatch`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dispatchCreate,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 派遣の詳細情報を取得  遭遇記録や活動ログを含む詳細情報を返します。
     * @summary Get Dispatch Detail
     * @param {string} dispatchId
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDispatchDetailApiV1DispatchDispatchesDispatchIdGet: async (
      dispatchId: string,
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'dispatchId' is not null or undefined
      assertParamExists(
        'getDispatchDetailApiV1DispatchDispatchesDispatchIdGet',
        'dispatchId',
        dispatchId
      )
      const localVarPath = `/api/v1/dispatch/dispatches/{dispatch_id}`.replace(
        `{${'dispatch_id'}}`,
        encodeURIComponent(String(dispatchId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 派遣報告書を取得  派遣が完了した後の詳細な報告書を取得します。
     * @summary Get Dispatch Report
     * @param {string} dispatchId
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDispatchReportApiV1DispatchDispatchesDispatchIdReportGet: async (
      dispatchId: string,
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'dispatchId' is not null or undefined
      assertParamExists(
        'getDispatchReportApiV1DispatchDispatchesDispatchIdReportGet',
        'dispatchId',
        dispatchId
      )
      const localVarPath =
        `/api/v1/dispatch/dispatches/{dispatch_id}/report`.replace(
          `{${'dispatch_id'}}`,
          encodeURIComponent(String(dispatchId))
        )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 自分の派遣一覧を取得
     * @summary Get My Dispatches
     * @param {DispatchStatus | null} [status] フィルタするステータス
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyDispatchesApiV1DispatchDispatchesGet: async (
      status?: DispatchStatus | null,
      skip?: number,
      limit?: number,
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/dispatch/dispatches`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      if (status !== undefined) {
        localVarQueryParameter['status'] = status
      }

      if (skip !== undefined) {
        localVarQueryParameter['skip'] = skip
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 派遣ログNPCとの相互作用を記録  Args:     encounter_id: 遭遇ID（game_sessionから取得）     interaction_type: 相互作用の種類（talk, trade, help等）     interaction_result: 相互作用の結果（アイテム交換、情報共有等）
     * @summary Interact With Log Npc
     * @param {string} encounterId
     * @param {string} interactionType
     * @param {object} body
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    interactWithLogNpcApiV1DispatchEncountersEncounterIdInteractPost: async (
      encounterId: string,
      interactionType: string,
      body: object,
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'encounterId' is not null or undefined
      assertParamExists(
        'interactWithLogNpcApiV1DispatchEncountersEncounterIdInteractPost',
        'encounterId',
        encounterId
      )
      // verify required parameter 'interactionType' is not null or undefined
      assertParamExists(
        'interactWithLogNpcApiV1DispatchEncountersEncounterIdInteractPost',
        'interactionType',
        interactionType
      )
      // verify required parameter 'body' is not null or undefined
      assertParamExists(
        'interactWithLogNpcApiV1DispatchEncountersEncounterIdInteractPost',
        'body',
        body
      )
      const localVarPath =
        `/api/v1/dispatch/encounters/{encounter_id}/interact`.replace(
          `{${'encounter_id'}}`,
          encodeURIComponent(String(encounterId))
        )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      if (interactionType !== undefined) {
        localVarQueryParameter['interaction_type'] = interactionType
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 派遣を緊急召還する  派遣中のログを即座に帰還させます。 追加のSPが必要です。
     * @summary Recall Dispatch
     * @param {string} dispatchId
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recallDispatchApiV1DispatchDispatchesDispatchIdRecallPost: async (
      dispatchId: string,
      authToken?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'dispatchId' is not null or undefined
      assertParamExists(
        'recallDispatchApiV1DispatchDispatchesDispatchIdRecallPost',
        'dispatchId',
        dispatchId
      )
      const localVarPath =
        `/api/v1/dispatch/dispatches/{dispatch_id}/recall`.replace(
          `{${'dispatch_id'}}`,
          encodeURIComponent(String(dispatchId))
        )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * DispatchApi - functional programming interface
 * @export
 */
export const DispatchApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DispatchApiAxiosParamCreator(configuration)
  return {
    /**
     * ログを派遣する  完成ログを指定して、他のプレイヤーの世界に派遣します。 派遣にはSPが必要です。
     * @summary Create Dispatch
     * @param {DispatchCreate} dispatchCreate
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createDispatchApiV1DispatchDispatchPost(
      dispatchCreate: DispatchCreate,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DispatchRead>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createDispatchApiV1DispatchDispatchPost(
          dispatchCreate,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'DispatchApi.createDispatchApiV1DispatchDispatchPost'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * 派遣の詳細情報を取得  遭遇記録や活動ログを含む詳細情報を返します。
     * @summary Get Dispatch Detail
     * @param {string} dispatchId
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDispatchDetailApiV1DispatchDispatchesDispatchIdGet(
      dispatchId: string,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<DispatchWithEncounters>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getDispatchDetailApiV1DispatchDispatchesDispatchIdGet(
          dispatchId,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'DispatchApi.getDispatchDetailApiV1DispatchDispatchesDispatchIdGet'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * 派遣報告書を取得  派遣が完了した後の詳細な報告書を取得します。
     * @summary Get Dispatch Report
     * @param {string} dispatchId
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDispatchReportApiV1DispatchDispatchesDispatchIdReportGet(
      dispatchId: string,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<DispatchReportRead>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getDispatchReportApiV1DispatchDispatchesDispatchIdReportGet(
          dispatchId,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'DispatchApi.getDispatchReportApiV1DispatchDispatchesDispatchIdReportGet'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * 自分の派遣一覧を取得
     * @summary Get My Dispatches
     * @param {DispatchStatus | null} [status] フィルタするステータス
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMyDispatchesApiV1DispatchDispatchesGet(
      status?: DispatchStatus | null,
      skip?: number,
      limit?: number,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<DispatchRead>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getMyDispatchesApiV1DispatchDispatchesGet(
          status,
          skip,
          limit,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'DispatchApi.getMyDispatchesApiV1DispatchDispatchesGet'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * 派遣ログNPCとの相互作用を記録  Args:     encounter_id: 遭遇ID（game_sessionから取得）     interaction_type: 相互作用の種類（talk, trade, help等）     interaction_result: 相互作用の結果（アイテム交換、情報共有等）
     * @summary Interact With Log Npc
     * @param {string} encounterId
     * @param {string} interactionType
     * @param {object} body
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async interactWithLogNpcApiV1DispatchEncountersEncounterIdInteractPost(
      encounterId: string,
      interactionType: string,
      body: object,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.interactWithLogNpcApiV1DispatchEncountersEncounterIdInteractPost(
          encounterId,
          interactionType,
          body,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'DispatchApi.interactWithLogNpcApiV1DispatchEncountersEncounterIdInteractPost'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * 派遣を緊急召還する  派遣中のログを即座に帰還させます。 追加のSPが必要です。
     * @summary Recall Dispatch
     * @param {string} dispatchId
     * @param {string | null} [authToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async recallDispatchApiV1DispatchDispatchesDispatchIdRecallPost(
      dispatchId: string,
      authToken?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.recallDispatchApiV1DispatchDispatchesDispatchIdRecallPost(
          dispatchId,
          authToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap[
          'DispatchApi.recallDispatchApiV1DispatchDispatchesDispatchIdRecallPost'
        ]?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * DispatchApi - factory interface
 * @export
 */
export const DispatchApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DispatchApiFp(configuration)
  return {
    /**
     * ログを派遣する  完成ログを指定して、他のプレイヤーの世界に派遣します。 派遣にはSPが必要です。
     * @summary Create Dispatch
     * @param {DispatchApiCreateDispatchApiV1DispatchDispatchPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDispatchApiV1DispatchDispatchPost(
      requestParameters: DispatchApiCreateDispatchApiV1DispatchDispatchPostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<DispatchRead> {
      return localVarFp
        .createDispatchApiV1DispatchDispatchPost(
          requestParameters.dispatchCreate,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * 派遣の詳細情報を取得  遭遇記録や活動ログを含む詳細情報を返します。
     * @summary Get Dispatch Detail
     * @param {DispatchApiGetDispatchDetailApiV1DispatchDispatchesDispatchIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDispatchDetailApiV1DispatchDispatchesDispatchIdGet(
      requestParameters: DispatchApiGetDispatchDetailApiV1DispatchDispatchesDispatchIdGetRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<DispatchWithEncounters> {
      return localVarFp
        .getDispatchDetailApiV1DispatchDispatchesDispatchIdGet(
          requestParameters.dispatchId,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * 派遣報告書を取得  派遣が完了した後の詳細な報告書を取得します。
     * @summary Get Dispatch Report
     * @param {DispatchApiGetDispatchReportApiV1DispatchDispatchesDispatchIdReportGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDispatchReportApiV1DispatchDispatchesDispatchIdReportGet(
      requestParameters: DispatchApiGetDispatchReportApiV1DispatchDispatchesDispatchIdReportGetRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<DispatchReportRead> {
      return localVarFp
        .getDispatchReportApiV1DispatchDispatchesDispatchIdReportGet(
          requestParameters.dispatchId,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * 自分の派遣一覧を取得
     * @summary Get My Dispatches
     * @param {DispatchApiGetMyDispatchesApiV1DispatchDispatchesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyDispatchesApiV1DispatchDispatchesGet(
      requestParameters: DispatchApiGetMyDispatchesApiV1DispatchDispatchesGetRequest = {},
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Array<DispatchRead>> {
      return localVarFp
        .getMyDispatchesApiV1DispatchDispatchesGet(
          requestParameters.status,
          requestParameters.skip,
          requestParameters.limit,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * 派遣ログNPCとの相互作用を記録  Args:     encounter_id: 遭遇ID（game_sessionから取得）     interaction_type: 相互作用の種類（talk, trade, help等）     interaction_result: 相互作用の結果（アイテム交換、情報共有等）
     * @summary Interact With Log Npc
     * @param {DispatchApiInteractWithLogNpcApiV1DispatchEncountersEncounterIdInteractPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    interactWithLogNpcApiV1DispatchEncountersEncounterIdInteractPost(
      requestParameters: DispatchApiInteractWithLogNpcApiV1DispatchEncountersEncounterIdInteractPostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .interactWithLogNpcApiV1DispatchEncountersEncounterIdInteractPost(
          requestParameters.encounterId,
          requestParameters.interactionType,
          requestParameters.body,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * 派遣を緊急召還する  派遣中のログを即座に帰還させます。 追加のSPが必要です。
     * @summary Recall Dispatch
     * @param {DispatchApiRecallDispatchApiV1DispatchDispatchesDispatchIdRecallPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recallDispatchApiV1DispatchDispatchesDispatchIdRecallPost(
      requestParameters: DispatchApiRecallDispatchApiV1DispatchDispatchesDispatchIdRecallPostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .recallDispatchApiV1DispatchDispatchesDispatchIdRecallPost(
          requestParameters.dispatchId,
          requestParameters.authToken,
          options
        )
        .then(request => request(axios, basePath))
    },
  }
}

/**
 * DispatchApi - interface
 * @export
 * @interface DispatchApi
 */
export interface DispatchApiInterface {
  /**
   * ログを派遣する  完成ログを指定して、他のプレイヤーの世界に派遣します。 派遣にはSPが必要です。
   * @summary Create Dispatch
   * @param {DispatchApiCreateDispatchApiV1DispatchDispatchPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DispatchApiInterface
   */
  createDispatchApiV1DispatchDispatchPost(
    requestParameters: DispatchApiCreateDispatchApiV1DispatchDispatchPostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<DispatchRead>

  /**
   * 派遣の詳細情報を取得  遭遇記録や活動ログを含む詳細情報を返します。
   * @summary Get Dispatch Detail
   * @param {DispatchApiGetDispatchDetailApiV1DispatchDispatchesDispatchIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DispatchApiInterface
   */
  getDispatchDetailApiV1DispatchDispatchesDispatchIdGet(
    requestParameters: DispatchApiGetDispatchDetailApiV1DispatchDispatchesDispatchIdGetRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<DispatchWithEncounters>

  /**
   * 派遣報告書を取得  派遣が完了した後の詳細な報告書を取得します。
   * @summary Get Dispatch Report
   * @param {DispatchApiGetDispatchReportApiV1DispatchDispatchesDispatchIdReportGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DispatchApiInterface
   */
  getDispatchReportApiV1DispatchDispatchesDispatchIdReportGet(
    requestParameters: DispatchApiGetDispatchReportApiV1DispatchDispatchesDispatchIdReportGetRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<DispatchReportRead>

  /**
   * 自分の派遣一覧を取得
   * @summary Get My Dispatches
   * @param {DispatchApiGetMyDispatchesApiV1DispatchDispatchesGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DispatchApiInterface
   */
  getMyDispatchesApiV1DispatchDispatchesGet(
    requestParameters?: DispatchApiGetMyDispatchesApiV1DispatchDispatchesGetRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Array<DispatchRead>>

  /**
   * 派遣ログNPCとの相互作用を記録  Args:     encounter_id: 遭遇ID（game_sessionから取得）     interaction_type: 相互作用の種類（talk, trade, help等）     interaction_result: 相互作用の結果（アイテム交換、情報共有等）
   * @summary Interact With Log Npc
   * @param {DispatchApiInteractWithLogNpcApiV1DispatchEncountersEncounterIdInteractPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DispatchApiInterface
   */
  interactWithLogNpcApiV1DispatchEncountersEncounterIdInteractPost(
    requestParameters: DispatchApiInteractWithLogNpcApiV1DispatchEncountersEncounterIdInteractPostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<any>

  /**
   * 派遣を緊急召還する  派遣中のログを即座に帰還させます。 追加のSPが必要です。
   * @summary Recall Dispatch
   * @param {DispatchApiRecallDispatchApiV1DispatchDispatchesDispatchIdRecallPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DispatchApiInterface
   */
  recallDispatchApiV1DispatchDispatchesDispatchIdRecallPost(
    requestParameters: DispatchApiRecallDispatchApiV1DispatchDispatchesDispatchIdRecallPostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<any>
}

/**
 * Request parameters for createDispatchApiV1DispatchDispatchPost operation in DispatchApi.
 * @export
 * @interface DispatchApiCreateDispatchApiV1DispatchDispatchPostRequest
 */
export interface DispatchApiCreateDispatchApiV1DispatchDispatchPostRequest {
  /**
   *
   * @type {DispatchCreate}
   * @memberof DispatchApiCreateDispatchApiV1DispatchDispatchPost
   */
  readonly dispatchCreate: DispatchCreate

  /**
   *
   * @type {string}
   * @memberof DispatchApiCreateDispatchApiV1DispatchDispatchPost
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for getDispatchDetailApiV1DispatchDispatchesDispatchIdGet operation in DispatchApi.
 * @export
 * @interface DispatchApiGetDispatchDetailApiV1DispatchDispatchesDispatchIdGetRequest
 */
export interface DispatchApiGetDispatchDetailApiV1DispatchDispatchesDispatchIdGetRequest {
  /**
   *
   * @type {string}
   * @memberof DispatchApiGetDispatchDetailApiV1DispatchDispatchesDispatchIdGet
   */
  readonly dispatchId: string

  /**
   *
   * @type {string}
   * @memberof DispatchApiGetDispatchDetailApiV1DispatchDispatchesDispatchIdGet
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for getDispatchReportApiV1DispatchDispatchesDispatchIdReportGet operation in DispatchApi.
 * @export
 * @interface DispatchApiGetDispatchReportApiV1DispatchDispatchesDispatchIdReportGetRequest
 */
export interface DispatchApiGetDispatchReportApiV1DispatchDispatchesDispatchIdReportGetRequest {
  /**
   *
   * @type {string}
   * @memberof DispatchApiGetDispatchReportApiV1DispatchDispatchesDispatchIdReportGet
   */
  readonly dispatchId: string

  /**
   *
   * @type {string}
   * @memberof DispatchApiGetDispatchReportApiV1DispatchDispatchesDispatchIdReportGet
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for getMyDispatchesApiV1DispatchDispatchesGet operation in DispatchApi.
 * @export
 * @interface DispatchApiGetMyDispatchesApiV1DispatchDispatchesGetRequest
 */
export interface DispatchApiGetMyDispatchesApiV1DispatchDispatchesGetRequest {
  /**
   * フィルタするステータス
   * @type {DispatchStatus}
   * @memberof DispatchApiGetMyDispatchesApiV1DispatchDispatchesGet
   */
  readonly status?: DispatchStatus | null

  /**
   *
   * @type {number}
   * @memberof DispatchApiGetMyDispatchesApiV1DispatchDispatchesGet
   */
  readonly skip?: number

  /**
   *
   * @type {number}
   * @memberof DispatchApiGetMyDispatchesApiV1DispatchDispatchesGet
   */
  readonly limit?: number

  /**
   *
   * @type {string}
   * @memberof DispatchApiGetMyDispatchesApiV1DispatchDispatchesGet
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for interactWithLogNpcApiV1DispatchEncountersEncounterIdInteractPost operation in DispatchApi.
 * @export
 * @interface DispatchApiInteractWithLogNpcApiV1DispatchEncountersEncounterIdInteractPostRequest
 */
export interface DispatchApiInteractWithLogNpcApiV1DispatchEncountersEncounterIdInteractPostRequest {
  /**
   *
   * @type {string}
   * @memberof DispatchApiInteractWithLogNpcApiV1DispatchEncountersEncounterIdInteractPost
   */
  readonly encounterId: string

  /**
   *
   * @type {string}
   * @memberof DispatchApiInteractWithLogNpcApiV1DispatchEncountersEncounterIdInteractPost
   */
  readonly interactionType: string

  /**
   *
   * @type {object}
   * @memberof DispatchApiInteractWithLogNpcApiV1DispatchEncountersEncounterIdInteractPost
   */
  readonly body: object

  /**
   *
   * @type {string}
   * @memberof DispatchApiInteractWithLogNpcApiV1DispatchEncountersEncounterIdInteractPost
   */
  readonly authToken?: string | null
}

/**
 * Request parameters for recallDispatchApiV1DispatchDispatchesDispatchIdRecallPost operation in DispatchApi.
 * @export
 * @interface DispatchApiRecallDispatchApiV1DispatchDispatchesDispatchIdRecallPostRequest
 */
export interface DispatchApiRecallDispatchApiV1DispatchDispatchesDispatchIdRecallPostRequest {
  /**
   *
   * @type {string}
   * @memberof DispatchApiRecallDispatchApiV1DispatchDispatchesDispatchIdRecallPost
   */
  readonly dispatchId: string

  /**
   *
   * @type {string}
   * @memberof DispatchApiRecallDispatchApiV1DispatchDispatchesDispatchIdRecallPost
   */
  readonly authToken?: string | null
}

/**
 * DispatchApi - object-oriented interface
 * @export
 * @class DispatchApi
 * @extends {BaseAPI}
 */
export class DispatchApi extends BaseAPI implements DispatchApiInterface {
  /**
   * ログを派遣する  完成ログを指定して、他のプレイヤーの世界に派遣します。 派遣にはSPが必要です。
   * @summary Create Dispatch
   * @param {DispatchApiCreateDispatchApiV1DispatchDispatchPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DispatchApi
   */
  public createDispatchApiV1DispatchDispatchPost(
    requestParameters: DispatchApiCreateDispatchApiV1DispatchDispatchPostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return DispatchApiFp(this.configuration)
      .createDispatchApiV1DispatchDispatchPost(
        requestParameters.dispatchCreate,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * 派遣の詳細情報を取得  遭遇記録や活動ログを含む詳細情報を返します。
   * @summary Get Dispatch Detail
   * @param {DispatchApiGetDispatchDetailApiV1DispatchDispatchesDispatchIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DispatchApi
   */
  public getDispatchDetailApiV1DispatchDispatchesDispatchIdGet(
    requestParameters: DispatchApiGetDispatchDetailApiV1DispatchDispatchesDispatchIdGetRequest,
    options?: RawAxiosRequestConfig
  ) {
    return DispatchApiFp(this.configuration)
      .getDispatchDetailApiV1DispatchDispatchesDispatchIdGet(
        requestParameters.dispatchId,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * 派遣報告書を取得  派遣が完了した後の詳細な報告書を取得します。
   * @summary Get Dispatch Report
   * @param {DispatchApiGetDispatchReportApiV1DispatchDispatchesDispatchIdReportGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DispatchApi
   */
  public getDispatchReportApiV1DispatchDispatchesDispatchIdReportGet(
    requestParameters: DispatchApiGetDispatchReportApiV1DispatchDispatchesDispatchIdReportGetRequest,
    options?: RawAxiosRequestConfig
  ) {
    return DispatchApiFp(this.configuration)
      .getDispatchReportApiV1DispatchDispatchesDispatchIdReportGet(
        requestParameters.dispatchId,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * 自分の派遣一覧を取得
   * @summary Get My Dispatches
   * @param {DispatchApiGetMyDispatchesApiV1DispatchDispatchesGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DispatchApi
   */
  public getMyDispatchesApiV1DispatchDispatchesGet(
    requestParameters: DispatchApiGetMyDispatchesApiV1DispatchDispatchesGetRequest = {},
    options?: RawAxiosRequestConfig
  ) {
    return DispatchApiFp(this.configuration)
      .getMyDispatchesApiV1DispatchDispatchesGet(
        requestParameters.status,
        requestParameters.skip,
        requestParameters.limit,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * 派遣ログNPCとの相互作用を記録  Args:     encounter_id: 遭遇ID（game_sessionから取得）     interaction_type: 相互作用の種類（talk, trade, help等）     interaction_result: 相互作用の結果（アイテム交換、情報共有等）
   * @summary Interact With Log Npc
   * @param {DispatchApiInteractWithLogNpcApiV1DispatchEncountersEncounterIdInteractPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DispatchApi
   */
  public interactWithLogNpcApiV1DispatchEncountersEncounterIdInteractPost(
    requestParameters: DispatchApiInteractWithLogNpcApiV1DispatchEncountersEncounterIdInteractPostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return DispatchApiFp(this.configuration)
      .interactWithLogNpcApiV1DispatchEncountersEncounterIdInteractPost(
        requestParameters.encounterId,
        requestParameters.interactionType,
        requestParameters.body,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * 派遣を緊急召還する  派遣中のログを即座に帰還させます。 追加のSPが必要です。
   * @summary Recall Dispatch
   * @param {DispatchApiRecallDispatchApiV1DispatchDispatchesDispatchIdRecallPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DispatchApi
   */
  public recallDispatchApiV1DispatchDispatchesDispatchIdRecallPost(
    requestParameters: DispatchApiRecallDispatchApiV1DispatchDispatchesDispatchIdRecallPostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return DispatchApiFp(this.configuration)
      .recallDispatchApiV1DispatchDispatchesDispatchIdRecallPost(
        requestParameters.dispatchId,
        requestParameters.authToken,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }
}
