// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * GESTALOKA API
 * マルチプレイ・テキストMMO - ゲスタロカ API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { Token } from '../models';
// @ts-ignore
import type { User } from '../models';
// @ts-ignore
import type { UserRegister } from '../models';
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 現在のユーザー情報を取得
         * @summary Get Current User Info
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserInfoApiV1AuthMeGet: async (authToken?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーログイン
         * @summary Login
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginApiV1AuthLoginPost: async (username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('loginApiV1AuthLoginPost', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('loginApiV1AuthLoginPost', 'password', password)
            const localVarPath = `/api/v1/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (grantType !== undefined) { 
                localVarFormParams.set('grant_type', grantType as any);
            }
    
            if (username !== undefined) { 
                localVarFormParams.set('username', username as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.set('password', password as any);
            }
    
            if (scope !== undefined) { 
                localVarFormParams.set('scope', scope as any);
            }
    
            if (clientId !== undefined) { 
                localVarFormParams.set('client_id', clientId as any);
            }
    
            if (clientSecret !== undefined) { 
                localVarFormParams.set('client_secret', clientSecret as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーログアウト
         * @summary Logout
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutApiV1AuthLogoutPost: async (authToken?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新規ユーザー登録
         * @summary Register
         * @param {UserRegister} userRegister 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerApiV1AuthRegisterPost: async (userRegister: UserRegister, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userRegister' is not null or undefined
            assertParamExists('registerApiV1AuthRegisterPost', 'userRegister', userRegister)
            const localVarPath = `/api/v1/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userRegister, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * 現在のユーザー情報を取得
         * @summary Get Current User Info
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUserInfoApiV1AuthMeGet(authToken?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUserInfoApiV1AuthMeGet(authToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.getCurrentUserInfoApiV1AuthMeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ユーザーログイン
         * @summary Login
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginApiV1AuthLoginPost(username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginApiV1AuthLoginPost(username, password, grantType, scope, clientId, clientSecret, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.loginApiV1AuthLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ユーザーログアウト
         * @summary Logout
         * @param {string | null} [authToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logoutApiV1AuthLogoutPost(authToken?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logoutApiV1AuthLogoutPost(authToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.logoutApiV1AuthLogoutPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 新規ユーザー登録
         * @summary Register
         * @param {UserRegister} userRegister 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerApiV1AuthRegisterPost(userRegister: UserRegister, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerApiV1AuthRegisterPost(userRegister, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.registerApiV1AuthRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * 現在のユーザー情報を取得
         * @summary Get Current User Info
         * @param {AuthenticationApiGetCurrentUserInfoApiV1AuthMeGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserInfoApiV1AuthMeGet(requestParameters: AuthenticationApiGetCurrentUserInfoApiV1AuthMeGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.getCurrentUserInfoApiV1AuthMeGet(requestParameters.authToken, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーログイン
         * @summary Login
         * @param {AuthenticationApiLoginApiV1AuthLoginPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginApiV1AuthLoginPost(requestParameters: AuthenticationApiLoginApiV1AuthLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Token> {
            return localVarFp.loginApiV1AuthLoginPost(requestParameters.username, requestParameters.password, requestParameters.grantType, requestParameters.scope, requestParameters.clientId, requestParameters.clientSecret, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーログアウト
         * @summary Logout
         * @param {AuthenticationApiLogoutApiV1AuthLogoutPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutApiV1AuthLogoutPost(requestParameters: AuthenticationApiLogoutApiV1AuthLogoutPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.logoutApiV1AuthLogoutPost(requestParameters.authToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 新規ユーザー登録
         * @summary Register
         * @param {AuthenticationApiRegisterApiV1AuthRegisterPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerApiV1AuthRegisterPost(requestParameters: AuthenticationApiRegisterApiV1AuthRegisterPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.registerApiV1AuthRegisterPost(requestParameters.userRegister, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - interface
 * @export
 * @interface AuthenticationApi
 */
export interface AuthenticationApiInterface {
    /**
     * 現在のユーザー情報を取得
     * @summary Get Current User Info
     * @param {AuthenticationApiGetCurrentUserInfoApiV1AuthMeGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    getCurrentUserInfoApiV1AuthMeGet(requestParameters?: AuthenticationApiGetCurrentUserInfoApiV1AuthMeGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<User>;

    /**
     * ユーザーログイン
     * @summary Login
     * @param {AuthenticationApiLoginApiV1AuthLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    loginApiV1AuthLoginPost(requestParameters: AuthenticationApiLoginApiV1AuthLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Token>;

    /**
     * ユーザーログアウト
     * @summary Logout
     * @param {AuthenticationApiLogoutApiV1AuthLogoutPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    logoutApiV1AuthLogoutPost(requestParameters?: AuthenticationApiLogoutApiV1AuthLogoutPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * 新規ユーザー登録
     * @summary Register
     * @param {AuthenticationApiRegisterApiV1AuthRegisterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    registerApiV1AuthRegisterPost(requestParameters: AuthenticationApiRegisterApiV1AuthRegisterPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<User>;

}

/**
 * Request parameters for getCurrentUserInfoApiV1AuthMeGet operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiGetCurrentUserInfoApiV1AuthMeGetRequest
 */
export interface AuthenticationApiGetCurrentUserInfoApiV1AuthMeGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthenticationApiGetCurrentUserInfoApiV1AuthMeGet
     */
    readonly authToken?: string | null
}

/**
 * Request parameters for loginApiV1AuthLoginPost operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiLoginApiV1AuthLoginPostRequest
 */
export interface AuthenticationApiLoginApiV1AuthLoginPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthenticationApiLoginApiV1AuthLoginPost
     */
    readonly username: string

    /**
     * 
     * @type {string}
     * @memberof AuthenticationApiLoginApiV1AuthLoginPost
     */
    readonly password: string

    /**
     * 
     * @type {string}
     * @memberof AuthenticationApiLoginApiV1AuthLoginPost
     */
    readonly grantType?: string | null

    /**
     * 
     * @type {string}
     * @memberof AuthenticationApiLoginApiV1AuthLoginPost
     */
    readonly scope?: string

    /**
     * 
     * @type {string}
     * @memberof AuthenticationApiLoginApiV1AuthLoginPost
     */
    readonly clientId?: string | null

    /**
     * 
     * @type {string}
     * @memberof AuthenticationApiLoginApiV1AuthLoginPost
     */
    readonly clientSecret?: string | null
}

/**
 * Request parameters for logoutApiV1AuthLogoutPost operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiLogoutApiV1AuthLogoutPostRequest
 */
export interface AuthenticationApiLogoutApiV1AuthLogoutPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthenticationApiLogoutApiV1AuthLogoutPost
     */
    readonly authToken?: string | null
}

/**
 * Request parameters for registerApiV1AuthRegisterPost operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiRegisterApiV1AuthRegisterPostRequest
 */
export interface AuthenticationApiRegisterApiV1AuthRegisterPostRequest {
    /**
     * 
     * @type {UserRegister}
     * @memberof AuthenticationApiRegisterApiV1AuthRegisterPost
     */
    readonly userRegister: UserRegister
}

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI implements AuthenticationApiInterface {
    /**
     * 現在のユーザー情報を取得
     * @summary Get Current User Info
     * @param {AuthenticationApiGetCurrentUserInfoApiV1AuthMeGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public getCurrentUserInfoApiV1AuthMeGet(requestParameters: AuthenticationApiGetCurrentUserInfoApiV1AuthMeGetRequest = {}, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).getCurrentUserInfoApiV1AuthMeGet(requestParameters.authToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーログイン
     * @summary Login
     * @param {AuthenticationApiLoginApiV1AuthLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public loginApiV1AuthLoginPost(requestParameters: AuthenticationApiLoginApiV1AuthLoginPostRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).loginApiV1AuthLoginPost(requestParameters.username, requestParameters.password, requestParameters.grantType, requestParameters.scope, requestParameters.clientId, requestParameters.clientSecret, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーログアウト
     * @summary Logout
     * @param {AuthenticationApiLogoutApiV1AuthLogoutPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public logoutApiV1AuthLogoutPost(requestParameters: AuthenticationApiLogoutApiV1AuthLogoutPostRequest = {}, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).logoutApiV1AuthLogoutPost(requestParameters.authToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 新規ユーザー登録
     * @summary Register
     * @param {AuthenticationApiRegisterApiV1AuthRegisterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public registerApiV1AuthRegisterPost(requestParameters: AuthenticationApiRegisterApiV1AuthRegisterPostRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).registerApiV1AuthRegisterPost(requestParameters.userRegister, options).then((request) => request(this.axios, this.basePath));
    }
}

