/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as QuestsRouteImport } from './routes/quests'
import { Route as LogsRouteImport } from './routes/logs'
import { Route as LoginRouteImport } from './routes/login'
import { Route as LogFragmentsRouteImport } from './routes/log-fragments'
import { Route as ExplorationRouteImport } from './routes/exploration'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as CharactersRouteImport } from './routes/characters'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SpIndexRouteImport } from './routes/sp/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as SpSuccessRouteImport } from './routes/sp/success'
import { Route as SpCancelRouteImport } from './routes/sp/cancel'
import { Route as GameStartRouteImport } from './routes/game/start'
import { Route as GameSessionIdRouteImport } from './routes/game/$sessionId'
import { Route as CharacterCreateRouteImport } from './routes/character.create'
import { Route as CharacterIdRouteImport } from './routes/character.$id'
import { Route as AdminSpRouteImport } from './routes/admin/sp'
import { Route as AdminPerformanceRouteImport } from './routes/admin/performance'

const MemoryLazyRouteImport = createFileRoute('/memory')()

const MemoryLazyRoute = MemoryLazyRouteImport.update({
  id: '/memory',
  path: '/memory',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/memory.lazy').then((d) => d.Route))
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const QuestsRoute = QuestsRouteImport.update({
  id: '/quests',
  path: '/quests',
  getParentRoute: () => rootRouteImport,
} as any)
const LogsRoute = LogsRouteImport.update({
  id: '/logs',
  path: '/logs',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const LogFragmentsRoute = LogFragmentsRouteImport.update({
  id: '/log-fragments',
  path: '/log-fragments',
  getParentRoute: () => rootRouteImport,
} as any)
const ExplorationRoute = ExplorationRouteImport.update({
  id: '/exploration',
  path: '/exploration',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const CharactersRoute = CharactersRouteImport.update({
  id: '/characters',
  path: '/characters',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SpIndexRoute = SpIndexRouteImport.update({
  id: '/sp/',
  path: '/sp/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRouteImport,
} as any)
const SpSuccessRoute = SpSuccessRouteImport.update({
  id: '/sp/success',
  path: '/sp/success',
  getParentRoute: () => rootRouteImport,
} as any)
const SpCancelRoute = SpCancelRouteImport.update({
  id: '/sp/cancel',
  path: '/sp/cancel',
  getParentRoute: () => rootRouteImport,
} as any)
const GameStartRoute = GameStartRouteImport.update({
  id: '/game/start',
  path: '/game/start',
  getParentRoute: () => rootRouteImport,
} as any)
const GameSessionIdRoute = GameSessionIdRouteImport.update({
  id: '/game/$sessionId',
  path: '/game/$sessionId',
  getParentRoute: () => rootRouteImport,
} as any)
const CharacterCreateRoute = CharacterCreateRouteImport.update({
  id: '/character/create',
  path: '/character/create',
  getParentRoute: () => rootRouteImport,
} as any)
const CharacterIdRoute = CharacterIdRouteImport.update({
  id: '/character/$id',
  path: '/character/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminSpRoute = AdminSpRouteImport.update({
  id: '/admin/sp',
  path: '/admin/sp',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminPerformanceRoute = AdminPerformanceRouteImport.update({
  id: '/admin/performance',
  path: '/admin/performance',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/characters': typeof CharactersRoute
  '/dashboard': typeof DashboardRoute
  '/exploration': typeof ExplorationRoute
  '/log-fragments': typeof LogFragmentsRoute
  '/login': typeof LoginRoute
  '/logs': typeof LogsRoute
  '/quests': typeof QuestsRoute
  '/register': typeof RegisterRoute
  '/settings': typeof SettingsRoute
  '/memory': typeof MemoryLazyRoute
  '/admin/performance': typeof AdminPerformanceRoute
  '/admin/sp': typeof AdminSpRoute
  '/character/$id': typeof CharacterIdRoute
  '/character/create': typeof CharacterCreateRoute
  '/game/$sessionId': typeof GameSessionIdRoute
  '/game/start': typeof GameStartRoute
  '/sp/cancel': typeof SpCancelRoute
  '/sp/success': typeof SpSuccessRoute
  '/admin': typeof AdminIndexRoute
  '/sp': typeof SpIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/characters': typeof CharactersRoute
  '/dashboard': typeof DashboardRoute
  '/exploration': typeof ExplorationRoute
  '/log-fragments': typeof LogFragmentsRoute
  '/login': typeof LoginRoute
  '/logs': typeof LogsRoute
  '/quests': typeof QuestsRoute
  '/register': typeof RegisterRoute
  '/settings': typeof SettingsRoute
  '/memory': typeof MemoryLazyRoute
  '/admin/performance': typeof AdminPerformanceRoute
  '/admin/sp': typeof AdminSpRoute
  '/character/$id': typeof CharacterIdRoute
  '/character/create': typeof CharacterCreateRoute
  '/game/$sessionId': typeof GameSessionIdRoute
  '/game/start': typeof GameStartRoute
  '/sp/cancel': typeof SpCancelRoute
  '/sp/success': typeof SpSuccessRoute
  '/admin': typeof AdminIndexRoute
  '/sp': typeof SpIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/characters': typeof CharactersRoute
  '/dashboard': typeof DashboardRoute
  '/exploration': typeof ExplorationRoute
  '/log-fragments': typeof LogFragmentsRoute
  '/login': typeof LoginRoute
  '/logs': typeof LogsRoute
  '/quests': typeof QuestsRoute
  '/register': typeof RegisterRoute
  '/settings': typeof SettingsRoute
  '/memory': typeof MemoryLazyRoute
  '/admin/performance': typeof AdminPerformanceRoute
  '/admin/sp': typeof AdminSpRoute
  '/character/$id': typeof CharacterIdRoute
  '/character/create': typeof CharacterCreateRoute
  '/game/$sessionId': typeof GameSessionIdRoute
  '/game/start': typeof GameStartRoute
  '/sp/cancel': typeof SpCancelRoute
  '/sp/success': typeof SpSuccessRoute
  '/admin/': typeof AdminIndexRoute
  '/sp/': typeof SpIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/characters'
    | '/dashboard'
    | '/exploration'
    | '/log-fragments'
    | '/login'
    | '/logs'
    | '/quests'
    | '/register'
    | '/settings'
    | '/memory'
    | '/admin/performance'
    | '/admin/sp'
    | '/character/$id'
    | '/character/create'
    | '/game/$sessionId'
    | '/game/start'
    | '/sp/cancel'
    | '/sp/success'
    | '/admin'
    | '/sp'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/characters'
    | '/dashboard'
    | '/exploration'
    | '/log-fragments'
    | '/login'
    | '/logs'
    | '/quests'
    | '/register'
    | '/settings'
    | '/memory'
    | '/admin/performance'
    | '/admin/sp'
    | '/character/$id'
    | '/character/create'
    | '/game/$sessionId'
    | '/game/start'
    | '/sp/cancel'
    | '/sp/success'
    | '/admin'
    | '/sp'
  id:
    | '__root__'
    | '/'
    | '/characters'
    | '/dashboard'
    | '/exploration'
    | '/log-fragments'
    | '/login'
    | '/logs'
    | '/quests'
    | '/register'
    | '/settings'
    | '/memory'
    | '/admin/performance'
    | '/admin/sp'
    | '/character/$id'
    | '/character/create'
    | '/game/$sessionId'
    | '/game/start'
    | '/sp/cancel'
    | '/sp/success'
    | '/admin/'
    | '/sp/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CharactersRoute: typeof CharactersRoute
  DashboardRoute: typeof DashboardRoute
  ExplorationRoute: typeof ExplorationRoute
  LogFragmentsRoute: typeof LogFragmentsRoute
  LoginRoute: typeof LoginRoute
  LogsRoute: typeof LogsRoute
  QuestsRoute: typeof QuestsRoute
  RegisterRoute: typeof RegisterRoute
  SettingsRoute: typeof SettingsRoute
  MemoryLazyRoute: typeof MemoryLazyRoute
  AdminPerformanceRoute: typeof AdminPerformanceRoute
  AdminSpRoute: typeof AdminSpRoute
  CharacterIdRoute: typeof CharacterIdRoute
  CharacterCreateRoute: typeof CharacterCreateRoute
  GameSessionIdRoute: typeof GameSessionIdRoute
  GameStartRoute: typeof GameStartRoute
  SpCancelRoute: typeof SpCancelRoute
  SpSuccessRoute: typeof SpSuccessRoute
  AdminIndexRoute: typeof AdminIndexRoute
  SpIndexRoute: typeof SpIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/memory': {
      id: '/memory'
      path: '/memory'
      fullPath: '/memory'
      preLoaderRoute: typeof MemoryLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/quests': {
      id: '/quests'
      path: '/quests'
      fullPath: '/quests'
      preLoaderRoute: typeof QuestsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/logs': {
      id: '/logs'
      path: '/logs'
      fullPath: '/logs'
      preLoaderRoute: typeof LogsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/log-fragments': {
      id: '/log-fragments'
      path: '/log-fragments'
      fullPath: '/log-fragments'
      preLoaderRoute: typeof LogFragmentsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/exploration': {
      id: '/exploration'
      path: '/exploration'
      fullPath: '/exploration'
      preLoaderRoute: typeof ExplorationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/characters': {
      id: '/characters'
      path: '/characters'
      fullPath: '/characters'
      preLoaderRoute: typeof CharactersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sp/': {
      id: '/sp/'
      path: '/sp'
      fullPath: '/sp'
      preLoaderRoute: typeof SpIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sp/success': {
      id: '/sp/success'
      path: '/sp/success'
      fullPath: '/sp/success'
      preLoaderRoute: typeof SpSuccessRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sp/cancel': {
      id: '/sp/cancel'
      path: '/sp/cancel'
      fullPath: '/sp/cancel'
      preLoaderRoute: typeof SpCancelRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/game/start': {
      id: '/game/start'
      path: '/game/start'
      fullPath: '/game/start'
      preLoaderRoute: typeof GameStartRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/game/$sessionId': {
      id: '/game/$sessionId'
      path: '/game/$sessionId'
      fullPath: '/game/$sessionId'
      preLoaderRoute: typeof GameSessionIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/character/create': {
      id: '/character/create'
      path: '/character/create'
      fullPath: '/character/create'
      preLoaderRoute: typeof CharacterCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/character/$id': {
      id: '/character/$id'
      path: '/character/$id'
      fullPath: '/character/$id'
      preLoaderRoute: typeof CharacterIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/sp': {
      id: '/admin/sp'
      path: '/admin/sp'
      fullPath: '/admin/sp'
      preLoaderRoute: typeof AdminSpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/performance': {
      id: '/admin/performance'
      path: '/admin/performance'
      fullPath: '/admin/performance'
      preLoaderRoute: typeof AdminPerformanceRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CharactersRoute: CharactersRoute,
  DashboardRoute: DashboardRoute,
  ExplorationRoute: ExplorationRoute,
  LogFragmentsRoute: LogFragmentsRoute,
  LoginRoute: LoginRoute,
  LogsRoute: LogsRoute,
  QuestsRoute: QuestsRoute,
  RegisterRoute: RegisterRoute,
  SettingsRoute: SettingsRoute,
  MemoryLazyRoute: MemoryLazyRoute,
  AdminPerformanceRoute: AdminPerformanceRoute,
  AdminSpRoute: AdminSpRoute,
  CharacterIdRoute: CharacterIdRoute,
  CharacterCreateRoute: CharacterCreateRoute,
  GameSessionIdRoute: GameSessionIdRoute,
  GameStartRoute: GameStartRoute,
  SpCancelRoute: SpCancelRoute,
  SpSuccessRoute: SpSuccessRoute,
  AdminIndexRoute: AdminIndexRoute,
  SpIndexRoute: SpIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
